import { PublicClient, Address } from "viem";
import { SupportedChainIds } from "../types/config.js";
import { CreateIpAssetWithPilTermsRequest, CreateIpAssetWithPilTermsResponse, RegisterDerivativeRequest, RegisterDerivativeResponse, RegisterDerivativeWithLicenseTokensRequest, RegisterDerivativeWithLicenseTokensResponse, RegisterIpAndAttachPilTermsRequest, RegisterIpAndAttachPilTermsResponse, RegisterIpAndMakeDerivativeRequest, RegisterIpAndMakeDerivativeResponse, RegisterIpResponse, RegisterRequest } from "../types/resources/ipAsset.js";
import { IpAssetRegistryClient, LicenseRegistryReadOnlyClient, LicenseTokenReadOnlyClient, LicensingModuleClient, PiLicenseTemplateClient, RoyaltyPolicyLapClient, SimpleWalletClient, SpgClient } from "../abi/generated.js";
export declare class IPAssetClient {
    licensingModuleClient: LicensingModuleClient;
    ipAssetRegistryClient: IpAssetRegistryClient;
    licenseTemplateClient: PiLicenseTemplateClient;
    licenseRegistryReadOnlyClient: LicenseRegistryReadOnlyClient;
    licenseTokenReadOnlyClient: LicenseTokenReadOnlyClient;
    royaltyPolicyLAPClient: RoyaltyPolicyLapClient;
    spgClient: SpgClient;
    private readonly rpcClient;
    private readonly wallet;
    private readonly chainId;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, chainId: SupportedChainIds);
    /**
     * Registers an NFT as IP, creating a corresponding IP record.
     * @param request - The request object that contains all data needed to register IP.
     *   @param request.nftContract The address of the NFT.
     *   @param request.tokenId The token identifier of the NFT.
     *   @param request.txOptions [Optional] The transaction options.
     * @returns A Promise that resolves to an object containing the transaction hash and optional IP ID if waitForTxn is set to true.
     * @emits IPRegistered (ipId, chainId, tokenContract, tokenId, resolverAddr, metadataProviderAddress, metadata)
     */
    register(request: RegisterRequest): Promise<RegisterIpResponse>;
    /**
     * Registers a derivative directly with parent IP's license terms, without needing license tokens,
     * and attaches the license terms of the parent IPs to the derivative IP.
     * The license terms must be attached to the parent IP before calling this function.
     * All IPs attached default license terms by default.
     * The derivative IP owner must be the caller or an authorized operator.
     * @param request - The request object that contains all data needed to register derivative IP.
     *   @param request.childIpId The derivative IP ID.
     *   @param request.parentIpIds The parent IP IDs.
     *   @param request.licenseTermsIds The IDs of the license terms that the parent IP supports.
     *   @param request.txOptions [Optional] The transaction options.
     * @returns A Promise that resolves to an object containing the transaction hash.
     */
    registerDerivative(request: RegisterDerivativeRequest): Promise<RegisterDerivativeResponse>;
    /**
     * Registers a derivative with license tokens.
     * the derivative IP is registered with license tokens minted from the parent IP's license terms.
     * the license terms of the parent IPs issued with license tokens are attached to the derivative IP.
     * the caller must be the derivative IP owner or an authorized operator.
     * @param request - The request object that contains all data needed to register derivative license tokens.
     *   @param request.childIpId The derivative IP ID.
     *   @param request.licenseTokenIds The IDs of the license tokens.
     *   @param request.txOptions [Optional] The transaction options.
     * @returns A Promise that resolves to an object containing the transaction hash.
     */
    registerDerivativeWithLicenseTokens(request: RegisterDerivativeWithLicenseTokensRequest): Promise<RegisterDerivativeWithLicenseTokensResponse>;
    /**
     * Mint an NFT from a collection and register it as an IP.
     * @param request - The request object that contains all data needed to mint and register ip.
     *   @param request.nftContract The address of the NFT collection.
     *   @param request.pilType The type of the PIL.
     *   @param request.metadata - The metadata for the IP.
     *   @param request.metadataURI The URI of the metadata for the IP.
     *   @param request.metadata [Optional] The metadata for the IP.
     *   @param request.nftMetadata The metadata for the IP NFT.
     *   @param request.recipient [Optional] The address of the recipient of the minted NFT.
     *   @param request.mintingFee [Optional] The fee to be paid when minting a license.
     *   @param request.commercialRevShare [Optional] Percentage of revenue that must be shared with the licensor.
     *   @param request.currency [Optional] The ERC20 token to be used to pay the minting fee. the token must be registered in story protocol.
     *   @param request.txOptions [Optional] The transaction options.
     * @returns A Promise that resolves to an object containing the transaction hash and optional IP ID, Token ID, License Terms Id if waitForTxn is set to true.
     * @emits IPRegistered (ipId, chainId, tokenContract, tokenId, name, uri, registrationDate)
     * @emits LicenseTermsAttached (caller, ipId, licenseTemplate, licenseTermsId)
     */
    createIpAssetWithPilTerms(request: CreateIpAssetWithPilTermsRequest): Promise<CreateIpAssetWithPilTermsResponse>;
    /**
     * Register a given NFT as an IP and attach Programmable IP License Terms.R.
     * @param request - The request object that contains all data needed to mint and register ip.
     *   @param request.nftContract The address of the NFT collection.
     *   @param request.tokenId The ID of the NFT.
     *   @param request.pilType The type of the PIL.
     *   @param request.metadata - [Optional] The desired metadata for the newly registered IP.
     *   @param request.metadataURI The the metadata for the IP hash.
     *   @param request.metadata The metadata for the IP.
     *   @param request.nftMetadata The metadata for the IP NFT.
     *   @param request.sigMetadata - [Optional] The signature data for execution via IP Account.
     *   @param request.sigMetadata.signer The address of the signer for execution with signature.
     *   @param request.sigMetadata.deadline The deadline for the signature.
     *   @param request.sigMetadata.signature The signature for the execution via IP Account.
     *   @param request.sigAttach - The signature data for execution via IP Account.
     *   @param request.sigAttach.signer The address of the signer for execution with signature.
     *   @param request.sigAttach.deadline The deadline for the signature.
     *   @param request.sigAttach.signature The signature for the execution via IP Account.
     *   @param request.mintingFee [Optional] The fee to be paid when minting a license.
     *   @param request.commercialRevShare [Optional] Percentage of revenue that must be shared with the licensor.
     *   @param request.currency [Optional] The ERC20 token to be used to pay the minting fee. the token must be registered in story protocol.
     *   @param request.txOptions [Optional] The transaction options.
     * @returns A Promise that resolves to an object containing the transaction hash and optional IP ID, License Terms Id if waitForTxn is set to true.
     * @emits LicenseTermsAttached (caller, ipId, licenseTemplate, licenseTermsId)
     */
    registerIpAndAttachPilTerms(request: RegisterIpAndAttachPilTermsRequest): Promise<RegisterIpAndAttachPilTermsResponse>;
    /**
     * Register the given NFT as a derivative IP with metadata without using license tokens.
     * @param request - The request object that contains all data needed to register derivative IP.
     *   @param request.nftContract The address of the NFT collection.
     *   @param request.tokenId The ID of the NFT.
     *   @param request.derivData The derivative data to be used for registerDerivative.
     *   @param request.derivData.parentIpIds The IDs of the parent IPs to link the registered derivative IP.
     *   @param request.derivData.licenseTemplate [Optional] The address of the license template to be used for the linking.
     *   @param request.derivData.licenseTermsIds The IDs of the license terms to be used for the linking.
     *   @param request.sigRegister Signature data for registerDerivative for the IP via the Licensing Module.
     *   @param request.sigRegister.signer The address of the signer for execution with signature.
     *   @param request.sigRegister.deadline The deadline for the signature.
     *   @param request.sigRegister.signature The signature for the execution via IP Account.
     *   @param request.metadata - [Optional] The desired metadata for the newly registered IP.
     *   @param request.metadata.metadataURI The URI of the metadata for the IP.
     *   @param request.metadata.metadata The metadata for the IP.
     *   @param request.metadata.nftMetadata The the metadata for the IP NFT.
     *   @param request.sigMetadata - [Optional] Signature data for setAll (metadata) for the IP via the Core Metadata Module.
     *   @param request.sigMetadata.signer The address of the signer for execution with signature.
     *   @param request.sigMetadata.deadline The deadline for the signature.
     *   @param request.sigMetadata.signature The signature for the execution via IP Account.
     *   @param request.txOptions [Optional] The transaction options.
     * @returns A Promise that resolves to an object containing the transaction hash and optional IP ID if waitForTxn is set to true.
     * @emits IPRegistered (ipId, chainId, tokenContract, tokenId, name, uri, registrationDate)
     */
    registerDerivativeIp(request: RegisterIpAndMakeDerivativeRequest): Promise<RegisterIpAndMakeDerivativeResponse>;
    /**
     * Gets the canonical IP identifier associated with an IP NFT.
     * @param nftContract The address of the NFT collection.
     * @param tokenId The token identifier of the IP.
     * @returns The IP's canonical address identifier.
     */
    getIpIdAddress(nftContract: Address, tokenId: bigint | string | number): Promise<Address>;
    private isNftRegistered;
    private isRegistered;
}
//# sourceMappingURL=ipAsset.d.ts.map