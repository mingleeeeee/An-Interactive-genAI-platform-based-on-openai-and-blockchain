import { PublicClient } from "viem";
import { IPAccountExecuteRequest, IPAccountExecuteResponse, IPAccountExecuteWithSigRequest, IPAccountExecuteWithSigResponse } from "../types/resources/ipAccount.js";
import { IpAccountImplStateResponse, SimpleWalletClient } from "../abi/generated.js";
export declare class IPAccountClient {
    private readonly wallet;
    private readonly rpcClient;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient);
    /** Executes a transaction from the IP Account.
     * @param request - The request object containing necessary data to execute IP Account a transaction.
     *   @param request.to The recipient of the transaction.
     *   @param request.value The amount of Ether to send.
     *   @param request.accountAddress The ipId to send.
     *   @param request.data The data to send along with the transaction.
     * @returns Tx hash for the transaction.
     */
    execute(request: IPAccountExecuteRequest): Promise<IPAccountExecuteResponse>;
    /** Executes a transaction from the IP Account.
     * @param request - The request object containing necessary data to execute IP Account a transaction.
     *   @param request.to The recipient of the transaction.
     *   @param request.value The amount of Ether to send.
     *   @param request.data The data to send along with the transaction.
     *   @param request.signer The signer of the transaction.
     *   @param request.deadline The deadline of the transaction signature.
     *   @param request.signature The signature of the transaction, EIP-712 encoded.
     * @returns Tx hash for the transaction.
     */
    executeWithSig(request: IPAccountExecuteWithSigRequest): Promise<IPAccountExecuteWithSigResponse>;
    /** Returns the IPAccount's internal nonce for transaction ordering.
     * @param ipId The derivative IP ID
     * @returns The IPAccount's internal nonce for transaction ordering.
     */
    getIpAccountNonce(ipId: string): Promise<IpAccountImplStateResponse>;
}
//# sourceMappingURL=ipAccount.d.ts.map