import { PublicClient } from "viem";
import { SetPermissionsRequest, SetPermissionsResponse } from "../types/resources/permission.js";
import { SimpleWalletClient } from "../abi/generated.js";
export declare class PermissionClient {
    private readonly wallet;
    private readonly rpcClient;
    private accessControllerClient;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient);
    /**
     * Sets the permission for a specific function call
     * Each policy is represented as a mapping from an IP account address to a signer address to a recipient
     * address to a function selector to a permission level. The permission level can be 0 (ABSTAIN), 1 (ALLOW), or
     * 2 (DENY).
     * By default, all policies are set to 0 (ABSTAIN), which means that the permission is not set.
     * The owner of ipAccount by default has all permission.
     * address(0) => wildcard
     * bytes4(0) => wildcard
     * Specific permission overrides wildcard permission.
     * @param request - The request object containing necessary data to set permissions.
     *   @param request.ipAsset The address of the IP account that grants the permission for `signer`
     *   @param request.signer The address that can call `to` on behalf of the `ipAccount`
     *   @param request.to The address that can be called by the `signer` (currently only modules can be `to`)
     *   @param request.func Optional. The function selector string of `to` that can be called by the `signer` on behalf of the `ipAccount`. Be default, it allows all functions.
     *   @param request.permission The new permission level
     * @returns A Promise that resolves to an object containing the transaction hash
     * @emits PermissionSet (ipAccountOwner, ipAccount, signer, to, func, permission)
     */
    setPermission(request: SetPermissionsRequest): Promise<SetPermissionsResponse>;
}
//# sourceMappingURL=permission.d.ts.map