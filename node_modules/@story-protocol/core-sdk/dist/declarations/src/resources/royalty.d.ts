import { Hex, PublicClient } from "viem";
import { ClaimableRevenueRequest, ClaimableRevenueResponse, CollectRoyaltyTokensRequest, CollectRoyaltyTokensResponse, PayRoyaltyOnBehalfRequest, PayRoyaltyOnBehalfResponse, RoyaltyVaultAddress, SnapshotRequest, SnapshotResponse, ClaimRevenueRequest, ClaimRevenueResponse } from "../types/resources/royalty.js";
import { IpAssetRegistryClient, RoyaltyModuleClient, RoyaltyPolicyLapClient, SimpleWalletClient } from "../abi/generated.js";
import { IPAccountClient } from "./ipAccount.js";
export declare class RoyaltyClient {
    royaltyPolicyLapClient: RoyaltyPolicyLapClient;
    royaltyModuleClient: RoyaltyModuleClient;
    ipAssetRegistryClient: IpAssetRegistryClient;
    ipAccountClient: IPAccountClient;
    private readonly rpcClient;
    private readonly wallet;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient);
    /**
     * Allows ancestors to claim the royalty tokens and any accrued revenue tokens
     * @param request - The request object that contains all data needed to collect royalty tokens.
     *   @param request.parentIpId The ip id of the ancestor to whom the royalty tokens belong to.
     *   @param request.royaltyVaultIpId The id of the royalty vault.
     *   @param request.txOptions [Optional] The transaction options.
     * @returns A Promise that resolves to an object containing the transaction hash and optional the amount of royalty tokens collected if waitForTxn is set to true.
     * @emits RoyaltyTokensCollected (ancestorIpId, royaltyTokensCollected)
     */
    collectRoyaltyTokens(request: CollectRoyaltyTokensRequest): Promise<CollectRoyaltyTokensResponse>;
    /**
     * Allows the function caller to pay royalties to the receiver IP asset on behalf of the payer IP asset.
     * @param request - The request object that contains all data needed to pay royalty on behalf.
     *   @param request.receiverIpId The ipId that receives the royalties.
     *   @param request.payerIpId The ID of the IP asset that pays the royalties.
     *   @param request.token The token to use to pay the royalties.
     *   @param request.amount The amount to pay.
     *   @param request.txOptions [Optional] The transaction options.
     * @returns A Promise that resolves to an object containing the transaction hash.
     */
    payRoyaltyOnBehalf(request: PayRoyaltyOnBehalfRequest): Promise<PayRoyaltyOnBehalfResponse>;
    /**
     * Calculates the amount of revenue token claimable by a token holder at certain snapshot.
     * @param request - The request object that contains all data needed to claim Revenue.
     *   @param request.royaltyVaultIpId The id of the royalty vault.
     *   @param request.account The address of the token holder.
     *   @param request.snapshotId The snapshot id.
     *   @param request.token The revenue token to claim.
     *   @param request.txOptions [Optional] The transaction options.
     * @returns A Promise that contains the amount of revenue token claimable
     */
    claimableRevenue(request: ClaimableRevenueRequest): Promise<ClaimableRevenueResponse>;
    /**
     * Allows token holders to claim by a list of snapshot ids based on the token balance at certain snapshot
     * @param request - The request object that contains all data needed to claim revenue.
     *   @param request.snapshotIds The list of snapshot ids.
     *   @param request.royaltyVaultIpId The id of the royalty vault.
     *   @param request.token The revenue token to claim.
     *   @param request.account [Optional] The ipId to send.
     *   @param request.txOptions [Optional] The transaction options.
     * @returns A Promise that resolves to an object containing the transaction hash and optional claimableToken if waitForTxn is set to true.
     * @emits RevenueTokenClaimed (claimer, token, amount).
     */
    claimRevenue(request: ClaimRevenueRequest): Promise<ClaimRevenueResponse>;
    /**
     * Snapshots the claimable revenue and royalty token amounts.
     * @param request - The request object that contains all data needed to snapshot.
     *   @param request.royaltyVaultIpId The id of the royalty vault.
     *   @param request.txOptions [Optional] The transaction options.
     * @returns A Promise that resolves to an object containing the transaction hash and optional snapshotId if waitForTxn is set to true.
     * @emits SnapshotCompleted (snapshotId, snapshotTimestamp, unclaimedTokens).
     */
    snapshot(request: SnapshotRequest): Promise<SnapshotResponse>;
    /**
     * Get the royalty vault proxy address of given royaltyVaultIpId.
     * @param royaltyVaultIpId the id of the royalty vault.
     * @returns A Promise that resolves to an object containing the royalty vault address.
     */
    getRoyaltyVaultAddress(royaltyVaultIpId: Hex): Promise<RoyaltyVaultAddress>;
}
//# sourceMappingURL=royalty.d.ts.map