import { Address, Abi, Account, Chain, ContractFunctionArgs, ContractFunctionName, WriteContractParameters, WriteContractReturnType, PublicClient, Hex, WatchContractEventReturnType, TransactionReceipt } from "viem";
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0xF9936a224b3Deb6f9A4645ccAfa66f7ECe83CF0A)
 */
export declare const accessControllerAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "ipAccountRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "moduleRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "signer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessController__BothCallerAndRecipientAreNotRegisteredModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AccessController__CallerIsNotIPAccountOrOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipAccount";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessController__IPAccountIsNotValid";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AccessController__IPAccountIsZeroAddress";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipAccount";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "signer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "func";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "AccessController__PermissionDenied";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AccessController__PermissionIsNotValid";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AccessController__SignerIsZeroAddress";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AccessController__ToAndFuncAreZeroAddressShouldCallSetAllPermissions";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AccessController__ZeroAccessManager";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AccessController__ZeroIPAccountRegistry";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AccessController__ZeroModuleRegistry";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedInvalidAuthority";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "delay";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "AccessManagedRequiredDelay";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedUnauthorized";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "EnforcedPause";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ExpectedPause";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedInnerCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "AuthorityUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "Paused";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "ipAccountOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "ipAccount";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "signer";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "func";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
        readonly indexed: false;
    }, {
        readonly name: "permission";
        readonly internalType: "uint8";
        readonly type: "uint8";
        readonly indexed: false;
    }];
    readonly name: "PermissionSet";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "Unpaused";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "IP_ACCOUNT_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IIPAccountRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "MODULE_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IModuleRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "__ProtocolPausable_init";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "authority";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipAccount";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "signer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "func";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "checkPermission";
    readonly outputs: readonly [];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipAccount";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "signer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "func";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "getPermission";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "isConsumingScheduledOp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "pause";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "paused";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipAccount";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "signer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "permission";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }];
    readonly name: "setAllPermissions";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newAuthority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setAuthority";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "permissions";
        readonly internalType: "struct AccessPermission.Permission[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "ipAccount";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "func";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }, {
            readonly name: "permission";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }];
    }];
    readonly name: "setBatchPermissions";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipAccount";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "signer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "func";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }, {
        readonly name: "permission";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }];
    readonly name: "setPermission";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "unpause";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}];
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0xF9936a224b3Deb6f9A4645ccAfa66f7ECe83CF0A)
 */
export declare const accessControllerAddress: {
    readonly 11155111: "0xF9936a224b3Deb6f9A4645ccAfa66f7ECe83CF0A";
};
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0xF9936a224b3Deb6f9A4645ccAfa66f7ECe83CF0A)
 */
export declare const accessControllerConfig: {
    readonly address: {
        readonly 11155111: "0xF9936a224b3Deb6f9A4645ccAfa66f7ECe83CF0A";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "ipAccountRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "moduleRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessController__BothCallerAndRecipientAreNotRegisteredModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AccessController__CallerIsNotIPAccountOrOwner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipAccount";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessController__IPAccountIsNotValid";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AccessController__IPAccountIsZeroAddress";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipAccount";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "func";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "AccessController__PermissionDenied";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AccessController__PermissionIsNotValid";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AccessController__SignerIsZeroAddress";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AccessController__ToAndFuncAreZeroAddressShouldCallSetAllPermissions";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AccessController__ZeroAccessManager";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AccessController__ZeroIPAccountRegistry";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AccessController__ZeroModuleRegistry";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedInvalidAuthority";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "delay";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "AccessManagedRequiredDelay";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedUnauthorized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "EnforcedPause";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ExpectedPause";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "AuthorityUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "Paused";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "ipAccountOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "ipAccount";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "func";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
            readonly indexed: false;
        }, {
            readonly name: "permission";
            readonly internalType: "uint8";
            readonly type: "uint8";
            readonly indexed: false;
        }];
        readonly name: "PermissionSet";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "Unpaused";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "IP_ACCOUNT_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IIPAccountRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "MODULE_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IModuleRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "__ProtocolPausable_init";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "authority";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipAccount";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "func";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "checkPermission";
        readonly outputs: readonly [];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipAccount";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "func";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "getPermission";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "isConsumingScheduledOp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "pause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipAccount";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "permission";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }];
        readonly name: "setAllPermissions";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newAuthority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setAuthority";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "permissions";
            readonly internalType: "struct AccessPermission.Permission[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "ipAccount";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "signer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "to";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "func";
                readonly internalType: "bytes4";
                readonly type: "bytes4";
            }, {
                readonly name: "permission";
                readonly internalType: "uint8";
                readonly type: "uint8";
            }];
        }];
        readonly name: "setBatchPermissions";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipAccount";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "func";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }, {
            readonly name: "permission";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }];
        readonly name: "setPermission";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "unpause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }];
};
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0xDa498A3f7c8a88cb72201138C366bE3778dB9575)
 */
export declare const coreMetadataModuleAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "accessController";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipAccountRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipAccount";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessControlled__NotIpAccount";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AccessControlled__ZeroAddress";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CoreMetadataModule__MetadataAlreadyFrozen";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "MetadataFrozen";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "metadataURI";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "metadataHash";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: false;
    }];
    readonly name: "MetadataURISet";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "nftTokenURI";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "nftMetadataHash";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: false;
    }];
    readonly name: "NFTTokenURISet";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ACCESS_CONTROLLER";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IAccessController";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "IP_ACCOUNT_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IIPAccountRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "freezeMetadata";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isMetadataFrozen";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "name";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "metadataURI";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "metadataHash";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "nftMetadataHash";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "setAll";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "metadataURI";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "metadataHash";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "setMetadataURI";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "nftMetadataHash";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "updateNftTokenURI";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}];
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0xDa498A3f7c8a88cb72201138C366bE3778dB9575)
 */
export declare const coreMetadataModuleAddress: {
    readonly 11155111: "0xDa498A3f7c8a88cb72201138C366bE3778dB9575";
};
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0xDa498A3f7c8a88cb72201138C366bE3778dB9575)
 */
export declare const coreMetadataModuleConfig: {
    readonly address: {
        readonly 11155111: "0xDa498A3f7c8a88cb72201138C366bE3778dB9575";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "accessController";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipAccountRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipAccount";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessControlled__NotIpAccount";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AccessControlled__ZeroAddress";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "CoreMetadataModule__MetadataAlreadyFrozen";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "MetadataFrozen";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "metadataURI";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "metadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
            readonly indexed: false;
        }];
        readonly name: "MetadataURISet";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "nftTokenURI";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
            readonly indexed: false;
        }];
        readonly name: "NFTTokenURISet";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ACCESS_CONTROLLER";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IAccessController";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "IP_ACCOUNT_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IIPAccountRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "freezeMetadata";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isMetadataFrozen";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "metadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "metadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "setAll";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "metadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "metadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "setMetadataURI";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "interfaceId";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "updateNftTokenURI";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }];
};
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0xEB7B1dd43B81A7be1fA427515a2b173B454A9832)
 */
export declare const disputeModuleAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "accessController";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipAssetRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipAccount";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessControlled__NotIpAccount";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AccessControlled__ZeroAddress";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedInvalidAuthority";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "delay";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "AccessManagedRequiredDelay";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedUnauthorized";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__NotAbleToResolve";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__NotDerivative";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__NotDisputeInitiator";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__NotInDisputeState";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__NotRegisteredIpId";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__NotWhitelistedArbitrationPolicy";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__NotWhitelistedArbitrationRelayer";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__NotWhitelistedDisputeTag";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__ParentDisputeNotResolved";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__ParentIpIdMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__ParentNotTagged";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__ZeroAccessController";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__ZeroAccessManager";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__ZeroArbitrationPolicy";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__ZeroArbitrationRelayer";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__ZeroDisputeTag";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__ZeroIPAssetRegistry";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__ZeroLicenseRegistry";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DisputeModule__ZeroLinkToDisputeEvidence";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "EnforcedPause";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ExpectedPause";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedInnerCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ReentrancyGuardReentrantCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "str";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "StringTooLong";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "arbitrationPolicy";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "ArbitrationPolicySet";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "arbitrationPolicy";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "allowed";
        readonly internalType: "bool";
        readonly type: "bool";
        readonly indexed: false;
    }];
    readonly name: "ArbitrationPolicyWhitelistUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "arbitrationPolicy";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "arbitrationRelayer";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "allowed";
        readonly internalType: "bool";
        readonly type: "bool";
        readonly indexed: false;
    }];
    readonly name: "ArbitrationRelayerWhitelistUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "AuthorityUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "arbitrationPolicy";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "DefaultArbitrationPolicyUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "parentIpId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "derivativeIpId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "parentDisputeId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "tag";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: false;
    }];
    readonly name: "DerivativeTaggedOnParentInfringement";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "disputeId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
        readonly indexed: false;
    }];
    readonly name: "DisputeCancelled";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "disputeId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "decision";
        readonly internalType: "bool";
        readonly type: "bool";
        readonly indexed: false;
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
        readonly indexed: false;
    }];
    readonly name: "DisputeJudgementSet";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "disputeId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "targetIpId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "disputeInitiator";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "arbitrationPolicy";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "linkToDisputeEvidence";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: false;
    }, {
        readonly name: "targetTag";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: false;
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
        readonly indexed: false;
    }];
    readonly name: "DisputeRaised";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "disputeId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "DisputeResolved";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "Paused";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "tag";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: false;
    }, {
        readonly name: "allowed";
        readonly internalType: "bool";
        readonly type: "bool";
        readonly indexed: false;
    }];
    readonly name: "TagWhitelistUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "Unpaused";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ACCESS_CONTROLLER";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IAccessController";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "IN_DISPUTE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "IP_ACCOUNT_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IIPAccountRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "IP_ASSET_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IIPAssetRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "LICENSE_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ILicenseRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "__ProtocolPausable_init";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "arbitrationPolicies";
    readonly outputs: readonly [{
        readonly name: "policy";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "authority";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "baseArbitrationPolicy";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "disputeId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "cancelDispute";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "disputeCounter";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "disputeId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "disputes";
    readonly outputs: readonly [{
        readonly name: "targetIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "disputeInitiator";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "arbitrationPolicy";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "linkToDisputeEvidence";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "targetTag";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "currentTag";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "parentDisputeId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "isConsumingScheduledOp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isIpTagged";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "arbitrationPolicy";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isWhitelistedArbitrationPolicy";
    readonly outputs: readonly [{
        readonly name: "allowed";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "arbitrationPolicy";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "arbitrationRelayer";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isWhitelistedArbitrationRelayer";
    readonly outputs: readonly [{
        readonly name: "allowed";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tag";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "isWhitelistedDisputeTag";
    readonly outputs: readonly [{
        readonly name: "allowed";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "data";
        readonly internalType: "bytes[]";
        readonly type: "bytes[]";
    }];
    readonly name: "multicall";
    readonly outputs: readonly [{
        readonly name: "results";
        readonly internalType: "bytes[]";
        readonly type: "bytes[]";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "name";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "pause";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "paused";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "targetIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "linkToDisputeEvidence";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "targetTag";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "raiseDispute";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "disputeId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "resolveDispute";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "arbitrationPolicy";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setArbitrationPolicy";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newAuthority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setAuthority";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "arbitrationPolicy";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setBaseArbitrationPolicy";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "disputeId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "decision";
        readonly internalType: "bool";
        readonly type: "bool";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "setDisputeJudgement";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "parentIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "derivativeIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "parentDisputeId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "tagDerivativeIfParentInfringed";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "unpause";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "arbitrationPolicy";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "allowed";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly name: "whitelistArbitrationPolicy";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "arbitrationPolicy";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "arbPolicyRelayer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "allowed";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly name: "whitelistArbitrationRelayer";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tag";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "allowed";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly name: "whitelistDisputeTag";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}];
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0xEB7B1dd43B81A7be1fA427515a2b173B454A9832)
 */
export declare const disputeModuleAddress: {
    readonly 11155111: "0xEB7B1dd43B81A7be1fA427515a2b173B454A9832";
};
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0xEB7B1dd43B81A7be1fA427515a2b173B454A9832)
 */
export declare const disputeModuleConfig: {
    readonly address: {
        readonly 11155111: "0xEB7B1dd43B81A7be1fA427515a2b173B454A9832";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "accessController";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipAssetRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipAccount";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessControlled__NotIpAccount";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AccessControlled__ZeroAddress";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedInvalidAuthority";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "delay";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "AccessManagedRequiredDelay";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedUnauthorized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__NotAbleToResolve";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__NotDerivative";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__NotDisputeInitiator";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__NotInDisputeState";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__NotRegisteredIpId";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__NotWhitelistedArbitrationPolicy";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__NotWhitelistedArbitrationRelayer";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__NotWhitelistedDisputeTag";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__ParentDisputeNotResolved";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__ParentIpIdMismatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__ParentNotTagged";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__ZeroAccessController";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__ZeroAccessManager";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__ZeroArbitrationPolicy";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__ZeroArbitrationRelayer";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__ZeroDisputeTag";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__ZeroIPAssetRegistry";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__ZeroLicenseRegistry";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DisputeModule__ZeroLinkToDisputeEvidence";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "EnforcedPause";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ExpectedPause";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ReentrancyGuardReentrantCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "str";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "StringTooLong";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "arbitrationPolicy";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "ArbitrationPolicySet";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "arbitrationPolicy";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "allowed";
            readonly internalType: "bool";
            readonly type: "bool";
            readonly indexed: false;
        }];
        readonly name: "ArbitrationPolicyWhitelistUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "arbitrationPolicy";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "arbitrationRelayer";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "allowed";
            readonly internalType: "bool";
            readonly type: "bool";
            readonly indexed: false;
        }];
        readonly name: "ArbitrationRelayerWhitelistUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "AuthorityUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "arbitrationPolicy";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "DefaultArbitrationPolicyUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "parentIpId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "derivativeIpId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "parentDisputeId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "tag";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
            readonly indexed: false;
        }];
        readonly name: "DerivativeTaggedOnParentInfringement";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "disputeId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
            readonly indexed: false;
        }];
        readonly name: "DisputeCancelled";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "disputeId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "decision";
            readonly internalType: "bool";
            readonly type: "bool";
            readonly indexed: false;
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
            readonly indexed: false;
        }];
        readonly name: "DisputeJudgementSet";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "disputeId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "targetIpId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "disputeInitiator";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "arbitrationPolicy";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "linkToDisputeEvidence";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
            readonly indexed: false;
        }, {
            readonly name: "targetTag";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
            readonly indexed: false;
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
            readonly indexed: false;
        }];
        readonly name: "DisputeRaised";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "disputeId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "DisputeResolved";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "Paused";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "tag";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
            readonly indexed: false;
        }, {
            readonly name: "allowed";
            readonly internalType: "bool";
            readonly type: "bool";
            readonly indexed: false;
        }];
        readonly name: "TagWhitelistUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "Unpaused";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ACCESS_CONTROLLER";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IAccessController";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "IN_DISPUTE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "IP_ACCOUNT_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IIPAccountRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "IP_ASSET_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IIPAssetRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "LICENSE_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ILicenseRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "__ProtocolPausable_init";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "arbitrationPolicies";
        readonly outputs: readonly [{
            readonly name: "policy";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "authority";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "baseArbitrationPolicy";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "disputeId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "cancelDispute";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "disputeCounter";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "disputeId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "disputes";
        readonly outputs: readonly [{
            readonly name: "targetIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "disputeInitiator";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "arbitrationPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "linkToDisputeEvidence";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "targetTag";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "currentTag";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "parentDisputeId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "isConsumingScheduledOp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isIpTagged";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "arbitrationPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isWhitelistedArbitrationPolicy";
        readonly outputs: readonly [{
            readonly name: "allowed";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "arbitrationPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "arbitrationRelayer";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isWhitelistedArbitrationRelayer";
        readonly outputs: readonly [{
            readonly name: "allowed";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tag";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "isWhitelistedDisputeTag";
        readonly outputs: readonly [{
            readonly name: "allowed";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "data";
            readonly internalType: "bytes[]";
            readonly type: "bytes[]";
        }];
        readonly name: "multicall";
        readonly outputs: readonly [{
            readonly name: "results";
            readonly internalType: "bytes[]";
            readonly type: "bytes[]";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "pause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "targetIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "linkToDisputeEvidence";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "targetTag";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "raiseDispute";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "disputeId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "resolveDispute";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "arbitrationPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setArbitrationPolicy";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newAuthority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setAuthority";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "arbitrationPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setBaseArbitrationPolicy";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "disputeId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "decision";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "setDisputeJudgement";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "interfaceId";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "parentIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "derivativeIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "parentDisputeId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "tagDerivativeIfParentInfringed";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "unpause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "arbitrationPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "allowed";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly name: "whitelistArbitrationPolicy";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "arbitrationPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "arbPolicyRelayer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "allowed";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly name: "whitelistArbitrationRelayer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tag";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "allowed";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly name: "whitelistDisputeTag";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }];
};
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x36a5f0D61f6Bab3C6Dde211E5a6762Cb18a8060d)
 */
export declare const ipAccountImplAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "accessController";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipAssetRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "moduleRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "module";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "IPAccountStorage__NotRegisteredModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IPAccount__ExpiredSignature";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IPAccount__InvalidCalldata";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IPAccount__InvalidSignature";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IPAccount__InvalidSigner";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IPAccount__ZeroAccessController";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
        readonly indexed: false;
    }, {
        readonly name: "nonce";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "Executed";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
        readonly indexed: false;
    }, {
        readonly name: "nonce";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "deadline";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "signer";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
        readonly indexed: false;
    }];
    readonly name: "ExecutedWithSig";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ACCESS_CONTROLLER";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "IP_ASSET_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "LICENSE_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "MODULE_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "bytes32Data";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "bytesData";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "execute";
    readonly outputs: readonly [{
        readonly name: "result";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "signer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "deadline";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "executeWithSig";
    readonly outputs: readonly [{
        readonly name: "result";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "key";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "getBytes";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "namespace";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "key";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "getBytes";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "namespace";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "key";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "getBytes32";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "key";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "getBytes32";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "signer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "isValidSigner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onERC1155BatchReceived";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onERC1155Received";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onERC721Received";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "owner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "key";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "value";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "setBytes";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "key";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "value";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "setBytes32";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "state";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "token";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "receive";
    readonly stateMutability: "payable";
}];
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x36a5f0D61f6Bab3C6Dde211E5a6762Cb18a8060d)
 */
export declare const ipAccountImplAddress: {
    readonly 11155111: "0x36a5f0D61f6Bab3C6Dde211E5a6762Cb18a8060d";
};
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x36a5f0D61f6Bab3C6Dde211E5a6762Cb18a8060d)
 */
export declare const ipAccountImplConfig: {
    readonly address: {
        readonly 11155111: "0x36a5f0D61f6Bab3C6Dde211E5a6762Cb18a8060d";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "accessController";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipAssetRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "moduleRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "module";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "IPAccountStorage__NotRegisteredModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IPAccount__ExpiredSignature";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IPAccount__InvalidCalldata";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IPAccount__InvalidSignature";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IPAccount__InvalidSigner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IPAccount__ZeroAccessController";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
            readonly indexed: false;
        }, {
            readonly name: "nonce";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "Executed";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
            readonly indexed: false;
        }, {
            readonly name: "nonce";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
            readonly indexed: false;
        }];
        readonly name: "ExecutedWithSig";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ACCESS_CONTROLLER";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "IP_ASSET_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "LICENSE_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "MODULE_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "bytes32Data";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "bytesData";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "execute";
        readonly outputs: readonly [{
            readonly name: "result";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "executeWithSig";
        readonly outputs: readonly [{
            readonly name: "result";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "key";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "getBytes";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "namespace";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "key";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "getBytes";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "namespace";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "key";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "getBytes32";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "key";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "getBytes32";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "isValidSigner";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "onERC1155BatchReceived";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "onERC1155Received";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "onERC721Received";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "key";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "value";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "setBytes";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "key";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "value";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "setBytes32";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "state";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "interfaceId";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "token";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "receive";
        readonly stateMutability: "payable";
    }];
};
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0xd43fE0d865cb5C26b1351d3eAf2E3064BE3276F6)
 */
export declare const ipAssetRegistryAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "erc6551Registry";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipAccountImpl";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedInvalidAuthority";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "delay";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "AccessManagedRequiredDelay";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedUnauthorized";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "EnforcedPause";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ExpectedPause";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedInnerCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IPAccountRegistry_ZeroIpAccountImpl";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IPAssetRegistry__AlreadyRegistered";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "contractAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "IPAssetRegistry__InvalidToken";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "contractAddress";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "IPAssetRegistry__UnsupportedIERC721";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "contractAddress";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "IPAssetRegistry__UnsupportedIERC721Metadata";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IPAssetRegistry__ZeroAccessManager";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "length";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "StringsInsufficientHexLength";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "AuthorityUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "chainId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "tokenContract";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "IPAccountRegistered";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "chainId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "tokenContract";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "uri";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "registrationDate";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "IPRegistered";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "Paused";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "Unpaused";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ERC6551_PUBLIC_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "IP_ACCOUNT_IMPL";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "IP_ACCOUNT_SALT";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "__ProtocolPausable_init";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "authority";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getIPAccountImpl";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "chainId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "tokenContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ipAccount";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "chainId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "tokenContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ipId";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "isConsumingScheduledOp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "id";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isRegistered";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "pause";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "paused";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "chainid";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "tokenContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "register";
    readonly outputs: readonly [{
        readonly name: "id";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "chainId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "tokenContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "registerIpAccount";
    readonly outputs: readonly [{
        readonly name: "ipAccountAddress";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newAuthority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setAuthority";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "totalSupply";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "unpause";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}];
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0xd43fE0d865cb5C26b1351d3eAf2E3064BE3276F6)
 */
export declare const ipAssetRegistryAddress: {
    readonly 11155111: "0xd43fE0d865cb5C26b1351d3eAf2E3064BE3276F6";
};
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0xd43fE0d865cb5C26b1351d3eAf2E3064BE3276F6)
 */
export declare const ipAssetRegistryConfig: {
    readonly address: {
        readonly 11155111: "0xd43fE0d865cb5C26b1351d3eAf2E3064BE3276F6";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "erc6551Registry";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipAccountImpl";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedInvalidAuthority";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "delay";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "AccessManagedRequiredDelay";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedUnauthorized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "EnforcedPause";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ExpectedPause";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IPAccountRegistry_ZeroIpAccountImpl";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IPAssetRegistry__AlreadyRegistered";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "IPAssetRegistry__InvalidToken";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "IPAssetRegistry__UnsupportedIERC721";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "IPAssetRegistry__UnsupportedIERC721Metadata";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IPAssetRegistry__ZeroAccessManager";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "length";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "StringsInsufficientHexLength";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "AuthorityUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "chainId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "tokenContract";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "IPAccountRegistered";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "chainId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "tokenContract";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "uri";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "registrationDate";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "IPRegistered";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "Paused";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "Unpaused";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ERC6551_PUBLIC_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "IP_ACCOUNT_IMPL";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "IP_ACCOUNT_SALT";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "__ProtocolPausable_init";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "authority";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getIPAccountImpl";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "chainId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "tokenContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ipAccount";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "chainId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "tokenContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ipId";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "isConsumingScheduledOp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "id";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isRegistered";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "pause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "chainid";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "tokenContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "register";
        readonly outputs: readonly [{
            readonly name: "id";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "chainId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "tokenContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "registerIpAccount";
        readonly outputs: readonly [{
            readonly name: "ipAccountAddress";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newAuthority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setAuthority";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "totalSupply";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "unpause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }];
};
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0xD6c2AfB61085f1359d47159f2271BDD0EeBf19C2)
 */
export declare const ipRoyaltyVaultImplAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "royaltyPolicyLAP";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "disputeModule";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IpRoyaltyVault__AlreadyClaimed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IpRoyaltyVault__ClaimerNotAnAncestor";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IpRoyaltyVault__EnforcedPause";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IpRoyaltyVault__IpTagged";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IpRoyaltyVault__NotRoyaltyPolicyLAP";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IpRoyaltyVault__SnapshotIntervalTooShort";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IpRoyaltyVault__ZeroDisputeModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IpRoyaltyVault__ZeroRoyaltyPolicyLAP";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "Approval";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint8";
        readonly type: "uint8";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "claimer";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "RevenueTokenClaimed";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "ancestorIpId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "royaltyTokensCollected";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "RoyaltyTokensCollected";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "id";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "Snapshot";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "snapshotId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "snapshotTimestamp";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "unclaimedTokens";
        readonly internalType: "uint32";
        readonly type: "uint32";
        readonly indexed: false;
    }];
    readonly name: "SnapshotCompleted";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "Transfer";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "DISPUTE_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IDisputeModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ROYALTY_POLICY_LAP";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IRoyaltyPolicyLAP";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "addIpRoyaltyVaultTokens";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "allowance";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ancestorsVaultAmount";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "approve";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "balanceOf";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "snapshotId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "balanceOfAt";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "snapshotIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "claimRevenueBySnapshotBatch";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "snapshotId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "tokenList";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }];
    readonly name: "claimRevenueByTokenBatch";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "claimVaultAmount";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "snapshotId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "claimableAtSnapshot";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "snapshotId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "claimableRevenue";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ancestorIpId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "collectRoyaltyTokens";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "decimals";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "subtractedValue";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "decreaseAllowance";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "addedValue";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "increaseAllowance";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "symbol";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "supply";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }, {
        readonly name: "unclaimedTokens";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }, {
        readonly name: "ipIdAddress";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ipId";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "snapshotId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "claimer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isClaimedAtSnapshot";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ancestorIpId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isCollectedByAncestor";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "lastSnapshotTimestamp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "name";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "snapshot";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "symbol";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "tokens";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "totalSupply";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "snapshotId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "totalSupplyAt";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "transfer";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "transferFrom";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "snapshotId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "unclaimedAtSnapshot";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "unclaimedRoyaltyTokens";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly stateMutability: "view";
}];
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0xD6c2AfB61085f1359d47159f2271BDD0EeBf19C2)
 */
export declare const ipRoyaltyVaultImplAddress: {
    readonly 11155111: "0xD6c2AfB61085f1359d47159f2271BDD0EeBf19C2";
};
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0xD6c2AfB61085f1359d47159f2271BDD0EeBf19C2)
 */
export declare const ipRoyaltyVaultImplConfig: {
    readonly address: {
        readonly 11155111: "0xD6c2AfB61085f1359d47159f2271BDD0EeBf19C2";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "royaltyPolicyLAP";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "disputeModule";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IpRoyaltyVault__AlreadyClaimed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IpRoyaltyVault__ClaimerNotAnAncestor";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IpRoyaltyVault__EnforcedPause";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IpRoyaltyVault__IpTagged";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IpRoyaltyVault__NotRoyaltyPolicyLAP";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IpRoyaltyVault__SnapshotIntervalTooShort";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IpRoyaltyVault__ZeroDisputeModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IpRoyaltyVault__ZeroRoyaltyPolicyLAP";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "spender";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "Approval";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint8";
            readonly type: "uint8";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "claimer";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "RevenueTokenClaimed";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "ancestorIpId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "royaltyTokensCollected";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "RoyaltyTokensCollected";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "id";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "Snapshot";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "snapshotId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "snapshotTimestamp";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "unclaimedTokens";
            readonly internalType: "uint32";
            readonly type: "uint32";
            readonly indexed: false;
        }];
        readonly name: "SnapshotCompleted";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "Transfer";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "DISPUTE_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IDisputeModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ROYALTY_POLICY_LAP";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IRoyaltyPolicyLAP";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "addIpRoyaltyVaultTokens";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "spender";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "allowance";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ancestorsVaultAmount";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "spender";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "approve";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "balanceOf";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "snapshotId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "balanceOfAt";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "snapshotIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "claimRevenueBySnapshotBatch";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "snapshotId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "tokenList";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }];
        readonly name: "claimRevenueByTokenBatch";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "claimVaultAmount";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "snapshotId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "claimableAtSnapshot";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "snapshotId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "claimableRevenue";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ancestorIpId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "collectRoyaltyTokens";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "decimals";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "spender";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "subtractedValue";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "decreaseAllowance";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "spender";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "addedValue";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "increaseAllowance";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "symbol";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "supply";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "unclaimedTokens";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "ipIdAddress";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ipId";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "snapshotId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "claimer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isClaimedAtSnapshot";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ancestorIpId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isCollectedByAncestor";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "lastSnapshotTimestamp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "snapshot";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "symbol";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "tokens";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "totalSupply";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "snapshotId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "totalSupplyAt";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "transfer";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "transferFrom";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "snapshotId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "unclaimedAtSnapshot";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "unclaimedRoyaltyTokens";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
    }];
};
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4f4b1bf7135C7ff1462826CCA81B048Ed19562ed)
 */
export declare const licenseRegistryAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "licensingModule";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "disputeModule";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedInvalidAuthority";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "delay";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "AccessManagedRequiredDelay";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedUnauthorized";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedInnerCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicenseRegistry__CallerNotLicensingModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicenseRegistry__DerivativeAlreadyRegistered";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicenseRegistry__DerivativeIpAlreadyHasLicense";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicenseRegistry__DerivativeIsParent";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "LicenseRegistry__DuplicateLicense";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "index";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "length";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "LicenseRegistry__IndexOutOfBounds";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicenseRegistry__IpExpired";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "LicenseRegistry__LicenseTermsAlreadyAttached";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "LicenseRegistry__LicenseTermsNotExists";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "LicenseRegistry__LicensorIpHasNoLicenseTerms";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicenseRegistry__NoParentIp";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicenseRegistry__NotLicenseTemplate";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicenseRegistry__ParentIpExpired";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "LicenseRegistry__ParentIpHasNoLicenseTerms";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicenseRegistry__ParentIpTagged";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicenseRegistry__ParentIpUnmatchedLicenseTemplate";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "newLicenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicenseRegistry__UnmatchedLicenseTemplate";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicenseRegistry__UnregisteredLicenseTemplate";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicenseRegistry__ZeroAccessManager";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicenseRegistry__ZeroDisputeModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicenseRegistry__ZeroLicensingModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicensingModule__DerivativesCannotAddLicenseTerms";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "LicensingModule__LicenseTermsNotFound";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "AuthorityUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "expireTime";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "ExpirationTimeSet";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "LicenseTemplateRegistered";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "licensingConfig";
        readonly internalType: "struct Licensing.LicensingConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "isSet";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "mintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licensingHook";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "hookData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly indexed: false;
    }];
    readonly name: "LicensingConfigSetForIP";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }];
    readonly name: "LicensingConfigSetForLicense";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "DISPUTE_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IDisputeModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "EXPIRATION_TIME";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "LICENSING_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ILicensingModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "attachLicenseTermsToIp";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "authority";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "exists";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "index";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getAttachedLicenseTerms";
    readonly outputs: readonly [{
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getAttachedLicenseTermsCount";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getDefaultLicenseTerms";
    readonly outputs: readonly [{
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "parentIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "index";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getDerivativeIp";
    readonly outputs: readonly [{
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "parentIpId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getDerivativeIpCount";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getExpireTime";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getLicensingConfig";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct Licensing.LicensingConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "isSet";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "mintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licensingHook";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "hookData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "index";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getParentIp";
    readonly outputs: readonly [{
        readonly name: "parentIpId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getParentIpCount";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "parentIpId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "hasDerivativeIps";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "hasIpAttachedLicenseTerms";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "isConsumingScheduledOp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isDerivativeIp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isExpiredNow";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "parentIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isParentIp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isRegisteredLicenseTemplate";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "parentIpIds";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly name: "registerDerivativeIp";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "registerLicenseTemplate";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newAuthority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setAuthority";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newLicenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "newLicenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "setDefaultLicenseTerms";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "expireTime";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "setExpireTime";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licensingConfig";
        readonly internalType: "struct Licensing.LicensingConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "isSet";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "mintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licensingHook";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "hookData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly name: "setLicensingConfigForIp";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "licensingConfig";
        readonly internalType: "struct Licensing.LicensingConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "isSet";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "mintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licensingHook";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "hookData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly name: "setLicensingConfigForLicense";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "licensorIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "isMintedByIpOwner";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly name: "verifyMintLicenseToken";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct Licensing.LicensingConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "isSet";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "mintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licensingHook";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "hookData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly stateMutability: "view";
}];
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4f4b1bf7135C7ff1462826CCA81B048Ed19562ed)
 */
export declare const licenseRegistryAddress: {
    readonly 11155111: "0x4f4b1bf7135C7ff1462826CCA81B048Ed19562ed";
};
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x4f4b1bf7135C7ff1462826CCA81B048Ed19562ed)
 */
export declare const licenseRegistryConfig: {
    readonly address: {
        readonly 11155111: "0x4f4b1bf7135C7ff1462826CCA81B048Ed19562ed";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "licensingModule";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "disputeModule";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedInvalidAuthority";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "delay";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "AccessManagedRequiredDelay";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedUnauthorized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicenseRegistry__CallerNotLicensingModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicenseRegistry__DerivativeAlreadyRegistered";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicenseRegistry__DerivativeIpAlreadyHasLicense";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicenseRegistry__DerivativeIsParent";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "LicenseRegistry__DuplicateLicense";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "index";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "length";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "LicenseRegistry__IndexOutOfBounds";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicenseRegistry__IpExpired";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "LicenseRegistry__LicenseTermsAlreadyAttached";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "LicenseRegistry__LicenseTermsNotExists";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "LicenseRegistry__LicensorIpHasNoLicenseTerms";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicenseRegistry__NoParentIp";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicenseRegistry__NotLicenseTemplate";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicenseRegistry__ParentIpExpired";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "LicenseRegistry__ParentIpHasNoLicenseTerms";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicenseRegistry__ParentIpTagged";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicenseRegistry__ParentIpUnmatchedLicenseTemplate";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "newLicenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicenseRegistry__UnmatchedLicenseTemplate";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicenseRegistry__UnregisteredLicenseTemplate";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicenseRegistry__ZeroAccessManager";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicenseRegistry__ZeroDisputeModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicenseRegistry__ZeroLicensingModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicensingModule__DerivativesCannotAddLicenseTerms";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "LicensingModule__LicenseTermsNotFound";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "AuthorityUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "expireTime";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "ExpirationTimeSet";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "LicenseTemplateRegistered";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "licensingConfig";
            readonly internalType: "struct Licensing.LicensingConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "isSet";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "mintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "licensingHook";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "hookData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
            readonly indexed: false;
        }];
        readonly name: "LicensingConfigSetForIP";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }];
        readonly name: "LicensingConfigSetForLicense";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "DISPUTE_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IDisputeModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "EXPIRATION_TIME";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "LICENSING_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ILicensingModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "attachLicenseTermsToIp";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "authority";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "exists";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "index";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getAttachedLicenseTerms";
        readonly outputs: readonly [{
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getAttachedLicenseTermsCount";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getDefaultLicenseTerms";
        readonly outputs: readonly [{
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "parentIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "index";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getDerivativeIp";
        readonly outputs: readonly [{
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "parentIpId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getDerivativeIpCount";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getExpireTime";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getLicensingConfig";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct Licensing.LicensingConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "isSet";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "mintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "licensingHook";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "hookData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "index";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getParentIp";
        readonly outputs: readonly [{
            readonly name: "parentIpId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getParentIpCount";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "parentIpId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "hasDerivativeIps";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "hasIpAttachedLicenseTerms";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "isConsumingScheduledOp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isDerivativeIp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isExpiredNow";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "parentIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isParentIp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isRegisteredLicenseTemplate";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "parentIpIds";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly name: "registerDerivativeIp";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "registerLicenseTemplate";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newAuthority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setAuthority";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newLicenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "newLicenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "setDefaultLicenseTerms";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "expireTime";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "setExpireTime";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licensingConfig";
            readonly internalType: "struct Licensing.LicensingConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "isSet";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "mintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "licensingHook";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "hookData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }];
        readonly name: "setLicensingConfigForIp";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licensingConfig";
            readonly internalType: "struct Licensing.LicensingConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "isSet";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "mintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "licensingHook";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "hookData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }];
        readonly name: "setLicensingConfigForLicense";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "licensorIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "isMintedByIpOwner";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly name: "verifyMintLicenseToken";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct Licensing.LicensingConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "isSet";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "mintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "licensingHook";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "hookData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }];
        readonly stateMutability: "view";
    }];
};
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x1333c78A821c9a576209B01a16dDCEF881cAb6f2)
 */
export declare const licenseTokenAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "licensingModule";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "disputeModule";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedInvalidAuthority";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "delay";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "AccessManagedRequiredDelay";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedUnauthorized";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC721EnumerableForbiddenBatchMint";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC721IncorrectOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ERC721InsufficientApproval";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "approver";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC721InvalidApprover";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC721InvalidOperator";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC721InvalidOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "receiver";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC721InvalidReceiver";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC721InvalidSender";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ERC721NonexistentToken";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "index";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ERC721OutOfBoundsIndex";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedInnerCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "anotherLicenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicenseToken__AllLicenseTokensMustFromSameLicenseTemplate";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicenseToken__CallerNotLicensingModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "iPowner";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicenseToken__NotLicenseTokenOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicenseToken__NotTransferable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "LicenseToken__RevokedLicense";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicenseToken__ZeroAccessManager";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "length";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "StringsInsufficientHexLength";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "approved";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }];
    readonly name: "Approval";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "approved";
        readonly internalType: "bool";
        readonly type: "bool";
        readonly indexed: false;
    }];
    readonly name: "ApprovalForAll";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "AuthorityUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "_fromTokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "_toTokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "BatchMetadataUpdate";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "minter";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "receiver";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }];
    readonly name: "LicenseTokenMinted";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }];
    readonly name: "Transfer";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "DISPUTE_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IDisputeModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "LICENSING_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ILicensingModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "approve";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "authority";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "balanceOf";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "holder";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly name: "burnLicenseTokens";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getApproved";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getLicenseTemplate";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getLicenseTermsId";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getLicenseTokenMetadata";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct ILicenseToken.LicenseTokenMetadata";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "licensorIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "transferable";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getLicensorIpId";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "imageUrl";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isApprovedForAll";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "isConsumingScheduledOp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "isLicenseTokenRevoked";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "licensorIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "minter";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "receiver";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "mintLicenseTokens";
    readonly outputs: readonly [{
        readonly name: "startLicenseTokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "name";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ownerOf";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "safeTransferFrom";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "safeTransferFrom";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "approved";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly name: "setApprovalForAll";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newAuthority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setAuthority";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "url";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "setLicensingImageUrl";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "symbol";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "index";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "tokenByIndex";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "index";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "tokenOfOwnerByIndex";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "id";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "tokenURI";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "totalMintedTokens";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "totalSupply";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "transferFrom";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "childIpOwner";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly name: "validateLicenseTokensForDerivative";
    readonly outputs: readonly [{
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licensorIpIds";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "licenseTermsIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "view";
}];
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x1333c78A821c9a576209B01a16dDCEF881cAb6f2)
 */
export declare const licenseTokenAddress: {
    readonly 11155111: "0x1333c78A821c9a576209B01a16dDCEF881cAb6f2";
};
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x1333c78A821c9a576209B01a16dDCEF881cAb6f2)
 */
export declare const licenseTokenConfig: {
    readonly address: {
        readonly 11155111: "0x1333c78A821c9a576209B01a16dDCEF881cAb6f2";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "licensingModule";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "disputeModule";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedInvalidAuthority";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "delay";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "AccessManagedRequiredDelay";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedUnauthorized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC721EnumerableForbiddenBatchMint";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC721IncorrectOwner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ERC721InsufficientApproval";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "approver";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC721InvalidApprover";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC721InvalidOperator";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC721InvalidOwner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "receiver";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC721InvalidReceiver";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC721InvalidSender";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ERC721NonexistentToken";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "index";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ERC721OutOfBoundsIndex";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "anotherLicenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicenseToken__AllLicenseTokensMustFromSameLicenseTemplate";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicenseToken__CallerNotLicensingModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "iPowner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicenseToken__NotLicenseTokenOwner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicenseToken__NotTransferable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "LicenseToken__RevokedLicense";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicenseToken__ZeroAccessManager";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "length";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "StringsInsufficientHexLength";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "approved";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }];
        readonly name: "Approval";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "approved";
            readonly internalType: "bool";
            readonly type: "bool";
            readonly indexed: false;
        }];
        readonly name: "ApprovalForAll";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "AuthorityUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "_fromTokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "_toTokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "BatchMetadataUpdate";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "minter";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "receiver";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }];
        readonly name: "LicenseTokenMinted";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }];
        readonly name: "Transfer";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "DISPUTE_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IDisputeModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "LICENSING_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ILicensingModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "approve";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "authority";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "balanceOf";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "holder";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly name: "burnLicenseTokens";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getApproved";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getLicenseTemplate";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getLicenseTermsId";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getLicenseTokenMetadata";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct ILicenseToken.LicenseTokenMetadata";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "licensorIpId";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "licenseTemplate";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "licenseTermsId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "transferable";
                readonly internalType: "bool";
                readonly type: "bool";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getLicensorIpId";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "imageUrl";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isApprovedForAll";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "isConsumingScheduledOp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "isLicenseTokenRevoked";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "licensorIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "minter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "receiver";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "mintLicenseTokens";
        readonly outputs: readonly [{
            readonly name: "startLicenseTokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ownerOf";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "safeTransferFrom";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "safeTransferFrom";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "approved";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly name: "setApprovalForAll";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newAuthority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setAuthority";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "url";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "setLicensingImageUrl";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "interfaceId";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "symbol";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "index";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "tokenByIndex";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "index";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "tokenOfOwnerByIndex";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "id";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "tokenURI";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "totalMintedTokens";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "totalSupply";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "transferFrom";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "childIpOwner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly name: "validateLicenseTokensForDerivative";
        readonly outputs: readonly [{
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licensorIpIds";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "licenseTermsIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "view";
    }];
};
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0xe89b0EaA8a0949738efA80bB531a165FB3456CBe)
 */
export declare const licensingModuleAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "accessController";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipAccountRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "moduleRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "royaltyModule";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "disputeModule";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseToken";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipAccount";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessControlled__NotIpAccount";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AccessControlled__ZeroAddress";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedInvalidAuthority";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "delay";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "AccessManagedRequiredDelay";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedUnauthorized";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "EnforcedPause";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ExpectedPause";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedInnerCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicensingModule__DisputedIpId";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "royaltyPolicy";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "anotherRoyaltyPolicy";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicensingModule__IncompatibleRoyaltyPolicy";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "LicensingModule__InvalidLicenseTermsId";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "hook";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicensingModule__InvalidLicensingHook";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "licensorIpId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicensingModule__LicenseDenyMintLicenseToken";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "LicensingModule__LicenseNotCompatibleForDerivative";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipLength";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "licenseTermsLength";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "LicensingModule__LicenseTermsLengthMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTokenIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly name: "LicensingModule__LicenseTokenNotCompatibleForDerivative";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicensingModule__MintAmountZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicensingModule__NoLicenseToken";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicensingModule__NoParentIp";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicensingModule__ReceiverZeroAddress";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicensingModule__ZeroAccessManager";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicensingModule__ZeroDisputeModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicensingModule__ZeroLicenseRegistry";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicensingModule__ZeroLicenseToken";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicensingModule__ZeroModuleRegistry";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LicensingModule__ZeroRoyaltyModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ReentrancyGuardReentrantCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "AuthorityUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "licenseTokenIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
        readonly indexed: false;
    }, {
        readonly name: "parentIpIds";
        readonly internalType: "address[]";
        readonly type: "address[]";
        readonly indexed: false;
    }, {
        readonly name: "licenseTermsIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
        readonly indexed: false;
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "DerivativeRegistered";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "LicenseTermsAttached";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "licensorIpId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "receiver";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "startLicenseTokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "LicenseTokensMinted";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "Paused";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "Unpaused";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ACCESS_CONTROLLER";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IAccessController";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "DISPUTE_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IDisputeModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "IP_ACCOUNT_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IIPAccountRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "LICENSE_NFT";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ILicenseToken";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "LICENSE_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ILicenseRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "MODULE_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IModuleRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ROYALTY_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract RoyaltyModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "__ProtocolPausable_init";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "attachLicenseTerms";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "authority";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "isConsumingScheduledOp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "licensorIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "receiver";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "royaltyContext";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "mintLicenseTokens";
    readonly outputs: readonly [{
        readonly name: "startLicenseTokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "name";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "pause";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "paused";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "parentIpIds";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "licenseTermsIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "royaltyContext";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "registerDerivative";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTokenIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "royaltyContext";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "registerDerivativeWithLicenseTokens";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newAuthority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setAuthority";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "licensingConfig";
        readonly internalType: "struct Licensing.LicensingConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "isSet";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "mintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licensingHook";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "hookData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly name: "setLicensingConfig";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "unpause";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}];
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0xe89b0EaA8a0949738efA80bB531a165FB3456CBe)
 */
export declare const licensingModuleAddress: {
    readonly 11155111: "0xe89b0EaA8a0949738efA80bB531a165FB3456CBe";
};
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0xe89b0EaA8a0949738efA80bB531a165FB3456CBe)
 */
export declare const licensingModuleConfig: {
    readonly address: {
        readonly 11155111: "0xe89b0EaA8a0949738efA80bB531a165FB3456CBe";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "accessController";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipAccountRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "moduleRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "royaltyModule";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "disputeModule";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseToken";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipAccount";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessControlled__NotIpAccount";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AccessControlled__ZeroAddress";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedInvalidAuthority";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "delay";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "AccessManagedRequiredDelay";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedUnauthorized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "EnforcedPause";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ExpectedPause";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicensingModule__DisputedIpId";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "royaltyPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "anotherRoyaltyPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicensingModule__IncompatibleRoyaltyPolicy";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "LicensingModule__InvalidLicenseTermsId";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "hook";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicensingModule__InvalidLicensingHook";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licensorIpId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicensingModule__LicenseDenyMintLicenseToken";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "LicensingModule__LicenseNotCompatibleForDerivative";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipLength";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licenseTermsLength";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "LicensingModule__LicenseTermsLengthMismatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTokenIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly name: "LicensingModule__LicenseTokenNotCompatibleForDerivative";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicensingModule__MintAmountZero";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicensingModule__NoLicenseToken";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicensingModule__NoParentIp";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicensingModule__ReceiverZeroAddress";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicensingModule__ZeroAccessManager";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicensingModule__ZeroDisputeModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicensingModule__ZeroLicenseRegistry";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicensingModule__ZeroLicenseToken";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicensingModule__ZeroModuleRegistry";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LicensingModule__ZeroRoyaltyModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ReentrancyGuardReentrantCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "AuthorityUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "licenseTokenIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
            readonly indexed: false;
        }, {
            readonly name: "parentIpIds";
            readonly internalType: "address[]";
            readonly type: "address[]";
            readonly indexed: false;
        }, {
            readonly name: "licenseTermsIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
            readonly indexed: false;
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "DerivativeRegistered";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "LicenseTermsAttached";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "licensorIpId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "receiver";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "startLicenseTokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "LicenseTokensMinted";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "Paused";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "Unpaused";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ACCESS_CONTROLLER";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IAccessController";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "DISPUTE_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IDisputeModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "IP_ACCOUNT_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IIPAccountRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "LICENSE_NFT";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ILicenseToken";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "LICENSE_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ILicenseRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "MODULE_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IModuleRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ROYALTY_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract RoyaltyModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "__ProtocolPausable_init";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "attachLicenseTerms";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "authority";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "isConsumingScheduledOp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "licensorIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "receiver";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "royaltyContext";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "mintLicenseTokens";
        readonly outputs: readonly [{
            readonly name: "startLicenseTokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "pause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "parentIpIds";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "licenseTermsIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "royaltyContext";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "registerDerivative";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTokenIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "royaltyContext";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "registerDerivativeWithLicenseTokens";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newAuthority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setAuthority";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licensingConfig";
            readonly internalType: "struct Licensing.LicensingConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "isSet";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "mintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "licensingHook";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "hookData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }];
        readonly name: "setLicensingConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "interfaceId";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "unpause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }];
};
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x2E0a668289D5C4Da6a2264aC8DF03cd600c7aAB8)
 */
export declare const moduleRegistryAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedInvalidAuthority";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "delay";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "AccessManagedRequiredDelay";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedUnauthorized";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedInnerCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ModuleRegistry__InterfaceIdZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ModuleRegistry__ModuleAddressNotContract";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ModuleRegistry__ModuleAddressZeroAddress";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ModuleRegistry__ModuleAlreadyRegistered";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ModuleRegistry__ModuleNotRegistered";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ModuleRegistry__ModuleNotSupportExpectedModuleTypeInterfaceId";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ModuleRegistry__ModuleTypeAlreadyRegistered";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ModuleRegistry__ModuleTypeEmptyString";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ModuleRegistry__ModuleTypeNotRegistered";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ModuleRegistry__NameAlreadyRegistered";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ModuleRegistry__NameDoesNotMatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ModuleRegistry__NameEmptyString";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ModuleRegistry__ZeroAccessManager";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "AuthorityUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "module";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "moduleTypeInterfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
        readonly indexed: true;
    }, {
        readonly name: "moduleType";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }];
    readonly name: "ModuleAdded";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "module";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "ModuleRemoved";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "authority";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "getModule";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "moduleAddress";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getModuleType";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "moduleType";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "getModuleTypeInterfaceId";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "isConsumingScheduledOp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "moduleAddress";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isRegistered";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "moduleAddress";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "registerModule";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "moduleAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "moduleType";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "registerModule";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "registerModuleType";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "removeModule";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "removeModuleType";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newAuthority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setAuthority";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}];
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x2E0a668289D5C4Da6a2264aC8DF03cd600c7aAB8)
 */
export declare const moduleRegistryAddress: {
    readonly 11155111: "0x2E0a668289D5C4Da6a2264aC8DF03cd600c7aAB8";
};
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x2E0a668289D5C4Da6a2264aC8DF03cd600c7aAB8)
 */
export declare const moduleRegistryConfig: {
    readonly address: {
        readonly 11155111: "0x2E0a668289D5C4Da6a2264aC8DF03cd600c7aAB8";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedInvalidAuthority";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "delay";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "AccessManagedRequiredDelay";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedUnauthorized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ModuleRegistry__InterfaceIdZero";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ModuleRegistry__ModuleAddressNotContract";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ModuleRegistry__ModuleAddressZeroAddress";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ModuleRegistry__ModuleAlreadyRegistered";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ModuleRegistry__ModuleNotRegistered";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ModuleRegistry__ModuleNotSupportExpectedModuleTypeInterfaceId";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ModuleRegistry__ModuleTypeAlreadyRegistered";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ModuleRegistry__ModuleTypeEmptyString";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ModuleRegistry__ModuleTypeNotRegistered";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ModuleRegistry__NameAlreadyRegistered";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ModuleRegistry__NameDoesNotMatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ModuleRegistry__NameEmptyString";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ModuleRegistry__ZeroAccessManager";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "AuthorityUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "module";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "moduleTypeInterfaceId";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
            readonly indexed: true;
        }, {
            readonly name: "moduleType";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }];
        readonly name: "ModuleAdded";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "module";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "ModuleRemoved";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "authority";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "getModule";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "moduleAddress";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getModuleType";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "moduleType";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "getModuleTypeInterfaceId";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "isConsumingScheduledOp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "moduleAddress";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isRegistered";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "moduleAddress";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "registerModule";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "moduleAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "moduleType";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "registerModule";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "interfaceId";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "registerModuleType";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "removeModule";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "removeModuleType";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newAuthority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setAuthority";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }];
};
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x260B6CB6284c89dbE660c0004233f7bB99B5edE7)
 */
export declare const piLicenseTemplateAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "accessController";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipAccountRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "royaltyModule";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "ipAccount";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessControlled__NotIpAccount";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AccessControlled__ZeroAddress";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedInvalidAuthority";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "delay";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "AccessManagedRequiredDelay";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedUnauthorized";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedInnerCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PILicenseTemplate__CommercialDisabled_CantAddAttribution";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PILicenseTemplate__CommercialDisabled_CantAddCommercializers";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PILicenseTemplate__CommercialDisabled_CantAddRevShare";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PILicenseTemplate__CommercialDisabled_CantAddRoyaltyPolicy";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PILicenseTemplate__CommercialEnabled_RoyaltyPolicyRequired";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "checker";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "PILicenseTemplate__CommercializerCheckerDoesNotSupportHook";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PILicenseTemplate__CurrencyTokenNotWhitelisted";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PILicenseTemplate__DerivativesDisabled_CantAddApproval";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PILicenseTemplate__DerivativesDisabled_CantAddAttribution";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PILicenseTemplate__DerivativesDisabled_CantAddReciprocal";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PILicenseTemplate__RoyaltyPolicyNotWhitelisted";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PILicenseTemplate__RoyaltyPolicyRequiresCurrencyToken";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PILicenseTemplate__ZeroAccessManager";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PILicenseTemplate__ZeroLicenseRegistry";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PILicenseTemplate__ZeroRoyaltyModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ReentrancyGuardReentrantCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "length";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "StringsInsufficientHexLength";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "AuthorityUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "approved";
        readonly internalType: "bool";
        readonly type: "bool";
        readonly indexed: false;
    }];
    readonly name: "DerivativeApproved";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "licenseTemplate";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "licenseTerms";
        readonly internalType: "bytes";
        readonly type: "bytes";
        readonly indexed: false;
    }];
    readonly name: "LicenseTermsRegistered";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ACCESS_CONTROLLER";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IAccessController";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "IP_ACCOUNT_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IIPAccountRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "LICENSE_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ILicenseRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ROYALTY_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IRoyaltyModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "authority";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "exists";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "licenseTermsIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "start";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getEarlierExpireTime";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "start";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getExpireTime";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "selectedLicenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getLicenseTerms";
    readonly outputs: readonly [{
        readonly name: "terms";
        readonly internalType: "struct PILTerms";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "transferable";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "royaltyPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "mintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "expiration";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "commercialUse";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "commercialAttribution";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "commercializerChecker";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "commercializerCheckerData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "commercialRevShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "commercialRevCelling";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "derivativesAllowed";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesAttribution";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesApproval";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesReciprocal";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativeRevCelling";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "currency";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "uri";
            readonly internalType: "string";
            readonly type: "string";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "terms";
        readonly internalType: "struct PILTerms";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "transferable";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "royaltyPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "mintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "expiration";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "commercialUse";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "commercialAttribution";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "commercializerChecker";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "commercializerCheckerData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "commercialRevShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "commercialRevCelling";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "derivativesAllowed";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesAttribution";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesApproval";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesReciprocal";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativeRevCelling";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "currency";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "uri";
            readonly internalType: "string";
            readonly type: "string";
        }];
    }];
    readonly name: "getLicenseTermsId";
    readonly outputs: readonly [{
        readonly name: "selectedLicenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getLicenseTermsURI";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getMetadataURI";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getRoyaltyPolicy";
    readonly outputs: readonly [{
        readonly name: "royaltyPolicy";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "royaltyData";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "mintingFee";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "currency";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "metadataURI";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "isConsumingScheduledOp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "parentIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isDerivativeApproved";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "isLicenseTransferable";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "name";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "terms";
        readonly internalType: "struct PILTerms";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "transferable";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "royaltyPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "mintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "expiration";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "commercialUse";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "commercialAttribution";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "commercializerChecker";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "commercializerCheckerData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "commercialRevShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "commercialRevCelling";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "derivativesAllowed";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesAttribution";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesApproval";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesReciprocal";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativeRevCelling";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "currency";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "uri";
            readonly internalType: "string";
            readonly type: "string";
        }];
    }];
    readonly name: "registerLicenseTerms";
    readonly outputs: readonly [{
        readonly name: "id";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "parentIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "approved";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly name: "setApproval";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newAuthority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setAuthority";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "toJson";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "totalRegisteredLicenseTerms";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "licenseTermsIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly name: "verifyCompatibleLicenses";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "licensee";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licensorIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "verifyMintLicenseToken";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "parentIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "licensee";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "verifyRegisterDerivative";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "childIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "parentIpIds";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "licenseTermsIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "childIpOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "verifyRegisterDerivativeForAllParents";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
}];
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x260B6CB6284c89dbE660c0004233f7bB99B5edE7)
 */
export declare const piLicenseTemplateAddress: {
    readonly 11155111: "0x260B6CB6284c89dbE660c0004233f7bB99B5edE7";
};
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x260B6CB6284c89dbE660c0004233f7bB99B5edE7)
 */
export declare const piLicenseTemplateConfig: {
    readonly address: {
        readonly 11155111: "0x260B6CB6284c89dbE660c0004233f7bB99B5edE7";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "accessController";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipAccountRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "royaltyModule";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "ipAccount";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessControlled__NotIpAccount";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AccessControlled__ZeroAddress";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedInvalidAuthority";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "delay";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "AccessManagedRequiredDelay";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedUnauthorized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "PILicenseTemplate__CommercialDisabled_CantAddAttribution";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "PILicenseTemplate__CommercialDisabled_CantAddCommercializers";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "PILicenseTemplate__CommercialDisabled_CantAddRevShare";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "PILicenseTemplate__CommercialDisabled_CantAddRoyaltyPolicy";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "PILicenseTemplate__CommercialEnabled_RoyaltyPolicyRequired";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "checker";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "PILicenseTemplate__CommercializerCheckerDoesNotSupportHook";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "PILicenseTemplate__CurrencyTokenNotWhitelisted";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "PILicenseTemplate__DerivativesDisabled_CantAddApproval";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "PILicenseTemplate__DerivativesDisabled_CantAddAttribution";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "PILicenseTemplate__DerivativesDisabled_CantAddReciprocal";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "PILicenseTemplate__RoyaltyPolicyNotWhitelisted";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "PILicenseTemplate__RoyaltyPolicyRequiresCurrencyToken";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "PILicenseTemplate__ZeroAccessManager";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "PILicenseTemplate__ZeroLicenseRegistry";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "PILicenseTemplate__ZeroRoyaltyModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ReentrancyGuardReentrantCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "length";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "StringsInsufficientHexLength";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "AuthorityUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "approved";
            readonly internalType: "bool";
            readonly type: "bool";
            readonly indexed: false;
        }];
        readonly name: "DerivativeApproved";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "licenseTerms";
            readonly internalType: "bytes";
            readonly type: "bytes";
            readonly indexed: false;
        }];
        readonly name: "LicenseTermsRegistered";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ACCESS_CONTROLLER";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IAccessController";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "IP_ACCOUNT_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IIPAccountRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "LICENSE_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ILicenseRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ROYALTY_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IRoyaltyModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "authority";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "exists";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "licenseTermsIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "start";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getEarlierExpireTime";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "start";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getExpireTime";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "selectedLicenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getLicenseTerms";
        readonly outputs: readonly [{
            readonly name: "terms";
            readonly internalType: "struct PILTerms";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "transferable";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "royaltyPolicy";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "mintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "expiration";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "commercialUse";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercialAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercializerChecker";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "commercializerCheckerData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "commercialRevShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "commercialRevCelling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "derivativesAllowed";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesApproval";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesReciprocal";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativeRevCelling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "currency";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "uri";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "terms";
            readonly internalType: "struct PILTerms";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "transferable";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "royaltyPolicy";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "mintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "expiration";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "commercialUse";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercialAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercializerChecker";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "commercializerCheckerData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "commercialRevShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "commercialRevCelling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "derivativesAllowed";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesApproval";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesReciprocal";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativeRevCelling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "currency";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "uri";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }];
        readonly name: "getLicenseTermsId";
        readonly outputs: readonly [{
            readonly name: "selectedLicenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getLicenseTermsURI";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getMetadataURI";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getRoyaltyPolicy";
        readonly outputs: readonly [{
            readonly name: "royaltyPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "royaltyData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "mintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "currency";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "metadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "isConsumingScheduledOp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "parentIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isDerivativeApproved";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "isLicenseTransferable";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "terms";
            readonly internalType: "struct PILTerms";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "transferable";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "royaltyPolicy";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "mintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "expiration";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "commercialUse";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercialAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercializerChecker";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "commercializerCheckerData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "commercialRevShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "commercialRevCelling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "derivativesAllowed";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesApproval";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesReciprocal";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativeRevCelling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "currency";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "uri";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }];
        readonly name: "registerLicenseTerms";
        readonly outputs: readonly [{
            readonly name: "id";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "parentIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "approved";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly name: "setApproval";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newAuthority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setAuthority";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "interfaceId";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "toJson";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "totalRegisteredLicenseTerms";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "licenseTermsIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly name: "verifyCompatibleLicenses";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licensee";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licensorIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "verifyMintLicenseToken";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "parentIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licensee";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "verifyRegisterDerivative";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "childIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "parentIpIds";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "licenseTermsIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "childIpOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "verifyRegisterDerivativeForAllParents";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
    }];
};
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0xFAE961dd2b87CD5818dbCDc2591e6AB0b50E96b0)
 */
export declare const royaltyModuleAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "licensingModule";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "disputeModule";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedInvalidAuthority";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "delay";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "AccessManagedRequiredDelay";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedUnauthorized";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "EnforcedPause";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ExpectedPause";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedInnerCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ReentrancyGuardReentrantCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__CanOnlyMintSelectedPolicy";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__IncompatibleRoyaltyPolicy";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__IpIsExpired";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__IpIsTagged";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__NoParentsOnLinking";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__NoRoyaltyPolicySet";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__NotAllowedCaller";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__NotWhitelistedRoyaltyPolicy";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__NotWhitelistedRoyaltyToken";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__ZeroAccessManager";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__ZeroDisputeModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__ZeroLicenseRegistry";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__ZeroLicensingModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__ZeroRoyaltyPolicy";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyModule__ZeroRoyaltyToken";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "AuthorityUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "receiverIpId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "payerAddress";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "LicenseMintingFeePaid";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "Paused";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "receiverIpId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "payerIpId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "RoyaltyPaid";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "royaltyPolicy";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "allowed";
        readonly internalType: "bool";
        readonly type: "bool";
        readonly indexed: false;
    }];
    readonly name: "RoyaltyPolicyWhitelistUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "allowed";
        readonly internalType: "bool";
        readonly type: "bool";
        readonly indexed: false;
    }];
    readonly name: "RoyaltyTokenWhitelistUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "Unpaused";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "DISPUTE_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IDisputeModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "LICENSE_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ILicenseRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "LICENSING_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ILicensingModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "__ProtocolPausable_init";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "authority";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "isConsumingScheduledOp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "royaltyPolicy";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isWhitelistedRoyaltyPolicy";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isWhitelistedRoyaltyToken";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "name";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "royaltyPolicy";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseData";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "externalData";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onLicenseMinting";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "royaltyPolicy";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "parentIpIds";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "licenseData";
        readonly internalType: "bytes[]";
        readonly type: "bytes[]";
    }, {
        readonly name: "externalData";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onLinkToParents";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "pause";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "paused";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "receiverIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "payerAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseRoyaltyPolicy";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "payLicenseMintingFee";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "receiverIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "payerIpId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "payRoyaltyOnBehalf";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "royaltyPolicies";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newAuthority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setAuthority";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "unpause";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "royaltyPolicy";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "allowed";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly name: "whitelistRoyaltyPolicy";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "allowed";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly name: "whitelistRoyaltyToken";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}];
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0xFAE961dd2b87CD5818dbCDc2591e6AB0b50E96b0)
 */
export declare const royaltyModuleAddress: {
    readonly 11155111: "0xFAE961dd2b87CD5818dbCDc2591e6AB0b50E96b0";
};
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0xFAE961dd2b87CD5818dbCDc2591e6AB0b50E96b0)
 */
export declare const royaltyModuleConfig: {
    readonly address: {
        readonly 11155111: "0xFAE961dd2b87CD5818dbCDc2591e6AB0b50E96b0";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "licensingModule";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "disputeModule";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedInvalidAuthority";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "delay";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "AccessManagedRequiredDelay";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedUnauthorized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "EnforcedPause";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ExpectedPause";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ReentrancyGuardReentrantCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__CanOnlyMintSelectedPolicy";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__IncompatibleRoyaltyPolicy";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__IpIsExpired";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__IpIsTagged";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__NoParentsOnLinking";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__NoRoyaltyPolicySet";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__NotAllowedCaller";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__NotWhitelistedRoyaltyPolicy";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__NotWhitelistedRoyaltyToken";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__ZeroAccessManager";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__ZeroDisputeModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__ZeroLicenseRegistry";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__ZeroLicensingModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__ZeroRoyaltyPolicy";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyModule__ZeroRoyaltyToken";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "AuthorityUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "receiverIpId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "payerAddress";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "LicenseMintingFeePaid";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "Paused";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "receiverIpId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "payerIpId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "RoyaltyPaid";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "royaltyPolicy";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "allowed";
            readonly internalType: "bool";
            readonly type: "bool";
            readonly indexed: false;
        }];
        readonly name: "RoyaltyPolicyWhitelistUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "allowed";
            readonly internalType: "bool";
            readonly type: "bool";
            readonly indexed: false;
        }];
        readonly name: "RoyaltyTokenWhitelistUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "Unpaused";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "DISPUTE_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IDisputeModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "LICENSE_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ILicenseRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "LICENSING_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ILicensingModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "__ProtocolPausable_init";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "authority";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "isConsumingScheduledOp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "royaltyPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isWhitelistedRoyaltyPolicy";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isWhitelistedRoyaltyToken";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "royaltyPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "externalData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "onLicenseMinting";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "royaltyPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "parentIpIds";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "licenseData";
            readonly internalType: "bytes[]";
            readonly type: "bytes[]";
        }, {
            readonly name: "externalData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "onLinkToParents";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "pause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "receiverIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "payerAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseRoyaltyPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "payLicenseMintingFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "receiverIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "payerIpId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "payRoyaltyOnBehalf";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "royaltyPolicies";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newAuthority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setAuthority";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "interfaceId";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "unpause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "royaltyPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "allowed";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly name: "whitelistRoyaltyPolicy";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "allowed";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly name: "whitelistRoyaltyToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }];
};
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0xAAbaf349C7a2A84564F9CC4Ac130B3f19A718E86)
 */
export declare const royaltyPolicyLapAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "royaltyModule";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licensingModule";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedInvalidAuthority";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "delay";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "AccessManagedRequiredDelay";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedUnauthorized";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressInsufficientBalance";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "EnforcedPause";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ExpectedPause";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedInnerCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ReentrancyGuardReentrantCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyPolicyLAP__AboveAncestorsLimit";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyPolicyLAP__AboveParentLimit";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyPolicyLAP__AboveRoyaltyStackLimit";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyPolicyLAP__InvalidParentRoyaltiesLength";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyPolicyLAP__LastPositionNotAbleToMintLicense";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyPolicyLAP__NotRoyaltyModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyPolicyLAP__UnlinkableToParents";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyPolicyLAP__ZeroAccessManager";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyPolicyLAP__ZeroIpRoyaltyVaultBeacon";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyPolicyLAP__ZeroLicensingModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RoyaltyPolicyLAP__ZeroRoyaltyModule";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "SafeERC20FailedOperation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "AuthorityUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "Paused";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "ipRoyaltyVault";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "royaltyStack";
        readonly internalType: "uint32";
        readonly type: "uint32";
        readonly indexed: false;
    }, {
        readonly name: "targetAncestors";
        readonly internalType: "address[]";
        readonly type: "address[]";
        readonly indexed: false;
    }, {
        readonly name: "targetRoyaltyAmount";
        readonly internalType: "uint32[]";
        readonly type: "uint32[]";
        readonly indexed: false;
    }];
    readonly name: "PolicyInitialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "vault";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "RevenueTokenAddedToVault";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "Unpaused";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "LICENSING_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "MAX_ANCESTORS";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "MAX_PARENTS";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ROYALTY_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "TOTAL_RT_SUPPLY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "__ProtocolPausable_init";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "authority";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getIpRoyaltyVaultBeacon";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getRoyaltyData";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }, {
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }, {
        readonly name: "";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "";
        readonly internalType: "uint32[]";
        readonly type: "uint32[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getSnapshotInterval";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "isConsumingScheduledOp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseData";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "externalData";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onLicenseMinting";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "parentIpIds";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "licenseData";
        readonly internalType: "bytes[]";
        readonly type: "bytes[]";
    }, {
        readonly name: "externalData";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onLinkToParents";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "onRoyaltyPayment";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "pause";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "paused";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newAuthority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setAuthority";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "beacon";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setIpRoyaltyVaultBeacon";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "timestampInterval";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "setSnapshotInterval";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "unpause";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newVault";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "upgradeVaults";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}];
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0xAAbaf349C7a2A84564F9CC4Ac130B3f19A718E86)
 */
export declare const royaltyPolicyLapAddress: {
    readonly 11155111: "0xAAbaf349C7a2A84564F9CC4Ac130B3f19A718E86";
};
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0xAAbaf349C7a2A84564F9CC4Ac130B3f19A718E86)
 */
export declare const royaltyPolicyLapConfig: {
    readonly address: {
        readonly 11155111: "0xAAbaf349C7a2A84564F9CC4Ac130B3f19A718E86";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "royaltyModule";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licensingModule";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedInvalidAuthority";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "delay";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "AccessManagedRequiredDelay";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedUnauthorized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressInsufficientBalance";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "EnforcedPause";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ExpectedPause";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ReentrancyGuardReentrantCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLAP__AboveAncestorsLimit";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLAP__AboveParentLimit";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLAP__AboveRoyaltyStackLimit";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLAP__InvalidParentRoyaltiesLength";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLAP__LastPositionNotAbleToMintLicense";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLAP__NotRoyaltyModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLAP__UnlinkableToParents";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLAP__ZeroAccessManager";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLAP__ZeroIpRoyaltyVaultBeacon";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLAP__ZeroLicensingModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RoyaltyPolicyLAP__ZeroRoyaltyModule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "SafeERC20FailedOperation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "AuthorityUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "Paused";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "ipRoyaltyVault";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "royaltyStack";
            readonly internalType: "uint32";
            readonly type: "uint32";
            readonly indexed: false;
        }, {
            readonly name: "targetAncestors";
            readonly internalType: "address[]";
            readonly type: "address[]";
            readonly indexed: false;
        }, {
            readonly name: "targetRoyaltyAmount";
            readonly internalType: "uint32[]";
            readonly type: "uint32[]";
            readonly indexed: false;
        }];
        readonly name: "PolicyInitialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "vault";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "RevenueTokenAddedToVault";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "Unpaused";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "LICENSING_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "MAX_ANCESTORS";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "MAX_PARENTS";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ROYALTY_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "TOTAL_RT_SUPPLY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "__ProtocolPausable_init";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "authority";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getIpRoyaltyVaultBeacon";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getRoyaltyData";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "";
            readonly internalType: "uint32[]";
            readonly type: "uint32[]";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getSnapshotInterval";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "isConsumingScheduledOp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "externalData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "onLicenseMinting";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "parentIpIds";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "licenseData";
            readonly internalType: "bytes[]";
            readonly type: "bytes[]";
        }, {
            readonly name: "externalData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "onLinkToParents";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "onRoyaltyPayment";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "pause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newAuthority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setAuthority";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "beacon";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setIpRoyaltyVaultBeacon";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "timestampInterval";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "setSnapshotInterval";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "unpause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newVault";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "upgradeVaults";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }];
};
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x69415CE984A79a3Cfbe3F51024C63b6C107331e3)
 */
export declare const spgAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "accessController";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ipAssetRegistry";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licensingModule";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "coreMetadataModule";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "pilTemplate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseToken";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedInvalidAuthority";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "delay";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "AccessManagedRequiredDelay";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedUnauthorized";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedInnerCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SPG__CallerNotMinterRole";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SPG__EmptyLicenseTokens";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SPG__ZeroAddressParam";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "AuthorityUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "nftContract";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "CollectionCreated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ACCESS_CONTROLLER";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IAccessController";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "CORE_METADATA_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ICoreMetadataModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "IP_ASSET_REGISTRY";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IIPAssetRegistry";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "LICENSE_TOKEN";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ILicenseToken";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "LICENSING_MODULE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ILicensingModule";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "PIL_TEMPLATE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IPILicenseTemplate";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "authority";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "symbol";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "maxSupply";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }, {
        readonly name: "mintCost";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "mintToken";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "createCollection";
    readonly outputs: readonly [{
        readonly name: "nftContract";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accessManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "isConsumingScheduledOp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "nftContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "metadata";
        readonly internalType: "struct IStoryProtocolGateway.IPMetadata";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "metadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "metadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }];
    readonly name: "mintAndRegisterIp";
    readonly outputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "nftContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "metadata";
        readonly internalType: "struct IStoryProtocolGateway.IPMetadata";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "metadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "metadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "terms";
        readonly internalType: "struct PILTerms";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "transferable";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "royaltyPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "mintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "expiration";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "commercialUse";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "commercialAttribution";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "commercializerChecker";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "commercializerCheckerData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "commercialRevShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "commercialRevCelling";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "derivativesAllowed";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesAttribution";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesApproval";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesReciprocal";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativeRevCelling";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "currency";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "uri";
            readonly internalType: "string";
            readonly type: "string";
        }];
    }];
    readonly name: "mintAndRegisterIpAndAttachPILTerms";
    readonly outputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "nftContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "derivData";
        readonly internalType: "struct IStoryProtocolGateway.MakeDerivative";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "parentIpIds";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "royaltyContext";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }, {
        readonly name: "metadata";
        readonly internalType: "struct IStoryProtocolGateway.IPMetadata";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "metadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "metadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "mintAndRegisterIpAndMakeDerivative";
    readonly outputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "nftContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTokenIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "royaltyContext";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "metadata";
        readonly internalType: "struct IStoryProtocolGateway.IPMetadata";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "metadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "metadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "mintAndRegisterIpAndMakeDerivativeWithLicenseTokens";
    readonly outputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "nftContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "metadata";
        readonly internalType: "struct IStoryProtocolGateway.IPMetadata";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "metadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "metadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "terms";
        readonly internalType: "struct PILTerms";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "transferable";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "royaltyPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "mintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "expiration";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "commercialUse";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "commercialAttribution";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "commercializerChecker";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "commercializerCheckerData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "commercialRevShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "commercialRevCelling";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "derivativesAllowed";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesAttribution";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesApproval";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesReciprocal";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativeRevCelling";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "currency";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "uri";
            readonly internalType: "string";
            readonly type: "string";
        }];
    }, {
        readonly name: "sigMetadata";
        readonly internalType: "struct IStoryProtocolGateway.SignatureData";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }, {
        readonly name: "sigAttach";
        readonly internalType: "struct IStoryProtocolGateway.SignatureData";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly name: "registerIpAndAttachPILTerms";
    readonly outputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "nftContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "derivData";
        readonly internalType: "struct IStoryProtocolGateway.MakeDerivative";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "parentIpIds";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "licenseTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "royaltyContext";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }, {
        readonly name: "metadata";
        readonly internalType: "struct IStoryProtocolGateway.IPMetadata";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "metadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "metadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "sigMetadata";
        readonly internalType: "struct IStoryProtocolGateway.SignatureData";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }, {
        readonly name: "sigRegister";
        readonly internalType: "struct IStoryProtocolGateway.SignatureData";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly name: "registerIpAndMakeDerivative";
    readonly outputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "nftContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "licenseTokenIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "royaltyContext";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "metadata";
        readonly internalType: "struct IStoryProtocolGateway.IPMetadata";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "metadataURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "metadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "nftMetadataHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "sigMetadata";
        readonly internalType: "struct IStoryProtocolGateway.SignatureData";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }, {
        readonly name: "sigRegister";
        readonly internalType: "struct IStoryProtocolGateway.SignatureData";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly name: "registerIpAndMakeDerivativeWithLicenseTokens";
    readonly outputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "ipId";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "terms";
        readonly internalType: "struct PILTerms";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "transferable";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "royaltyPolicy";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "mintingFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "expiration";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "commercialUse";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "commercialAttribution";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "commercializerChecker";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "commercializerCheckerData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "commercialRevShare";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "commercialRevCelling";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "derivativesAllowed";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesAttribution";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesApproval";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativesReciprocal";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "derivativeRevCelling";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "currency";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "uri";
            readonly internalType: "string";
            readonly type: "string";
        }];
    }];
    readonly name: "registerPILTermsAndAttach";
    readonly outputs: readonly [{
        readonly name: "licenseTermsId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newAuthority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setAuthority";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newNftContractBeacon";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setNftContractBeacon";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newNftContract";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "upgradeCollections";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}];
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x69415CE984A79a3Cfbe3F51024C63b6C107331e3)
 */
export declare const spgAddress: {
    readonly 11155111: "0x69415CE984A79a3Cfbe3F51024C63b6C107331e3";
};
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x69415CE984A79a3Cfbe3F51024C63b6C107331e3)
 */
export declare const spgConfig: {
    readonly address: {
        readonly 11155111: "0x69415CE984A79a3Cfbe3F51024C63b6C107331e3";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "accessController";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ipAssetRegistry";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licensingModule";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "coreMetadataModule";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "pilTemplate";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseToken";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedInvalidAuthority";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "delay";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "AccessManagedRequiredDelay";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedUnauthorized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SPG__CallerNotMinterRole";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SPG__EmptyLicenseTokens";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SPG__ZeroAddressParam";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "AuthorityUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "nftContract";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "CollectionCreated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ACCESS_CONTROLLER";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IAccessController";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "CORE_METADATA_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ICoreMetadataModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "IP_ASSET_REGISTRY";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IIPAssetRegistry";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "LICENSE_TOKEN";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ILicenseToken";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "LICENSING_MODULE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ILicensingModule";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "PIL_TEMPLATE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IPILicenseTemplate";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "authority";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "symbol";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "maxSupply";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "mintCost";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "mintToken";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "createCollection";
        readonly outputs: readonly [{
            readonly name: "nftContract";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accessManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "isConsumingScheduledOp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "nftContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "metadata";
            readonly internalType: "struct IStoryProtocolGateway.IPMetadata";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "metadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "metadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "nftMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }];
        readonly name: "mintAndRegisterIp";
        readonly outputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "nftContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "metadata";
            readonly internalType: "struct IStoryProtocolGateway.IPMetadata";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "metadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "metadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "nftMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "terms";
            readonly internalType: "struct PILTerms";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "transferable";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "royaltyPolicy";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "mintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "expiration";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "commercialUse";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercialAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercializerChecker";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "commercializerCheckerData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "commercialRevShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "commercialRevCelling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "derivativesAllowed";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesApproval";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesReciprocal";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativeRevCelling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "currency";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "uri";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }];
        readonly name: "mintAndRegisterIpAndAttachPILTerms";
        readonly outputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "nftContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "derivData";
            readonly internalType: "struct IStoryProtocolGateway.MakeDerivative";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "parentIpIds";
                readonly internalType: "address[]";
                readonly type: "address[]";
            }, {
                readonly name: "licenseTemplate";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "licenseTermsIds";
                readonly internalType: "uint256[]";
                readonly type: "uint256[]";
            }, {
                readonly name: "royaltyContext";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }, {
            readonly name: "metadata";
            readonly internalType: "struct IStoryProtocolGateway.IPMetadata";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "metadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "metadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "nftMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "mintAndRegisterIpAndMakeDerivative";
        readonly outputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "nftContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTokenIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "royaltyContext";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "metadata";
            readonly internalType: "struct IStoryProtocolGateway.IPMetadata";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "metadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "metadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "nftMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "mintAndRegisterIpAndMakeDerivativeWithLicenseTokens";
        readonly outputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "nftContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "metadata";
            readonly internalType: "struct IStoryProtocolGateway.IPMetadata";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "metadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "metadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "nftMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "terms";
            readonly internalType: "struct PILTerms";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "transferable";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "royaltyPolicy";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "mintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "expiration";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "commercialUse";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercialAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercializerChecker";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "commercializerCheckerData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "commercialRevShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "commercialRevCelling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "derivativesAllowed";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesApproval";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesReciprocal";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativeRevCelling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "currency";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "uri";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }, {
            readonly name: "sigMetadata";
            readonly internalType: "struct IStoryProtocolGateway.SignatureData";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "signer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "signature";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }, {
            readonly name: "sigAttach";
            readonly internalType: "struct IStoryProtocolGateway.SignatureData";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "signer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "signature";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }];
        readonly name: "registerIpAndAttachPILTerms";
        readonly outputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "nftContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "derivData";
            readonly internalType: "struct IStoryProtocolGateway.MakeDerivative";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "parentIpIds";
                readonly internalType: "address[]";
                readonly type: "address[]";
            }, {
                readonly name: "licenseTemplate";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "licenseTermsIds";
                readonly internalType: "uint256[]";
                readonly type: "uint256[]";
            }, {
                readonly name: "royaltyContext";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }, {
            readonly name: "metadata";
            readonly internalType: "struct IStoryProtocolGateway.IPMetadata";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "metadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "metadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "nftMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "sigMetadata";
            readonly internalType: "struct IStoryProtocolGateway.SignatureData";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "signer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "signature";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }, {
            readonly name: "sigRegister";
            readonly internalType: "struct IStoryProtocolGateway.SignatureData";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "signer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "signature";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }];
        readonly name: "registerIpAndMakeDerivative";
        readonly outputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "nftContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "licenseTokenIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "royaltyContext";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "metadata";
            readonly internalType: "struct IStoryProtocolGateway.IPMetadata";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "metadataURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "metadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "nftMetadataHash";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "sigMetadata";
            readonly internalType: "struct IStoryProtocolGateway.SignatureData";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "signer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "signature";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }, {
            readonly name: "sigRegister";
            readonly internalType: "struct IStoryProtocolGateway.SignatureData";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "signer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "signature";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }];
        readonly name: "registerIpAndMakeDerivativeWithLicenseTokens";
        readonly outputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "ipId";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "terms";
            readonly internalType: "struct PILTerms";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "transferable";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "royaltyPolicy";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "mintingFee";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "expiration";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "commercialUse";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercialAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "commercializerChecker";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "commercializerCheckerData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "commercialRevShare";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "commercialRevCelling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "derivativesAllowed";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesAttribution";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesApproval";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativesReciprocal";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "derivativeRevCelling";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "currency";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "uri";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }];
        readonly name: "registerPILTermsAndAttach";
        readonly outputs: readonly [{
            readonly name: "licenseTermsId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newAuthority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setAuthority";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newNftContractBeacon";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setNftContractBeacon";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newNftContract";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "upgradeCollections";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }];
};
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x027D258659FBdda9033f9c008AF166239EBa67c1)
 */
export declare const spgnftBeaconAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "implementation_";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "initialOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "BeaconInvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OwnableInvalidOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OwnableUnauthorizedAccount";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "previousOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnershipTransferred";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "implementation";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "owner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "renounceOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "transferOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "upgradeTo";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}];
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x027D258659FBdda9033f9c008AF166239EBa67c1)
 */
export declare const spgnftBeaconAddress: {
    readonly 11155111: "0x027D258659FBdda9033f9c008AF166239EBa67c1";
};
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x027D258659FBdda9033f9c008AF166239EBa67c1)
 */
export declare const spgnftBeaconConfig: {
    readonly address: {
        readonly 11155111: "0x027D258659FBdda9033f9c008AF166239EBa67c1";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "implementation_";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "initialOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "BeaconInvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OwnableInvalidOwner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OwnableUnauthorizedAccount";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "previousOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnershipTransferred";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "implementation";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "upgradeTo";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }];
};
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0xDb6480C00B570324A122A6B35F9CAC0F87BDb3e6)
 */
export declare const spgnftImplAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "spg";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AccessControlBadConfirmation";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "neededRole";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "AccessControlUnauthorizedAccount";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC721IncorrectOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ERC721InsufficientApproval";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "approver";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC721InvalidApprover";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC721InvalidOperator";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC721InvalidOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "receiver";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC721InvalidReceiver";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC721InvalidSender";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ERC721NonexistentToken";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SPGNFT_ZeroMaxSupply";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SPGNFT__CallerNotSPG";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SPGNFT__MaxSupplyReached";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SPGNFT__ZeroAddressParam";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "approved";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }];
    readonly name: "Approval";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "approved";
        readonly internalType: "bool";
        readonly type: "bool";
        readonly indexed: false;
    }];
    readonly name: "ApprovalForAll";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "role";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: true;
    }, {
        readonly name: "previousAdminRole";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: true;
    }, {
        readonly name: "newAdminRole";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: true;
    }];
    readonly name: "RoleAdminChanged";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "role";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: true;
    }, {
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "RoleGranted";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "role";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: true;
    }, {
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "RoleRevoked";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }];
    readonly name: "Transfer";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "DEFAULT_ADMIN_ROLE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "SPG_ADDRESS";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "approve";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "balanceOf";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getApproved";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "role";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "getRoleAdmin";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "role";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "grantRole";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "role";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "hasRole";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "symbol";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "maxSupply";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }, {
        readonly name: "mintCost";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "mintToken";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isApprovedForAll";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "mint";
    readonly outputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "payer";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "mintBySPG";
    readonly outputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "mintCost";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "mintToken";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "name";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ownerOf";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "role";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "callerConfirmation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "renounceRole";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "role";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "revokeRole";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "safeTransferFrom";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "safeTransferFrom";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "approved";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly name: "setApprovalForAll";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "cost";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "setMintCost";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setMintToken";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "symbol";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "tokenURI";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "totalSupply";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "transferFrom";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "withdrawToken";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}];
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0xDb6480C00B570324A122A6B35F9CAC0F87BDb3e6)
 */
export declare const spgnftImplAddress: {
    readonly 11155111: "0xDb6480C00B570324A122A6B35F9CAC0F87BDb3e6";
};
/**
 * [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0xDb6480C00B570324A122A6B35F9CAC0F87BDb3e6)
 */
export declare const spgnftImplConfig: {
    readonly address: {
        readonly 11155111: "0xDb6480C00B570324A122A6B35F9CAC0F87BDb3e6";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "spg";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AccessControlBadConfirmation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "neededRole";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "AccessControlUnauthorizedAccount";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC721IncorrectOwner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ERC721InsufficientApproval";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "approver";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC721InvalidApprover";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC721InvalidOperator";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC721InvalidOwner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "receiver";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC721InvalidReceiver";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC721InvalidSender";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ERC721NonexistentToken";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SPGNFT_ZeroMaxSupply";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SPGNFT__CallerNotSPG";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SPGNFT__MaxSupplyReached";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SPGNFT__ZeroAddressParam";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "approved";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }];
        readonly name: "Approval";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "approved";
            readonly internalType: "bool";
            readonly type: "bool";
            readonly indexed: false;
        }];
        readonly name: "ApprovalForAll";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "role";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
            readonly indexed: true;
        }, {
            readonly name: "previousAdminRole";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
            readonly indexed: true;
        }, {
            readonly name: "newAdminRole";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
            readonly indexed: true;
        }];
        readonly name: "RoleAdminChanged";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "role";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
            readonly indexed: true;
        }, {
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "RoleGranted";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "role";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
            readonly indexed: true;
        }, {
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "RoleRevoked";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }];
        readonly name: "Transfer";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "SPG_ADDRESS";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "approve";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "balanceOf";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getApproved";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "role";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "role";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "role";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "symbol";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "maxSupply";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "mintCost";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "mintToken";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isApprovedForAll";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "mint";
        readonly outputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "payer";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "mintBySPG";
        readonly outputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "mintCost";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "mintToken";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ownerOf";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "role";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "callerConfirmation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "role";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "safeTransferFrom";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "safeTransferFrom";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "approved";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly name: "setApprovalForAll";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "cost";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "setMintCost";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setMintToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "interfaceId";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "symbol";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "tokenURI";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "totalSupply";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "transferFrom";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "withdrawToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }];
};
export type SimpleWalletClient<TChain extends Chain | undefined = Chain | undefined, TAccount extends Account | undefined = Account | undefined> = {
    account?: TAccount;
    writeContract: <const abi extends Abi | readonly unknown[], functionName extends ContractFunctionName<abi, "payable" | "nonpayable">, args extends ContractFunctionArgs<abi, "payable" | "nonpayable", functionName>, TChainOverride extends Chain | undefined = undefined>(args: WriteContractParameters<abi, functionName, args, TChain, TAccount, TChainOverride>) => Promise<WriteContractReturnType>;
};
/**
 * AccessControllerPermissionSetEvent
 *
 * @param ipAccountOwner address
 * @param ipAccount address
 * @param signer address
 * @param to address
 * @param func bytes4
 * @param permission uint8
 */
export type AccessControllerPermissionSetEvent = {
    ipAccountOwner: Address;
    ipAccount: Address;
    signer: Address;
    to: Address;
    func: Hex;
    permission: number;
};
/**
 * AccessControllerSetPermissionRequest
 *
 * @param ipAccount address
 * @param signer address
 * @param to address
 * @param func bytes4
 * @param permission uint8
 */
export type AccessControllerSetPermissionRequest = {
    ipAccount: Address;
    signer: Address;
    to: Address;
    func: Hex;
    permission: number;
};
/**
 * contract AccessController event
 */
export declare class AccessControllerEventClient {
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * event PermissionSet for contract AccessController
     */
    watchPermissionSetEvent(onLogs: (txHash: Hex, ev: Partial<AccessControllerPermissionSetEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event PermissionSet for contract AccessController
     */
    parseTxPermissionSetEvent(txReceipt: TransactionReceipt): Array<AccessControllerPermissionSetEvent>;
}
/**
 * contract AccessController write method
 */
export declare class AccessControllerClient extends AccessControllerEventClient {
    protected readonly wallet: SimpleWalletClient;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, address?: Address);
    /**
     * method setPermission for contract AccessController
     *
     * @param request AccessControllerSetPermissionRequest
     * @return Promise<WriteContractReturnType>
     */
    setPermission(request: AccessControllerSetPermissionRequest): Promise<WriteContractReturnType>;
}
/**
 * CoreMetadataModuleSetAllRequest
 *
 * @param ipId address
 * @param metadataURI string
 * @param metadataHash bytes32
 * @param nftMetadataHash bytes32
 */
export type CoreMetadataModuleSetAllRequest = {
    ipId: Address;
    metadataURI: string;
    metadataHash: Hex;
    nftMetadataHash: Hex;
};
/**
 * contract CoreMetadataModule write method
 */
export declare class CoreMetadataModuleClient {
    protected readonly wallet: SimpleWalletClient;
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, address?: Address);
    /**
     * method setAll for contract CoreMetadataModule
     *
     * @param request CoreMetadataModuleSetAllRequest
     * @return Promise<WriteContractReturnType>
     */
    setAll(request: CoreMetadataModuleSetAllRequest): Promise<WriteContractReturnType>;
}
/**
 * DisputeModuleDisputeCancelledEvent
 *
 * @param disputeId uint256
 * @param data bytes
 */
export type DisputeModuleDisputeCancelledEvent = {
    disputeId: bigint;
    data: Hex;
};
/**
 * DisputeModuleDisputeRaisedEvent
 *
 * @param disputeId uint256
 * @param targetIpId address
 * @param disputeInitiator address
 * @param arbitrationPolicy address
 * @param linkToDisputeEvidence bytes32
 * @param targetTag bytes32
 * @param data bytes
 */
export type DisputeModuleDisputeRaisedEvent = {
    disputeId: bigint;
    targetIpId: Address;
    disputeInitiator: Address;
    arbitrationPolicy: Address;
    linkToDisputeEvidence: Hex;
    targetTag: Hex;
    data: Hex;
};
/**
 * DisputeModuleDisputeResolvedEvent
 *
 * @param disputeId uint256
 */
export type DisputeModuleDisputeResolvedEvent = {
    disputeId: bigint;
};
/**
 * DisputeModuleCancelDisputeRequest
 *
 * @param disputeId uint256
 * @param data bytes
 */
export type DisputeModuleCancelDisputeRequest = {
    disputeId: bigint;
    data: Hex;
};
/**
 * DisputeModuleRaiseDisputeRequest
 *
 * @param targetIpId address
 * @param linkToDisputeEvidence string
 * @param targetTag bytes32
 * @param data bytes
 */
export type DisputeModuleRaiseDisputeRequest = {
    targetIpId: Address;
    linkToDisputeEvidence: string;
    targetTag: Hex;
    data: Hex;
};
/**
 * DisputeModuleResolveDisputeRequest
 *
 * @param disputeId uint256
 * @param data bytes
 */
export type DisputeModuleResolveDisputeRequest = {
    disputeId: bigint;
    data: Hex;
};
/**
 * contract DisputeModule event
 */
export declare class DisputeModuleEventClient {
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * event DisputeCancelled for contract DisputeModule
     */
    watchDisputeCancelledEvent(onLogs: (txHash: Hex, ev: Partial<DisputeModuleDisputeCancelledEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event DisputeCancelled for contract DisputeModule
     */
    parseTxDisputeCancelledEvent(txReceipt: TransactionReceipt): Array<DisputeModuleDisputeCancelledEvent>;
    /**
     * event DisputeRaised for contract DisputeModule
     */
    watchDisputeRaisedEvent(onLogs: (txHash: Hex, ev: Partial<DisputeModuleDisputeRaisedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event DisputeRaised for contract DisputeModule
     */
    parseTxDisputeRaisedEvent(txReceipt: TransactionReceipt): Array<DisputeModuleDisputeRaisedEvent>;
    /**
     * event DisputeResolved for contract DisputeModule
     */
    watchDisputeResolvedEvent(onLogs: (txHash: Hex, ev: Partial<DisputeModuleDisputeResolvedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event DisputeResolved for contract DisputeModule
     */
    parseTxDisputeResolvedEvent(txReceipt: TransactionReceipt): Array<DisputeModuleDisputeResolvedEvent>;
}
/**
 * contract DisputeModule write method
 */
export declare class DisputeModuleClient extends DisputeModuleEventClient {
    protected readonly wallet: SimpleWalletClient;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, address?: Address);
    /**
     * method cancelDispute for contract DisputeModule
     *
     * @param request DisputeModuleCancelDisputeRequest
     * @return Promise<WriteContractReturnType>
     */
    cancelDispute(request: DisputeModuleCancelDisputeRequest): Promise<WriteContractReturnType>;
    /**
     * method raiseDispute for contract DisputeModule
     *
     * @param request DisputeModuleRaiseDisputeRequest
     * @return Promise<WriteContractReturnType>
     */
    raiseDispute(request: DisputeModuleRaiseDisputeRequest): Promise<WriteContractReturnType>;
    /**
     * method resolveDispute for contract DisputeModule
     *
     * @param request DisputeModuleResolveDisputeRequest
     * @return Promise<WriteContractReturnType>
     */
    resolveDispute(request: DisputeModuleResolveDisputeRequest): Promise<WriteContractReturnType>;
}
export type IpAccountImplStateResponse = bigint;
/**
 * IpAccountImplExecuteRequest
 *
 * @param to address
 * @param value uint256
 * @param data bytes
 */
export type IpAccountImplExecuteRequest = {
    to: Address;
    value: bigint;
    data: Hex;
};
/**
 * IpAccountImplExecuteWithSigRequest
 *
 * @param to address
 * @param value uint256
 * @param data bytes
 * @param signer address
 * @param deadline uint256
 * @param signature bytes
 */
export type IpAccountImplExecuteWithSigRequest = {
    to: Address;
    value: bigint;
    data: Hex;
    signer: Address;
    deadline: bigint;
    signature: Hex;
};
/**
 * contract IPAccountImpl readonly method
 */
export declare class IpAccountImplReadOnlyClient {
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * method state for contract IPAccountImpl
     *
     * @param request IpAccountImplStateRequest
     * @return Promise<IpAccountImplStateResponse>
     */
    state(): Promise<IpAccountImplStateResponse>;
}
/**
 * contract IPAccountImpl write method
 */
export declare class IpAccountImplClient extends IpAccountImplReadOnlyClient {
    protected readonly wallet: SimpleWalletClient;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, address?: Address);
    /**
     * method execute for contract IPAccountImpl
     *
     * @param request IpAccountImplExecuteRequest
     * @return Promise<WriteContractReturnType>
     */
    execute(request: IpAccountImplExecuteRequest): Promise<WriteContractReturnType>;
    /**
     * method executeWithSig for contract IPAccountImpl
     *
     * @param request IpAccountImplExecuteWithSigRequest
     * @return Promise<WriteContractReturnType>
     */
    executeWithSig(request: IpAccountImplExecuteWithSigRequest): Promise<WriteContractReturnType>;
}
/**
 * IpAssetRegistryIpAccountRegisteredEvent
 *
 * @param account address
 * @param implementation address
 * @param chainId uint256
 * @param tokenContract address
 * @param tokenId uint256
 */
export type IpAssetRegistryIpAccountRegisteredEvent = {
    account: Address;
    implementation: Address;
    chainId: bigint;
    tokenContract: Address;
    tokenId: bigint;
};
/**
 * IpAssetRegistryIpRegisteredEvent
 *
 * @param ipId address
 * @param chainId uint256
 * @param tokenContract address
 * @param tokenId uint256
 * @param name string
 * @param uri string
 * @param registrationDate uint256
 */
export type IpAssetRegistryIpRegisteredEvent = {
    ipId: Address;
    chainId: bigint;
    tokenContract: Address;
    tokenId: bigint;
    name: string;
    uri: string;
    registrationDate: bigint;
};
/**
 * IpAssetRegistryIpIdRequest
 *
 * @param chainId uint256
 * @param tokenContract address
 * @param tokenId uint256
 */
export type IpAssetRegistryIpIdRequest = {
    chainId: bigint;
    tokenContract: Address;
    tokenId: bigint;
};
export type IpAssetRegistryIpIdResponse = Address;
/**
 * IpAssetRegistryIsRegisteredRequest
 *
 * @param id address
 */
export type IpAssetRegistryIsRegisteredRequest = {
    id: Address;
};
export type IpAssetRegistryIsRegisteredResponse = boolean;
/**
 * IpAssetRegistryRegisterRequest
 *
 * @param chainid uint256
 * @param tokenContract address
 * @param tokenId uint256
 */
export type IpAssetRegistryRegisterRequest = {
    chainid: bigint;
    tokenContract: Address;
    tokenId: bigint;
};
/**
 * contract IPAssetRegistry event
 */
export declare class IpAssetRegistryEventClient {
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * event IPAccountRegistered for contract IPAssetRegistry
     */
    watchIpAccountRegisteredEvent(onLogs: (txHash: Hex, ev: Partial<IpAssetRegistryIpAccountRegisteredEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event IPAccountRegistered for contract IPAssetRegistry
     */
    parseTxIpAccountRegisteredEvent(txReceipt: TransactionReceipt): Array<IpAssetRegistryIpAccountRegisteredEvent>;
    /**
     * event IPRegistered for contract IPAssetRegistry
     */
    watchIpRegisteredEvent(onLogs: (txHash: Hex, ev: Partial<IpAssetRegistryIpRegisteredEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event IPRegistered for contract IPAssetRegistry
     */
    parseTxIpRegisteredEvent(txReceipt: TransactionReceipt): Array<IpAssetRegistryIpRegisteredEvent>;
}
/**
 * contract IPAssetRegistry readonly method
 */
export declare class IpAssetRegistryReadOnlyClient extends IpAssetRegistryEventClient {
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * method ipId for contract IPAssetRegistry
     *
     * @param request IpAssetRegistryIpIdRequest
     * @return Promise<IpAssetRegistryIpIdResponse>
     */
    ipId(request: IpAssetRegistryIpIdRequest): Promise<IpAssetRegistryIpIdResponse>;
    /**
     * method isRegistered for contract IPAssetRegistry
     *
     * @param request IpAssetRegistryIsRegisteredRequest
     * @return Promise<IpAssetRegistryIsRegisteredResponse>
     */
    isRegistered(request: IpAssetRegistryIsRegisteredRequest): Promise<IpAssetRegistryIsRegisteredResponse>;
}
/**
 * contract IPAssetRegistry write method
 */
export declare class IpAssetRegistryClient extends IpAssetRegistryReadOnlyClient {
    protected readonly wallet: SimpleWalletClient;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, address?: Address);
    /**
     * method register for contract IPAssetRegistry
     *
     * @param request IpAssetRegistryRegisterRequest
     * @return Promise<WriteContractReturnType>
     */
    register(request: IpAssetRegistryRegisterRequest): Promise<WriteContractReturnType>;
}
/**
 * IpRoyaltyVaultImplRevenueTokenClaimedEvent
 *
 * @param claimer address
 * @param token address
 * @param amount uint256
 */
export type IpRoyaltyVaultImplRevenueTokenClaimedEvent = {
    claimer: Address;
    token: Address;
    amount: bigint;
};
/**
 * IpRoyaltyVaultImplRoyaltyTokensCollectedEvent
 *
 * @param ancestorIpId address
 * @param royaltyTokensCollected uint256
 */
export type IpRoyaltyVaultImplRoyaltyTokensCollectedEvent = {
    ancestorIpId: Address;
    royaltyTokensCollected: bigint;
};
/**
 * IpRoyaltyVaultImplSnapshotCompletedEvent
 *
 * @param snapshotId uint256
 * @param snapshotTimestamp uint256
 * @param unclaimedTokens uint32
 */
export type IpRoyaltyVaultImplSnapshotCompletedEvent = {
    snapshotId: bigint;
    snapshotTimestamp: bigint;
    unclaimedTokens: number;
};
/**
 * IpRoyaltyVaultImplClaimableRevenueRequest
 *
 * @param account address
 * @param snapshotId uint256
 * @param token address
 */
export type IpRoyaltyVaultImplClaimableRevenueRequest = {
    account: Address;
    snapshotId: bigint;
    token: Address;
};
export type IpRoyaltyVaultImplClaimableRevenueResponse = bigint;
export type IpRoyaltyVaultImplIpIdResponse = Address;
/**
 * IpRoyaltyVaultImplClaimRevenueBySnapshotBatchRequest
 *
 * @param snapshotIds uint256[]
 * @param token address
 */
export type IpRoyaltyVaultImplClaimRevenueBySnapshotBatchRequest = {
    snapshotIds: readonly bigint[];
    token: Address;
};
/**
 * IpRoyaltyVaultImplClaimRevenueByTokenBatchRequest
 *
 * @param snapshotId uint256
 * @param tokenList address[]
 */
export type IpRoyaltyVaultImplClaimRevenueByTokenBatchRequest = {
    snapshotId: bigint;
    tokenList: readonly Address[];
};
/**
 * IpRoyaltyVaultImplCollectRoyaltyTokensRequest
 *
 * @param ancestorIpId address
 */
export type IpRoyaltyVaultImplCollectRoyaltyTokensRequest = {
    ancestorIpId: Address;
};
/**
 * contract IpRoyaltyVaultImpl event
 */
export declare class IpRoyaltyVaultImplEventClient {
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * event RevenueTokenClaimed for contract IpRoyaltyVaultImpl
     */
    watchRevenueTokenClaimedEvent(onLogs: (txHash: Hex, ev: Partial<IpRoyaltyVaultImplRevenueTokenClaimedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event RevenueTokenClaimed for contract IpRoyaltyVaultImpl
     */
    parseTxRevenueTokenClaimedEvent(txReceipt: TransactionReceipt): Array<IpRoyaltyVaultImplRevenueTokenClaimedEvent>;
    /**
     * event RoyaltyTokensCollected for contract IpRoyaltyVaultImpl
     */
    watchRoyaltyTokensCollectedEvent(onLogs: (txHash: Hex, ev: Partial<IpRoyaltyVaultImplRoyaltyTokensCollectedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event RoyaltyTokensCollected for contract IpRoyaltyVaultImpl
     */
    parseTxRoyaltyTokensCollectedEvent(txReceipt: TransactionReceipt): Array<IpRoyaltyVaultImplRoyaltyTokensCollectedEvent>;
    /**
     * event SnapshotCompleted for contract IpRoyaltyVaultImpl
     */
    watchSnapshotCompletedEvent(onLogs: (txHash: Hex, ev: Partial<IpRoyaltyVaultImplSnapshotCompletedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event SnapshotCompleted for contract IpRoyaltyVaultImpl
     */
    parseTxSnapshotCompletedEvent(txReceipt: TransactionReceipt): Array<IpRoyaltyVaultImplSnapshotCompletedEvent>;
}
/**
 * contract IpRoyaltyVaultImpl readonly method
 */
export declare class IpRoyaltyVaultImplReadOnlyClient extends IpRoyaltyVaultImplEventClient {
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * method claimableRevenue for contract IpRoyaltyVaultImpl
     *
     * @param request IpRoyaltyVaultImplClaimableRevenueRequest
     * @return Promise<IpRoyaltyVaultImplClaimableRevenueResponse>
     */
    claimableRevenue(request: IpRoyaltyVaultImplClaimableRevenueRequest): Promise<IpRoyaltyVaultImplClaimableRevenueResponse>;
    /**
     * method ipId for contract IpRoyaltyVaultImpl
     *
     * @param request IpRoyaltyVaultImplIpIdRequest
     * @return Promise<IpRoyaltyVaultImplIpIdResponse>
     */
    ipId(): Promise<IpRoyaltyVaultImplIpIdResponse>;
}
/**
 * contract IpRoyaltyVaultImpl write method
 */
export declare class IpRoyaltyVaultImplClient extends IpRoyaltyVaultImplReadOnlyClient {
    protected readonly wallet: SimpleWalletClient;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, address?: Address);
    /**
     * method claimRevenueBySnapshotBatch for contract IpRoyaltyVaultImpl
     *
     * @param request IpRoyaltyVaultImplClaimRevenueBySnapshotBatchRequest
     * @return Promise<WriteContractReturnType>
     */
    claimRevenueBySnapshotBatch(request: IpRoyaltyVaultImplClaimRevenueBySnapshotBatchRequest): Promise<WriteContractReturnType>;
    /**
     * method claimRevenueByTokenBatch for contract IpRoyaltyVaultImpl
     *
     * @param request IpRoyaltyVaultImplClaimRevenueByTokenBatchRequest
     * @return Promise<WriteContractReturnType>
     */
    claimRevenueByTokenBatch(request: IpRoyaltyVaultImplClaimRevenueByTokenBatchRequest): Promise<WriteContractReturnType>;
    /**
     * method collectRoyaltyTokens for contract IpRoyaltyVaultImpl
     *
     * @param request IpRoyaltyVaultImplCollectRoyaltyTokensRequest
     * @return Promise<WriteContractReturnType>
     */
    collectRoyaltyTokens(request: IpRoyaltyVaultImplCollectRoyaltyTokensRequest): Promise<WriteContractReturnType>;
    /**
     * method snapshot for contract IpRoyaltyVaultImpl
     *
     * @param request IpRoyaltyVaultImplSnapshotRequest
     * @return Promise<WriteContractReturnType>
     */
    snapshot(): Promise<WriteContractReturnType>;
}
/**
 * LicenseRegistryAuthorityUpdatedEvent
 *
 * @param authority address
 */
export type LicenseRegistryAuthorityUpdatedEvent = {
    authority: Address;
};
/**
 * LicenseRegistryExpirationTimeSetEvent
 *
 * @param ipId address
 * @param expireTime uint256
 */
export type LicenseRegistryExpirationTimeSetEvent = {
    ipId: Address;
    expireTime: bigint;
};
/**
 * LicenseRegistryInitializedEvent
 *
 * @param version uint64
 */
export type LicenseRegistryInitializedEvent = {
    version: bigint;
};
/**
 * LicenseRegistryLicenseTemplateRegisteredEvent
 *
 * @param licenseTemplate address
 */
export type LicenseRegistryLicenseTemplateRegisteredEvent = {
    licenseTemplate: Address;
};
/**
 * LicenseRegistryLicensingConfigSetForIpEvent
 *
 * @param ipId address
 * @param licensingConfig tuple
 */
export type LicenseRegistryLicensingConfigSetForIpEvent = {
    ipId: Address;
    licensingConfig: {
        isSet: boolean;
        mintingFee: bigint;
        licensingHook: Address;
        hookData: Hex;
    };
};
/**
 * LicenseRegistryLicensingConfigSetForLicenseEvent
 *
 * @param ipId address
 * @param licenseTemplate address
 * @param licenseTermsId uint256
 */
export type LicenseRegistryLicensingConfigSetForLicenseEvent = {
    ipId: Address;
    licenseTemplate: Address;
    licenseTermsId: bigint;
};
/**
 * LicenseRegistryUpgradedEvent
 *
 * @param implementation address
 */
export type LicenseRegistryUpgradedEvent = {
    implementation: Address;
};
export type LicenseRegistryDisputeModuleResponse = Address;
export type LicenseRegistryExpirationTimeResponse = Hex;
export type LicenseRegistryLicensingModuleResponse = Address;
export type LicenseRegistryUpgradeInterfaceVersionResponse = string;
export type LicenseRegistryAuthorityResponse = Address;
/**
 * LicenseRegistryExistsRequest
 *
 * @param licenseTemplate address
 * @param licenseTermsId uint256
 */
export type LicenseRegistryExistsRequest = {
    licenseTemplate: Address;
    licenseTermsId: bigint;
};
export type LicenseRegistryExistsResponse = boolean;
/**
 * LicenseRegistryGetAttachedLicenseTermsRequest
 *
 * @param ipId address
 * @param index uint256
 */
export type LicenseRegistryGetAttachedLicenseTermsRequest = {
    ipId: Address;
    index: bigint;
};
/**
 * LicenseRegistryGetAttachedLicenseTermsResponse
 *
 * @param licenseTemplate address
 * @param licenseTermsId uint256
 */
export type LicenseRegistryGetAttachedLicenseTermsResponse = {
    licenseTemplate: Address;
    licenseTermsId: bigint;
};
/**
 * LicenseRegistryGetAttachedLicenseTermsCountRequest
 *
 * @param ipId address
 */
export type LicenseRegistryGetAttachedLicenseTermsCountRequest = {
    ipId: Address;
};
export type LicenseRegistryGetAttachedLicenseTermsCountResponse = bigint;
/**
 * LicenseRegistryGetDefaultLicenseTermsResponse
 *
 * @param licenseTemplate address
 * @param licenseTermsId uint256
 */
export type LicenseRegistryGetDefaultLicenseTermsResponse = {
    licenseTemplate: Address;
    licenseTermsId: bigint;
};
/**
 * LicenseRegistryGetDerivativeIpRequest
 *
 * @param parentIpId address
 * @param index uint256
 */
export type LicenseRegistryGetDerivativeIpRequest = {
    parentIpId: Address;
    index: bigint;
};
/**
 * LicenseRegistryGetDerivativeIpResponse
 *
 * @param childIpId address
 */
export type LicenseRegistryGetDerivativeIpResponse = {
    childIpId: Address;
};
/**
 * LicenseRegistryGetDerivativeIpCountRequest
 *
 * @param parentIpId address
 */
export type LicenseRegistryGetDerivativeIpCountRequest = {
    parentIpId: Address;
};
export type LicenseRegistryGetDerivativeIpCountResponse = bigint;
/**
 * LicenseRegistryGetExpireTimeRequest
 *
 * @param ipId address
 */
export type LicenseRegistryGetExpireTimeRequest = {
    ipId: Address;
};
export type LicenseRegistryGetExpireTimeResponse = bigint;
/**
 * LicenseRegistryGetLicensingConfigRequest
 *
 * @param ipId address
 * @param licenseTemplate address
 * @param licenseTermsId uint256
 */
export type LicenseRegistryGetLicensingConfigRequest = {
    ipId: Address;
    licenseTemplate: Address;
    licenseTermsId: bigint;
};
export type LicenseRegistryGetLicensingConfigResponse = {
    isSet: boolean;
    mintingFee: bigint;
    licensingHook: Address;
    hookData: Hex;
};
/**
 * LicenseRegistryGetParentIpRequest
 *
 * @param childIpId address
 * @param index uint256
 */
export type LicenseRegistryGetParentIpRequest = {
    childIpId: Address;
    index: bigint;
};
/**
 * LicenseRegistryGetParentIpResponse
 *
 * @param parentIpId address
 */
export type LicenseRegistryGetParentIpResponse = {
    parentIpId: Address;
};
/**
 * LicenseRegistryGetParentIpCountRequest
 *
 * @param childIpId address
 */
export type LicenseRegistryGetParentIpCountRequest = {
    childIpId: Address;
};
export type LicenseRegistryGetParentIpCountResponse = bigint;
/**
 * LicenseRegistryHasDerivativeIpsRequest
 *
 * @param parentIpId address
 */
export type LicenseRegistryHasDerivativeIpsRequest = {
    parentIpId: Address;
};
export type LicenseRegistryHasDerivativeIpsResponse = boolean;
/**
 * LicenseRegistryHasIpAttachedLicenseTermsRequest
 *
 * @param ipId address
 * @param licenseTemplate address
 * @param licenseTermsId uint256
 */
export type LicenseRegistryHasIpAttachedLicenseTermsRequest = {
    ipId: Address;
    licenseTemplate: Address;
    licenseTermsId: bigint;
};
export type LicenseRegistryHasIpAttachedLicenseTermsResponse = boolean;
export type LicenseRegistryIsConsumingScheduledOpResponse = Hex;
/**
 * LicenseRegistryIsDerivativeIpRequest
 *
 * @param childIpId address
 */
export type LicenseRegistryIsDerivativeIpRequest = {
    childIpId: Address;
};
export type LicenseRegistryIsDerivativeIpResponse = boolean;
/**
 * LicenseRegistryIsExpiredNowRequest
 *
 * @param ipId address
 */
export type LicenseRegistryIsExpiredNowRequest = {
    ipId: Address;
};
export type LicenseRegistryIsExpiredNowResponse = boolean;
/**
 * LicenseRegistryIsParentIpRequest
 *
 * @param parentIpId address
 * @param childIpId address
 */
export type LicenseRegistryIsParentIpRequest = {
    parentIpId: Address;
    childIpId: Address;
};
export type LicenseRegistryIsParentIpResponse = boolean;
/**
 * LicenseRegistryIsRegisteredLicenseTemplateRequest
 *
 * @param licenseTemplate address
 */
export type LicenseRegistryIsRegisteredLicenseTemplateRequest = {
    licenseTemplate: Address;
};
export type LicenseRegistryIsRegisteredLicenseTemplateResponse = boolean;
export type LicenseRegistryProxiableUuidResponse = Hex;
/**
 * LicenseRegistryVerifyMintLicenseTokenRequest
 *
 * @param licensorIpId address
 * @param licenseTemplate address
 * @param licenseTermsId uint256
 * @param isMintedByIpOwner bool
 */
export type LicenseRegistryVerifyMintLicenseTokenRequest = {
    licensorIpId: Address;
    licenseTemplate: Address;
    licenseTermsId: bigint;
    isMintedByIpOwner: boolean;
};
export type LicenseRegistryVerifyMintLicenseTokenResponse = {
    isSet: boolean;
    mintingFee: bigint;
    licensingHook: Address;
    hookData: Hex;
};
/**
 * LicenseRegistryAttachLicenseTermsToIpRequest
 *
 * @param ipId address
 * @param licenseTemplate address
 * @param licenseTermsId uint256
 */
export type LicenseRegistryAttachLicenseTermsToIpRequest = {
    ipId: Address;
    licenseTemplate: Address;
    licenseTermsId: bigint;
};
/**
 * LicenseRegistryInitializeRequest
 *
 * @param accessManager address
 */
export type LicenseRegistryInitializeRequest = {
    accessManager: Address;
};
/**
 * LicenseRegistryRegisterDerivativeIpRequest
 *
 * @param childIpId address
 * @param parentIpIds address[]
 * @param licenseTemplate address
 * @param licenseTermsIds uint256[]
 */
export type LicenseRegistryRegisterDerivativeIpRequest = {
    childIpId: Address;
    parentIpIds: readonly Address[];
    licenseTemplate: Address;
    licenseTermsIds: readonly bigint[];
};
/**
 * LicenseRegistryRegisterLicenseTemplateRequest
 *
 * @param licenseTemplate address
 */
export type LicenseRegistryRegisterLicenseTemplateRequest = {
    licenseTemplate: Address;
};
/**
 * LicenseRegistrySetAuthorityRequest
 *
 * @param newAuthority address
 */
export type LicenseRegistrySetAuthorityRequest = {
    newAuthority: Address;
};
/**
 * LicenseRegistrySetDefaultLicenseTermsRequest
 *
 * @param newLicenseTemplate address
 * @param newLicenseTermsId uint256
 */
export type LicenseRegistrySetDefaultLicenseTermsRequest = {
    newLicenseTemplate: Address;
    newLicenseTermsId: bigint;
};
/**
 * LicenseRegistrySetExpireTimeRequest
 *
 * @param ipId address
 * @param expireTime uint256
 */
export type LicenseRegistrySetExpireTimeRequest = {
    ipId: Address;
    expireTime: bigint;
};
/**
 * LicenseRegistrySetLicensingConfigForIpRequest
 *
 * @param ipId address
 * @param licensingConfig tuple
 */
export type LicenseRegistrySetLicensingConfigForIpRequest = {
    ipId: Address;
    licensingConfig: {
        isSet: boolean;
        mintingFee: bigint;
        licensingHook: Address;
        hookData: Hex;
    };
};
/**
 * LicenseRegistrySetLicensingConfigForLicenseRequest
 *
 * @param ipId address
 * @param licenseTemplate address
 * @param licenseTermsId uint256
 * @param licensingConfig tuple
 */
export type LicenseRegistrySetLicensingConfigForLicenseRequest = {
    ipId: Address;
    licenseTemplate: Address;
    licenseTermsId: bigint;
    licensingConfig: {
        isSet: boolean;
        mintingFee: bigint;
        licensingHook: Address;
        hookData: Hex;
    };
};
/**
 * LicenseRegistryUpgradeToAndCallRequest
 *
 * @param newImplementation address
 * @param data bytes
 */
export type LicenseRegistryUpgradeToAndCallRequest = {
    newImplementation: Address;
    data: Hex;
};
/**
 * contract LicenseRegistry event
 */
export declare class LicenseRegistryEventClient {
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * event AuthorityUpdated for contract LicenseRegistry
     */
    watchAuthorityUpdatedEvent(onLogs: (txHash: Hex, ev: Partial<LicenseRegistryAuthorityUpdatedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event AuthorityUpdated for contract LicenseRegistry
     */
    parseTxAuthorityUpdatedEvent(txReceipt: TransactionReceipt): Array<LicenseRegistryAuthorityUpdatedEvent>;
    /**
     * event ExpirationTimeSet for contract LicenseRegistry
     */
    watchExpirationTimeSetEvent(onLogs: (txHash: Hex, ev: Partial<LicenseRegistryExpirationTimeSetEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event ExpirationTimeSet for contract LicenseRegistry
     */
    parseTxExpirationTimeSetEvent(txReceipt: TransactionReceipt): Array<LicenseRegistryExpirationTimeSetEvent>;
    /**
     * event Initialized for contract LicenseRegistry
     */
    watchInitializedEvent(onLogs: (txHash: Hex, ev: Partial<LicenseRegistryInitializedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event Initialized for contract LicenseRegistry
     */
    parseTxInitializedEvent(txReceipt: TransactionReceipt): Array<LicenseRegistryInitializedEvent>;
    /**
     * event LicenseTemplateRegistered for contract LicenseRegistry
     */
    watchLicenseTemplateRegisteredEvent(onLogs: (txHash: Hex, ev: Partial<LicenseRegistryLicenseTemplateRegisteredEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event LicenseTemplateRegistered for contract LicenseRegistry
     */
    parseTxLicenseTemplateRegisteredEvent(txReceipt: TransactionReceipt): Array<LicenseRegistryLicenseTemplateRegisteredEvent>;
    /**
     * event LicensingConfigSetForIP for contract LicenseRegistry
     */
    watchLicensingConfigSetForIpEvent(onLogs: (txHash: Hex, ev: Partial<LicenseRegistryLicensingConfigSetForIpEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event LicensingConfigSetForIP for contract LicenseRegistry
     */
    parseTxLicensingConfigSetForIpEvent(txReceipt: TransactionReceipt): Array<LicenseRegistryLicensingConfigSetForIpEvent>;
    /**
     * event LicensingConfigSetForLicense for contract LicenseRegistry
     */
    watchLicensingConfigSetForLicenseEvent(onLogs: (txHash: Hex, ev: Partial<LicenseRegistryLicensingConfigSetForLicenseEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event LicensingConfigSetForLicense for contract LicenseRegistry
     */
    parseTxLicensingConfigSetForLicenseEvent(txReceipt: TransactionReceipt): Array<LicenseRegistryLicensingConfigSetForLicenseEvent>;
    /**
     * event Upgraded for contract LicenseRegistry
     */
    watchUpgradedEvent(onLogs: (txHash: Hex, ev: Partial<LicenseRegistryUpgradedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event Upgraded for contract LicenseRegistry
     */
    parseTxUpgradedEvent(txReceipt: TransactionReceipt): Array<LicenseRegistryUpgradedEvent>;
}
/**
 * contract LicenseRegistry readonly method
 */
export declare class LicenseRegistryReadOnlyClient extends LicenseRegistryEventClient {
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * method DISPUTE_MODULE for contract LicenseRegistry
     *
     * @param request LicenseRegistryDisputeModuleRequest
     * @return Promise<LicenseRegistryDisputeModuleResponse>
     */
    disputeModule(): Promise<LicenseRegistryDisputeModuleResponse>;
    /**
     * method EXPIRATION_TIME for contract LicenseRegistry
     *
     * @param request LicenseRegistryExpirationTimeRequest
     * @return Promise<LicenseRegistryExpirationTimeResponse>
     */
    expirationTime(): Promise<LicenseRegistryExpirationTimeResponse>;
    /**
     * method LICENSING_MODULE for contract LicenseRegistry
     *
     * @param request LicenseRegistryLicensingModuleRequest
     * @return Promise<LicenseRegistryLicensingModuleResponse>
     */
    licensingModule(): Promise<LicenseRegistryLicensingModuleResponse>;
    /**
     * method UPGRADE_INTERFACE_VERSION for contract LicenseRegistry
     *
     * @param request LicenseRegistryUpgradeInterfaceVersionRequest
     * @return Promise<LicenseRegistryUpgradeInterfaceVersionResponse>
     */
    upgradeInterfaceVersion(): Promise<LicenseRegistryUpgradeInterfaceVersionResponse>;
    /**
     * method authority for contract LicenseRegistry
     *
     * @param request LicenseRegistryAuthorityRequest
     * @return Promise<LicenseRegistryAuthorityResponse>
     */
    authority(): Promise<LicenseRegistryAuthorityResponse>;
    /**
     * method exists for contract LicenseRegistry
     *
     * @param request LicenseRegistryExistsRequest
     * @return Promise<LicenseRegistryExistsResponse>
     */
    exists(request: LicenseRegistryExistsRequest): Promise<LicenseRegistryExistsResponse>;
    /**
     * method getAttachedLicenseTerms for contract LicenseRegistry
     *
     * @param request LicenseRegistryGetAttachedLicenseTermsRequest
     * @return Promise<LicenseRegistryGetAttachedLicenseTermsResponse>
     */
    getAttachedLicenseTerms(request: LicenseRegistryGetAttachedLicenseTermsRequest): Promise<LicenseRegistryGetAttachedLicenseTermsResponse>;
    /**
     * method getAttachedLicenseTermsCount for contract LicenseRegistry
     *
     * @param request LicenseRegistryGetAttachedLicenseTermsCountRequest
     * @return Promise<LicenseRegistryGetAttachedLicenseTermsCountResponse>
     */
    getAttachedLicenseTermsCount(request: LicenseRegistryGetAttachedLicenseTermsCountRequest): Promise<LicenseRegistryGetAttachedLicenseTermsCountResponse>;
    /**
     * method getDefaultLicenseTerms for contract LicenseRegistry
     *
     * @param request LicenseRegistryGetDefaultLicenseTermsRequest
     * @return Promise<LicenseRegistryGetDefaultLicenseTermsResponse>
     */
    getDefaultLicenseTerms(): Promise<LicenseRegistryGetDefaultLicenseTermsResponse>;
    /**
     * method getDerivativeIp for contract LicenseRegistry
     *
     * @param request LicenseRegistryGetDerivativeIpRequest
     * @return Promise<LicenseRegistryGetDerivativeIpResponse>
     */
    getDerivativeIp(request: LicenseRegistryGetDerivativeIpRequest): Promise<LicenseRegistryGetDerivativeIpResponse>;
    /**
     * method getDerivativeIpCount for contract LicenseRegistry
     *
     * @param request LicenseRegistryGetDerivativeIpCountRequest
     * @return Promise<LicenseRegistryGetDerivativeIpCountResponse>
     */
    getDerivativeIpCount(request: LicenseRegistryGetDerivativeIpCountRequest): Promise<LicenseRegistryGetDerivativeIpCountResponse>;
    /**
     * method getExpireTime for contract LicenseRegistry
     *
     * @param request LicenseRegistryGetExpireTimeRequest
     * @return Promise<LicenseRegistryGetExpireTimeResponse>
     */
    getExpireTime(request: LicenseRegistryGetExpireTimeRequest): Promise<LicenseRegistryGetExpireTimeResponse>;
    /**
     * method getLicensingConfig for contract LicenseRegistry
     *
     * @param request LicenseRegistryGetLicensingConfigRequest
     * @return Promise<LicenseRegistryGetLicensingConfigResponse>
     */
    getLicensingConfig(request: LicenseRegistryGetLicensingConfigRequest): Promise<LicenseRegistryGetLicensingConfigResponse>;
    /**
     * method getParentIp for contract LicenseRegistry
     *
     * @param request LicenseRegistryGetParentIpRequest
     * @return Promise<LicenseRegistryGetParentIpResponse>
     */
    getParentIp(request: LicenseRegistryGetParentIpRequest): Promise<LicenseRegistryGetParentIpResponse>;
    /**
     * method getParentIpCount for contract LicenseRegistry
     *
     * @param request LicenseRegistryGetParentIpCountRequest
     * @return Promise<LicenseRegistryGetParentIpCountResponse>
     */
    getParentIpCount(request: LicenseRegistryGetParentIpCountRequest): Promise<LicenseRegistryGetParentIpCountResponse>;
    /**
     * method hasDerivativeIps for contract LicenseRegistry
     *
     * @param request LicenseRegistryHasDerivativeIpsRequest
     * @return Promise<LicenseRegistryHasDerivativeIpsResponse>
     */
    hasDerivativeIps(request: LicenseRegistryHasDerivativeIpsRequest): Promise<LicenseRegistryHasDerivativeIpsResponse>;
    /**
     * method hasIpAttachedLicenseTerms for contract LicenseRegistry
     *
     * @param request LicenseRegistryHasIpAttachedLicenseTermsRequest
     * @return Promise<LicenseRegistryHasIpAttachedLicenseTermsResponse>
     */
    hasIpAttachedLicenseTerms(request: LicenseRegistryHasIpAttachedLicenseTermsRequest): Promise<LicenseRegistryHasIpAttachedLicenseTermsResponse>;
    /**
     * method isConsumingScheduledOp for contract LicenseRegistry
     *
     * @param request LicenseRegistryIsConsumingScheduledOpRequest
     * @return Promise<LicenseRegistryIsConsumingScheduledOpResponse>
     */
    isConsumingScheduledOp(): Promise<LicenseRegistryIsConsumingScheduledOpResponse>;
    /**
     * method isDerivativeIp for contract LicenseRegistry
     *
     * @param request LicenseRegistryIsDerivativeIpRequest
     * @return Promise<LicenseRegistryIsDerivativeIpResponse>
     */
    isDerivativeIp(request: LicenseRegistryIsDerivativeIpRequest): Promise<LicenseRegistryIsDerivativeIpResponse>;
    /**
     * method isExpiredNow for contract LicenseRegistry
     *
     * @param request LicenseRegistryIsExpiredNowRequest
     * @return Promise<LicenseRegistryIsExpiredNowResponse>
     */
    isExpiredNow(request: LicenseRegistryIsExpiredNowRequest): Promise<LicenseRegistryIsExpiredNowResponse>;
    /**
     * method isParentIp for contract LicenseRegistry
     *
     * @param request LicenseRegistryIsParentIpRequest
     * @return Promise<LicenseRegistryIsParentIpResponse>
     */
    isParentIp(request: LicenseRegistryIsParentIpRequest): Promise<LicenseRegistryIsParentIpResponse>;
    /**
     * method isRegisteredLicenseTemplate for contract LicenseRegistry
     *
     * @param request LicenseRegistryIsRegisteredLicenseTemplateRequest
     * @return Promise<LicenseRegistryIsRegisteredLicenseTemplateResponse>
     */
    isRegisteredLicenseTemplate(request: LicenseRegistryIsRegisteredLicenseTemplateRequest): Promise<LicenseRegistryIsRegisteredLicenseTemplateResponse>;
    /**
     * method proxiableUUID for contract LicenseRegistry
     *
     * @param request LicenseRegistryProxiableUuidRequest
     * @return Promise<LicenseRegistryProxiableUuidResponse>
     */
    proxiableUuid(): Promise<LicenseRegistryProxiableUuidResponse>;
    /**
     * method verifyMintLicenseToken for contract LicenseRegistry
     *
     * @param request LicenseRegistryVerifyMintLicenseTokenRequest
     * @return Promise<LicenseRegistryVerifyMintLicenseTokenResponse>
     */
    verifyMintLicenseToken(request: LicenseRegistryVerifyMintLicenseTokenRequest): Promise<LicenseRegistryVerifyMintLicenseTokenResponse>;
}
/**
 * contract LicenseRegistry write method
 */
export declare class LicenseRegistryClient extends LicenseRegistryReadOnlyClient {
    protected readonly wallet: SimpleWalletClient;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, address?: Address);
    /**
     * method attachLicenseTermsToIp for contract LicenseRegistry
     *
     * @param request LicenseRegistryAttachLicenseTermsToIpRequest
     * @return Promise<WriteContractReturnType>
     */
    attachLicenseTermsToIp(request: LicenseRegistryAttachLicenseTermsToIpRequest): Promise<WriteContractReturnType>;
    /**
     * method initialize for contract LicenseRegistry
     *
     * @param request LicenseRegistryInitializeRequest
     * @return Promise<WriteContractReturnType>
     */
    initialize(request: LicenseRegistryInitializeRequest): Promise<WriteContractReturnType>;
    /**
     * method registerDerivativeIp for contract LicenseRegistry
     *
     * @param request LicenseRegistryRegisterDerivativeIpRequest
     * @return Promise<WriteContractReturnType>
     */
    registerDerivativeIp(request: LicenseRegistryRegisterDerivativeIpRequest): Promise<WriteContractReturnType>;
    /**
     * method registerLicenseTemplate for contract LicenseRegistry
     *
     * @param request LicenseRegistryRegisterLicenseTemplateRequest
     * @return Promise<WriteContractReturnType>
     */
    registerLicenseTemplate(request: LicenseRegistryRegisterLicenseTemplateRequest): Promise<WriteContractReturnType>;
    /**
     * method setAuthority for contract LicenseRegistry
     *
     * @param request LicenseRegistrySetAuthorityRequest
     * @return Promise<WriteContractReturnType>
     */
    setAuthority(request: LicenseRegistrySetAuthorityRequest): Promise<WriteContractReturnType>;
    /**
     * method setDefaultLicenseTerms for contract LicenseRegistry
     *
     * @param request LicenseRegistrySetDefaultLicenseTermsRequest
     * @return Promise<WriteContractReturnType>
     */
    setDefaultLicenseTerms(request: LicenseRegistrySetDefaultLicenseTermsRequest): Promise<WriteContractReturnType>;
    /**
     * method setExpireTime for contract LicenseRegistry
     *
     * @param request LicenseRegistrySetExpireTimeRequest
     * @return Promise<WriteContractReturnType>
     */
    setExpireTime(request: LicenseRegistrySetExpireTimeRequest): Promise<WriteContractReturnType>;
    /**
     * method setLicensingConfigForIp for contract LicenseRegistry
     *
     * @param request LicenseRegistrySetLicensingConfigForIpRequest
     * @return Promise<WriteContractReturnType>
     */
    setLicensingConfigForIp(request: LicenseRegistrySetLicensingConfigForIpRequest): Promise<WriteContractReturnType>;
    /**
     * method setLicensingConfigForLicense for contract LicenseRegistry
     *
     * @param request LicenseRegistrySetLicensingConfigForLicenseRequest
     * @return Promise<WriteContractReturnType>
     */
    setLicensingConfigForLicense(request: LicenseRegistrySetLicensingConfigForLicenseRequest): Promise<WriteContractReturnType>;
    /**
     * method upgradeToAndCall for contract LicenseRegistry
     *
     * @param request LicenseRegistryUpgradeToAndCallRequest
     * @return Promise<WriteContractReturnType>
     */
    upgradeToAndCall(request: LicenseRegistryUpgradeToAndCallRequest): Promise<WriteContractReturnType>;
}
/**
 * LicenseTokenOwnerOfRequest
 *
 * @param tokenId uint256
 */
export type LicenseTokenOwnerOfRequest = {
    tokenId: bigint;
};
export type LicenseTokenOwnerOfResponse = Address;
/**
 * contract LicenseToken readonly method
 */
export declare class LicenseTokenReadOnlyClient {
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * method ownerOf for contract LicenseToken
     *
     * @param request LicenseTokenOwnerOfRequest
     * @return Promise<LicenseTokenOwnerOfResponse>
     */
    ownerOf(request: LicenseTokenOwnerOfRequest): Promise<LicenseTokenOwnerOfResponse>;
}
/**
 * LicensingModuleLicenseTermsAttachedEvent
 *
 * @param caller address
 * @param ipId address
 * @param licenseTemplate address
 * @param licenseTermsId uint256
 */
export type LicensingModuleLicenseTermsAttachedEvent = {
    caller: Address;
    ipId: Address;
    licenseTemplate: Address;
    licenseTermsId: bigint;
};
/**
 * LicensingModuleLicenseTokensMintedEvent
 *
 * @param caller address
 * @param licensorIpId address
 * @param licenseTemplate address
 * @param licenseTermsId uint256
 * @param amount uint256
 * @param receiver address
 * @param startLicenseTokenId uint256
 */
export type LicensingModuleLicenseTokensMintedEvent = {
    caller: Address;
    licensorIpId: Address;
    licenseTemplate: Address;
    licenseTermsId: bigint;
    amount: bigint;
    receiver: Address;
    startLicenseTokenId: bigint;
};
/**
 * LicensingModuleAttachLicenseTermsRequest
 *
 * @param ipId address
 * @param licenseTemplate address
 * @param licenseTermsId uint256
 */
export type LicensingModuleAttachLicenseTermsRequest = {
    ipId: Address;
    licenseTemplate: Address;
    licenseTermsId: bigint;
};
/**
 * LicensingModuleMintLicenseTokensRequest
 *
 * @param licensorIpId address
 * @param licenseTemplate address
 * @param licenseTermsId uint256
 * @param amount uint256
 * @param receiver address
 * @param royaltyContext bytes
 */
export type LicensingModuleMintLicenseTokensRequest = {
    licensorIpId: Address;
    licenseTemplate: Address;
    licenseTermsId: bigint;
    amount: bigint;
    receiver: Address;
    royaltyContext: Hex;
};
/**
 * LicensingModuleRegisterDerivativeRequest
 *
 * @param childIpId address
 * @param parentIpIds address[]
 * @param licenseTermsIds uint256[]
 * @param licenseTemplate address
 * @param royaltyContext bytes
 */
export type LicensingModuleRegisterDerivativeRequest = {
    childIpId: Address;
    parentIpIds: readonly Address[];
    licenseTermsIds: readonly bigint[];
    licenseTemplate: Address;
    royaltyContext: Hex;
};
/**
 * LicensingModuleRegisterDerivativeWithLicenseTokensRequest
 *
 * @param childIpId address
 * @param licenseTokenIds uint256[]
 * @param royaltyContext bytes
 */
export type LicensingModuleRegisterDerivativeWithLicenseTokensRequest = {
    childIpId: Address;
    licenseTokenIds: readonly bigint[];
    royaltyContext: Hex;
};
/**
 * contract LicensingModule event
 */
export declare class LicensingModuleEventClient {
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * event LicenseTermsAttached for contract LicensingModule
     */
    watchLicenseTermsAttachedEvent(onLogs: (txHash: Hex, ev: Partial<LicensingModuleLicenseTermsAttachedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event LicenseTermsAttached for contract LicensingModule
     */
    parseTxLicenseTermsAttachedEvent(txReceipt: TransactionReceipt): Array<LicensingModuleLicenseTermsAttachedEvent>;
    /**
     * event LicenseTokensMinted for contract LicensingModule
     */
    watchLicenseTokensMintedEvent(onLogs: (txHash: Hex, ev: Partial<LicensingModuleLicenseTokensMintedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event LicenseTokensMinted for contract LicensingModule
     */
    parseTxLicenseTokensMintedEvent(txReceipt: TransactionReceipt): Array<LicensingModuleLicenseTokensMintedEvent>;
}
/**
 * contract LicensingModule write method
 */
export declare class LicensingModuleClient extends LicensingModuleEventClient {
    protected readonly wallet: SimpleWalletClient;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, address?: Address);
    /**
     * method attachLicenseTerms for contract LicensingModule
     *
     * @param request LicensingModuleAttachLicenseTermsRequest
     * @return Promise<WriteContractReturnType>
     */
    attachLicenseTerms(request: LicensingModuleAttachLicenseTermsRequest): Promise<WriteContractReturnType>;
    /**
     * method mintLicenseTokens for contract LicensingModule
     *
     * @param request LicensingModuleMintLicenseTokensRequest
     * @return Promise<WriteContractReturnType>
     */
    mintLicenseTokens(request: LicensingModuleMintLicenseTokensRequest): Promise<WriteContractReturnType>;
    /**
     * method registerDerivative for contract LicensingModule
     *
     * @param request LicensingModuleRegisterDerivativeRequest
     * @return Promise<WriteContractReturnType>
     */
    registerDerivative(request: LicensingModuleRegisterDerivativeRequest): Promise<WriteContractReturnType>;
    /**
     * method registerDerivativeWithLicenseTokens for contract LicensingModule
     *
     * @param request LicensingModuleRegisterDerivativeWithLicenseTokensRequest
     * @return Promise<WriteContractReturnType>
     */
    registerDerivativeWithLicenseTokens(request: LicensingModuleRegisterDerivativeWithLicenseTokensRequest): Promise<WriteContractReturnType>;
}
/**
 * ModuleRegistryIsRegisteredRequest
 *
 * @param moduleAddress address
 */
export type ModuleRegistryIsRegisteredRequest = {
    moduleAddress: Address;
};
export type ModuleRegistryIsRegisteredResponse = boolean;
/**
 * contract ModuleRegistry readonly method
 */
export declare class ModuleRegistryReadOnlyClient {
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * method isRegistered for contract ModuleRegistry
     *
     * @param request ModuleRegistryIsRegisteredRequest
     * @return Promise<ModuleRegistryIsRegisteredResponse>
     */
    isRegistered(request: ModuleRegistryIsRegisteredRequest): Promise<ModuleRegistryIsRegisteredResponse>;
}
/**
 * PiLicenseTemplateAuthorityUpdatedEvent
 *
 * @param authority address
 */
export type PiLicenseTemplateAuthorityUpdatedEvent = {
    authority: Address;
};
/**
 * PiLicenseTemplateDerivativeApprovedEvent
 *
 * @param licenseTermsId uint256
 * @param ipId address
 * @param caller address
 * @param approved bool
 */
export type PiLicenseTemplateDerivativeApprovedEvent = {
    licenseTermsId: bigint;
    ipId: Address;
    caller: Address;
    approved: boolean;
};
/**
 * PiLicenseTemplateInitializedEvent
 *
 * @param version uint64
 */
export type PiLicenseTemplateInitializedEvent = {
    version: bigint;
};
/**
 * PiLicenseTemplateLicenseTermsRegisteredEvent
 *
 * @param licenseTermsId uint256
 * @param licenseTemplate address
 * @param licenseTerms bytes
 */
export type PiLicenseTemplateLicenseTermsRegisteredEvent = {
    licenseTermsId: bigint;
    licenseTemplate: Address;
    licenseTerms: Hex;
};
/**
 * PiLicenseTemplateUpgradedEvent
 *
 * @param implementation address
 */
export type PiLicenseTemplateUpgradedEvent = {
    implementation: Address;
};
export type PiLicenseTemplateAccessControllerResponse = Address;
export type PiLicenseTemplateIpAccountRegistryResponse = Address;
export type PiLicenseTemplateLicenseRegistryResponse = Address;
export type PiLicenseTemplateRoyaltyModuleResponse = Address;
export type PiLicenseTemplateUpgradeInterfaceVersionResponse = string;
export type PiLicenseTemplateAuthorityResponse = Address;
/**
 * PiLicenseTemplateExistsRequest
 *
 * @param licenseTermsId uint256
 */
export type PiLicenseTemplateExistsRequest = {
    licenseTermsId: bigint;
};
export type PiLicenseTemplateExistsResponse = boolean;
/**
 * PiLicenseTemplateGetEarlierExpireTimeRequest
 *
 * @param licenseTermsIds uint256[]
 * @param start uint256
 */
export type PiLicenseTemplateGetEarlierExpireTimeRequest = {
    licenseTermsIds: readonly bigint[];
    start: bigint;
};
export type PiLicenseTemplateGetEarlierExpireTimeResponse = bigint;
/**
 * PiLicenseTemplateGetExpireTimeRequest
 *
 * @param licenseTermsId uint256
 * @param start uint256
 */
export type PiLicenseTemplateGetExpireTimeRequest = {
    licenseTermsId: bigint;
    start: bigint;
};
export type PiLicenseTemplateGetExpireTimeResponse = bigint;
/**
 * PiLicenseTemplateGetLicenseTermsRequest
 *
 * @param selectedLicenseTermsId uint256
 */
export type PiLicenseTemplateGetLicenseTermsRequest = {
    selectedLicenseTermsId: bigint;
};
/**
 * PiLicenseTemplateGetLicenseTermsResponse
 *
 * @param terms tuple
 */
export type PiLicenseTemplateGetLicenseTermsResponse = {
    terms: {
        transferable: boolean;
        royaltyPolicy: Address;
        mintingFee: bigint;
        expiration: bigint;
        commercialUse: boolean;
        commercialAttribution: boolean;
        commercializerChecker: Address;
        commercializerCheckerData: Hex;
        commercialRevShare: number;
        commercialRevCelling: bigint;
        derivativesAllowed: boolean;
        derivativesAttribution: boolean;
        derivativesApproval: boolean;
        derivativesReciprocal: boolean;
        derivativeRevCelling: bigint;
        currency: Address;
        uri: string;
    };
};
/**
 * PiLicenseTemplateGetLicenseTermsIdRequest
 *
 * @param terms tuple
 */
export type PiLicenseTemplateGetLicenseTermsIdRequest = {
    terms: {
        transferable: boolean;
        royaltyPolicy: Address;
        mintingFee: bigint;
        expiration: bigint;
        commercialUse: boolean;
        commercialAttribution: boolean;
        commercializerChecker: Address;
        commercializerCheckerData: Hex;
        commercialRevShare: number;
        commercialRevCelling: bigint;
        derivativesAllowed: boolean;
        derivativesAttribution: boolean;
        derivativesApproval: boolean;
        derivativesReciprocal: boolean;
        derivativeRevCelling: bigint;
        currency: Address;
        uri: string;
    };
};
/**
 * PiLicenseTemplateGetLicenseTermsIdResponse
 *
 * @param selectedLicenseTermsId uint256
 */
export type PiLicenseTemplateGetLicenseTermsIdResponse = {
    selectedLicenseTermsId: bigint;
};
/**
 * PiLicenseTemplateGetLicenseTermsUriRequest
 *
 * @param licenseTermsId uint256
 */
export type PiLicenseTemplateGetLicenseTermsUriRequest = {
    licenseTermsId: bigint;
};
export type PiLicenseTemplateGetLicenseTermsUriResponse = string;
export type PiLicenseTemplateGetMetadataUriResponse = string;
/**
 * PiLicenseTemplateGetRoyaltyPolicyRequest
 *
 * @param licenseTermsId uint256
 */
export type PiLicenseTemplateGetRoyaltyPolicyRequest = {
    licenseTermsId: bigint;
};
/**
 * PiLicenseTemplateGetRoyaltyPolicyResponse
 *
 * @param royaltyPolicy address
 * @param royaltyData bytes
 * @param mintingFee uint256
 * @param currency address
 */
export type PiLicenseTemplateGetRoyaltyPolicyResponse = {
    royaltyPolicy: Address;
    royaltyData: Hex;
    mintingFee: bigint;
    currency: Address;
};
export type PiLicenseTemplateIsConsumingScheduledOpResponse = Hex;
/**
 * PiLicenseTemplateIsDerivativeApprovedRequest
 *
 * @param parentIpId address
 * @param licenseTermsId uint256
 * @param childIpId address
 */
export type PiLicenseTemplateIsDerivativeApprovedRequest = {
    parentIpId: Address;
    licenseTermsId: bigint;
    childIpId: Address;
};
export type PiLicenseTemplateIsDerivativeApprovedResponse = boolean;
/**
 * PiLicenseTemplateIsLicenseTransferableRequest
 *
 * @param licenseTermsId uint256
 */
export type PiLicenseTemplateIsLicenseTransferableRequest = {
    licenseTermsId: bigint;
};
export type PiLicenseTemplateIsLicenseTransferableResponse = boolean;
export type PiLicenseTemplateNameResponse = string;
export type PiLicenseTemplateProxiableUuidResponse = Hex;
/**
 * PiLicenseTemplateSupportsInterfaceRequest
 *
 * @param interfaceId bytes4
 */
export type PiLicenseTemplateSupportsInterfaceRequest = {
    interfaceId: Hex;
};
export type PiLicenseTemplateSupportsInterfaceResponse = boolean;
/**
 * PiLicenseTemplateToJsonRequest
 *
 * @param licenseTermsId uint256
 */
export type PiLicenseTemplateToJsonRequest = {
    licenseTermsId: bigint;
};
export type PiLicenseTemplateToJsonResponse = string;
export type PiLicenseTemplateTotalRegisteredLicenseTermsResponse = bigint;
/**
 * PiLicenseTemplateVerifyCompatibleLicensesRequest
 *
 * @param licenseTermsIds uint256[]
 */
export type PiLicenseTemplateVerifyCompatibleLicensesRequest = {
    licenseTermsIds: readonly bigint[];
};
export type PiLicenseTemplateVerifyCompatibleLicensesResponse = boolean;
/**
 * PiLicenseTemplateInitializeRequest
 *
 * @param accessManager address
 * @param name string
 * @param metadataURI string
 */
export type PiLicenseTemplateInitializeRequest = {
    accessManager: Address;
    name: string;
    metadataURI: string;
};
/**
 * PiLicenseTemplateRegisterLicenseTermsRequest
 *
 * @param terms tuple
 */
export type PiLicenseTemplateRegisterLicenseTermsRequest = {
    terms: {
        transferable: boolean;
        royaltyPolicy: Address;
        mintingFee: bigint;
        expiration: bigint;
        commercialUse: boolean;
        commercialAttribution: boolean;
        commercializerChecker: Address;
        commercializerCheckerData: Hex;
        commercialRevShare: number;
        commercialRevCelling: bigint;
        derivativesAllowed: boolean;
        derivativesAttribution: boolean;
        derivativesApproval: boolean;
        derivativesReciprocal: boolean;
        derivativeRevCelling: bigint;
        currency: Address;
        uri: string;
    };
};
/**
 * PiLicenseTemplateSetApprovalRequest
 *
 * @param parentIpId address
 * @param licenseTermsId uint256
 * @param childIpId address
 * @param approved bool
 */
export type PiLicenseTemplateSetApprovalRequest = {
    parentIpId: Address;
    licenseTermsId: bigint;
    childIpId: Address;
    approved: boolean;
};
/**
 * PiLicenseTemplateSetAuthorityRequest
 *
 * @param newAuthority address
 */
export type PiLicenseTemplateSetAuthorityRequest = {
    newAuthority: Address;
};
/**
 * PiLicenseTemplateUpgradeToAndCallRequest
 *
 * @param newImplementation address
 * @param data bytes
 */
export type PiLicenseTemplateUpgradeToAndCallRequest = {
    newImplementation: Address;
    data: Hex;
};
/**
 * PiLicenseTemplateVerifyMintLicenseTokenRequest
 *
 * @param 0 uint256
 * @param 1 address
 * @param 2 address
 * @param 3 uint256
 */
export type PiLicenseTemplateVerifyMintLicenseTokenRequest = readonly [
    bigint,
    Address,
    Address,
    bigint
];
/**
 * PiLicenseTemplateVerifyRegisterDerivativeRequest
 *
 * @param childIpId address
 * @param parentIpId address
 * @param licenseTermsId uint256
 * @param licensee address
 */
export type PiLicenseTemplateVerifyRegisterDerivativeRequest = {
    childIpId: Address;
    parentIpId: Address;
    licenseTermsId: bigint;
    licensee: Address;
};
/**
 * PiLicenseTemplateVerifyRegisterDerivativeForAllParentsRequest
 *
 * @param childIpId address
 * @param parentIpIds address[]
 * @param licenseTermsIds uint256[]
 * @param childIpOwner address
 */
export type PiLicenseTemplateVerifyRegisterDerivativeForAllParentsRequest = {
    childIpId: Address;
    parentIpIds: readonly Address[];
    licenseTermsIds: readonly bigint[];
    childIpOwner: Address;
};
/**
 * contract PILicenseTemplate event
 */
export declare class PiLicenseTemplateEventClient {
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * event AuthorityUpdated for contract PILicenseTemplate
     */
    watchAuthorityUpdatedEvent(onLogs: (txHash: Hex, ev: Partial<PiLicenseTemplateAuthorityUpdatedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event AuthorityUpdated for contract PILicenseTemplate
     */
    parseTxAuthorityUpdatedEvent(txReceipt: TransactionReceipt): Array<PiLicenseTemplateAuthorityUpdatedEvent>;
    /**
     * event DerivativeApproved for contract PILicenseTemplate
     */
    watchDerivativeApprovedEvent(onLogs: (txHash: Hex, ev: Partial<PiLicenseTemplateDerivativeApprovedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event DerivativeApproved for contract PILicenseTemplate
     */
    parseTxDerivativeApprovedEvent(txReceipt: TransactionReceipt): Array<PiLicenseTemplateDerivativeApprovedEvent>;
    /**
     * event Initialized for contract PILicenseTemplate
     */
    watchInitializedEvent(onLogs: (txHash: Hex, ev: Partial<PiLicenseTemplateInitializedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event Initialized for contract PILicenseTemplate
     */
    parseTxInitializedEvent(txReceipt: TransactionReceipt): Array<PiLicenseTemplateInitializedEvent>;
    /**
     * event LicenseTermsRegistered for contract PILicenseTemplate
     */
    watchLicenseTermsRegisteredEvent(onLogs: (txHash: Hex, ev: Partial<PiLicenseTemplateLicenseTermsRegisteredEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event LicenseTermsRegistered for contract PILicenseTemplate
     */
    parseTxLicenseTermsRegisteredEvent(txReceipt: TransactionReceipt): Array<PiLicenseTemplateLicenseTermsRegisteredEvent>;
    /**
     * event Upgraded for contract PILicenseTemplate
     */
    watchUpgradedEvent(onLogs: (txHash: Hex, ev: Partial<PiLicenseTemplateUpgradedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event Upgraded for contract PILicenseTemplate
     */
    parseTxUpgradedEvent(txReceipt: TransactionReceipt): Array<PiLicenseTemplateUpgradedEvent>;
}
/**
 * contract PILicenseTemplate readonly method
 */
export declare class PiLicenseTemplateReadOnlyClient extends PiLicenseTemplateEventClient {
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * method ACCESS_CONTROLLER for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateAccessControllerRequest
     * @return Promise<PiLicenseTemplateAccessControllerResponse>
     */
    accessController(): Promise<PiLicenseTemplateAccessControllerResponse>;
    /**
     * method IP_ACCOUNT_REGISTRY for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateIpAccountRegistryRequest
     * @return Promise<PiLicenseTemplateIpAccountRegistryResponse>
     */
    ipAccountRegistry(): Promise<PiLicenseTemplateIpAccountRegistryResponse>;
    /**
     * method LICENSE_REGISTRY for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateLicenseRegistryRequest
     * @return Promise<PiLicenseTemplateLicenseRegistryResponse>
     */
    licenseRegistry(): Promise<PiLicenseTemplateLicenseRegistryResponse>;
    /**
     * method ROYALTY_MODULE for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateRoyaltyModuleRequest
     * @return Promise<PiLicenseTemplateRoyaltyModuleResponse>
     */
    royaltyModule(): Promise<PiLicenseTemplateRoyaltyModuleResponse>;
    /**
     * method UPGRADE_INTERFACE_VERSION for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateUpgradeInterfaceVersionRequest
     * @return Promise<PiLicenseTemplateUpgradeInterfaceVersionResponse>
     */
    upgradeInterfaceVersion(): Promise<PiLicenseTemplateUpgradeInterfaceVersionResponse>;
    /**
     * method authority for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateAuthorityRequest
     * @return Promise<PiLicenseTemplateAuthorityResponse>
     */
    authority(): Promise<PiLicenseTemplateAuthorityResponse>;
    /**
     * method exists for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateExistsRequest
     * @return Promise<PiLicenseTemplateExistsResponse>
     */
    exists(request: PiLicenseTemplateExistsRequest): Promise<PiLicenseTemplateExistsResponse>;
    /**
     * method getEarlierExpireTime for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateGetEarlierExpireTimeRequest
     * @return Promise<PiLicenseTemplateGetEarlierExpireTimeResponse>
     */
    getEarlierExpireTime(request: PiLicenseTemplateGetEarlierExpireTimeRequest): Promise<PiLicenseTemplateGetEarlierExpireTimeResponse>;
    /**
     * method getExpireTime for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateGetExpireTimeRequest
     * @return Promise<PiLicenseTemplateGetExpireTimeResponse>
     */
    getExpireTime(request: PiLicenseTemplateGetExpireTimeRequest): Promise<PiLicenseTemplateGetExpireTimeResponse>;
    /**
     * method getLicenseTerms for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateGetLicenseTermsRequest
     * @return Promise<PiLicenseTemplateGetLicenseTermsResponse>
     */
    getLicenseTerms(request: PiLicenseTemplateGetLicenseTermsRequest): Promise<PiLicenseTemplateGetLicenseTermsResponse>;
    /**
     * method getLicenseTermsId for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateGetLicenseTermsIdRequest
     * @return Promise<PiLicenseTemplateGetLicenseTermsIdResponse>
     */
    getLicenseTermsId(request: PiLicenseTemplateGetLicenseTermsIdRequest): Promise<PiLicenseTemplateGetLicenseTermsIdResponse>;
    /**
     * method getLicenseTermsURI for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateGetLicenseTermsUriRequest
     * @return Promise<PiLicenseTemplateGetLicenseTermsUriResponse>
     */
    getLicenseTermsUri(request: PiLicenseTemplateGetLicenseTermsUriRequest): Promise<PiLicenseTemplateGetLicenseTermsUriResponse>;
    /**
     * method getMetadataURI for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateGetMetadataUriRequest
     * @return Promise<PiLicenseTemplateGetMetadataUriResponse>
     */
    getMetadataUri(): Promise<PiLicenseTemplateGetMetadataUriResponse>;
    /**
     * method getRoyaltyPolicy for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateGetRoyaltyPolicyRequest
     * @return Promise<PiLicenseTemplateGetRoyaltyPolicyResponse>
     */
    getRoyaltyPolicy(request: PiLicenseTemplateGetRoyaltyPolicyRequest): Promise<PiLicenseTemplateGetRoyaltyPolicyResponse>;
    /**
     * method isConsumingScheduledOp for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateIsConsumingScheduledOpRequest
     * @return Promise<PiLicenseTemplateIsConsumingScheduledOpResponse>
     */
    isConsumingScheduledOp(): Promise<PiLicenseTemplateIsConsumingScheduledOpResponse>;
    /**
     * method isDerivativeApproved for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateIsDerivativeApprovedRequest
     * @return Promise<PiLicenseTemplateIsDerivativeApprovedResponse>
     */
    isDerivativeApproved(request: PiLicenseTemplateIsDerivativeApprovedRequest): Promise<PiLicenseTemplateIsDerivativeApprovedResponse>;
    /**
     * method isLicenseTransferable for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateIsLicenseTransferableRequest
     * @return Promise<PiLicenseTemplateIsLicenseTransferableResponse>
     */
    isLicenseTransferable(request: PiLicenseTemplateIsLicenseTransferableRequest): Promise<PiLicenseTemplateIsLicenseTransferableResponse>;
    /**
     * method name for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateNameRequest
     * @return Promise<PiLicenseTemplateNameResponse>
     */
    name(): Promise<PiLicenseTemplateNameResponse>;
    /**
     * method proxiableUUID for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateProxiableUuidRequest
     * @return Promise<PiLicenseTemplateProxiableUuidResponse>
     */
    proxiableUuid(): Promise<PiLicenseTemplateProxiableUuidResponse>;
    /**
     * method supportsInterface for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateSupportsInterfaceRequest
     * @return Promise<PiLicenseTemplateSupportsInterfaceResponse>
     */
    supportsInterface(request: PiLicenseTemplateSupportsInterfaceRequest): Promise<PiLicenseTemplateSupportsInterfaceResponse>;
    /**
     * method toJson for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateToJsonRequest
     * @return Promise<PiLicenseTemplateToJsonResponse>
     */
    toJson(request: PiLicenseTemplateToJsonRequest): Promise<PiLicenseTemplateToJsonResponse>;
    /**
     * method totalRegisteredLicenseTerms for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateTotalRegisteredLicenseTermsRequest
     * @return Promise<PiLicenseTemplateTotalRegisteredLicenseTermsResponse>
     */
    totalRegisteredLicenseTerms(): Promise<PiLicenseTemplateTotalRegisteredLicenseTermsResponse>;
    /**
     * method verifyCompatibleLicenses for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateVerifyCompatibleLicensesRequest
     * @return Promise<PiLicenseTemplateVerifyCompatibleLicensesResponse>
     */
    verifyCompatibleLicenses(request: PiLicenseTemplateVerifyCompatibleLicensesRequest): Promise<PiLicenseTemplateVerifyCompatibleLicensesResponse>;
}
/**
 * contract PILicenseTemplate write method
 */
export declare class PiLicenseTemplateClient extends PiLicenseTemplateReadOnlyClient {
    protected readonly wallet: SimpleWalletClient;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, address?: Address);
    /**
     * method initialize for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateInitializeRequest
     * @return Promise<WriteContractReturnType>
     */
    initialize(request: PiLicenseTemplateInitializeRequest): Promise<WriteContractReturnType>;
    /**
     * method registerLicenseTerms for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateRegisterLicenseTermsRequest
     * @return Promise<WriteContractReturnType>
     */
    registerLicenseTerms(request: PiLicenseTemplateRegisterLicenseTermsRequest): Promise<WriteContractReturnType>;
    /**
     * method setApproval for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateSetApprovalRequest
     * @return Promise<WriteContractReturnType>
     */
    setApproval(request: PiLicenseTemplateSetApprovalRequest): Promise<WriteContractReturnType>;
    /**
     * method setAuthority for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateSetAuthorityRequest
     * @return Promise<WriteContractReturnType>
     */
    setAuthority(request: PiLicenseTemplateSetAuthorityRequest): Promise<WriteContractReturnType>;
    /**
     * method upgradeToAndCall for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateUpgradeToAndCallRequest
     * @return Promise<WriteContractReturnType>
     */
    upgradeToAndCall(request: PiLicenseTemplateUpgradeToAndCallRequest): Promise<WriteContractReturnType>;
    /**
     * method verifyMintLicenseToken for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateVerifyMintLicenseTokenRequest
     * @return Promise<WriteContractReturnType>
     */
    verifyMintLicenseToken(request: PiLicenseTemplateVerifyMintLicenseTokenRequest): Promise<WriteContractReturnType>;
    /**
     * method verifyRegisterDerivative for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateVerifyRegisterDerivativeRequest
     * @return Promise<WriteContractReturnType>
     */
    verifyRegisterDerivative(request: PiLicenseTemplateVerifyRegisterDerivativeRequest): Promise<WriteContractReturnType>;
    /**
     * method verifyRegisterDerivativeForAllParents for contract PILicenseTemplate
     *
     * @param request PiLicenseTemplateVerifyRegisterDerivativeForAllParentsRequest
     * @return Promise<WriteContractReturnType>
     */
    verifyRegisterDerivativeForAllParents(request: PiLicenseTemplateVerifyRegisterDerivativeForAllParentsRequest): Promise<WriteContractReturnType>;
}
/**
 * RoyaltyModulePayRoyaltyOnBehalfRequest
 *
 * @param receiverIpId address
 * @param payerIpId address
 * @param token address
 * @param amount uint256
 */
export type RoyaltyModulePayRoyaltyOnBehalfRequest = {
    receiverIpId: Address;
    payerIpId: Address;
    token: Address;
    amount: bigint;
};
/**
 * contract RoyaltyModule write method
 */
export declare class RoyaltyModuleClient {
    protected readonly wallet: SimpleWalletClient;
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, address?: Address);
    /**
     * method payRoyaltyOnBehalf for contract RoyaltyModule
     *
     * @param request RoyaltyModulePayRoyaltyOnBehalfRequest
     * @return Promise<WriteContractReturnType>
     */
    payRoyaltyOnBehalf(request: RoyaltyModulePayRoyaltyOnBehalfRequest): Promise<WriteContractReturnType>;
}
/**
 * RoyaltyPolicyLapGetRoyaltyDataRequest
 *
 * @param ipId address
 */
export type RoyaltyPolicyLapGetRoyaltyDataRequest = {
    ipId: Address;
};
/**
 * RoyaltyPolicyLapGetRoyaltyDataResponse
 *
 * @param 0 bool
 * @param 1 address
 * @param 2 uint32
 * @param 3 address[]
 * @param 4 uint32[]
 */
export type RoyaltyPolicyLapGetRoyaltyDataResponse = readonly [
    boolean,
    Address,
    number,
    readonly Address[],
    readonly number[]
];
/**
 * RoyaltyPolicyLapOnRoyaltyPaymentRequest
 *
 * @param caller address
 * @param ipId address
 * @param token address
 * @param amount uint256
 */
export type RoyaltyPolicyLapOnRoyaltyPaymentRequest = {
    caller: Address;
    ipId: Address;
    token: Address;
    amount: bigint;
};
/**
 * contract RoyaltyPolicyLAP readonly method
 */
export declare class RoyaltyPolicyLapReadOnlyClient {
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * method getRoyaltyData for contract RoyaltyPolicyLAP
     *
     * @param request RoyaltyPolicyLapGetRoyaltyDataRequest
     * @return Promise<RoyaltyPolicyLapGetRoyaltyDataResponse>
     */
    getRoyaltyData(request: RoyaltyPolicyLapGetRoyaltyDataRequest): Promise<RoyaltyPolicyLapGetRoyaltyDataResponse>;
}
/**
 * contract RoyaltyPolicyLAP write method
 */
export declare class RoyaltyPolicyLapClient extends RoyaltyPolicyLapReadOnlyClient {
    protected readonly wallet: SimpleWalletClient;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, address?: Address);
    /**
     * method onRoyaltyPayment for contract RoyaltyPolicyLAP
     *
     * @param request RoyaltyPolicyLapOnRoyaltyPaymentRequest
     * @return Promise<WriteContractReturnType>
     */
    onRoyaltyPayment(request: RoyaltyPolicyLapOnRoyaltyPaymentRequest): Promise<WriteContractReturnType>;
}
/**
 * SpgCollectionCreatedEvent
 *
 * @param nftContract address
 */
export type SpgCollectionCreatedEvent = {
    nftContract: Address;
};
/**
 * SpgCreateCollectionRequest
 *
 * @param name string
 * @param symbol string
 * @param maxSupply uint32
 * @param mintCost uint256
 * @param mintToken address
 * @param owner address
 */
export type SpgCreateCollectionRequest = {
    name: string;
    symbol: string;
    maxSupply: number;
    mintCost: bigint;
    mintToken: Address;
    owner: Address;
};
/**
 * SpgMintAndRegisterIpRequest
 *
 * @param nftContract address
 * @param recipient address
 * @param metadata tuple
 */
export type SpgMintAndRegisterIpRequest = {
    nftContract: Address;
    recipient: Address;
    metadata: {
        metadataURI: string;
        metadataHash: Hex;
        nftMetadataHash: Hex;
    };
};
/**
 * SpgMintAndRegisterIpAndAttachPilTermsRequest
 *
 * @param nftContract address
 * @param recipient address
 * @param metadata tuple
 * @param terms tuple
 */
export type SpgMintAndRegisterIpAndAttachPilTermsRequest = {
    nftContract: Address;
    recipient: Address;
    metadata: {
        metadataURI: string;
        metadataHash: Hex;
        nftMetadataHash: Hex;
    };
    terms: {
        transferable: boolean;
        royaltyPolicy: Address;
        mintingFee: bigint;
        expiration: bigint;
        commercialUse: boolean;
        commercialAttribution: boolean;
        commercializerChecker: Address;
        commercializerCheckerData: Hex;
        commercialRevShare: number;
        commercialRevCelling: bigint;
        derivativesAllowed: boolean;
        derivativesAttribution: boolean;
        derivativesApproval: boolean;
        derivativesReciprocal: boolean;
        derivativeRevCelling: bigint;
        currency: Address;
        uri: string;
    };
};
/**
 * SpgMintAndRegisterIpAndMakeDerivativeRequest
 *
 * @param nftContract address
 * @param derivData tuple
 * @param metadata tuple
 * @param recipient address
 */
export type SpgMintAndRegisterIpAndMakeDerivativeRequest = {
    nftContract: Address;
    derivData: {
        parentIpIds: readonly Address[];
        licenseTemplate: Address;
        licenseTermsIds: readonly bigint[];
        royaltyContext: Hex;
    };
    metadata: {
        metadataURI: string;
        metadataHash: Hex;
        nftMetadataHash: Hex;
    };
    recipient: Address;
};
/**
 * SpgMintAndRegisterIpAndMakeDerivativeWithLicenseTokensRequest
 *
 * @param nftContract address
 * @param licenseTokenIds uint256[]
 * @param royaltyContext bytes
 * @param metadata tuple
 * @param recipient address
 */
export type SpgMintAndRegisterIpAndMakeDerivativeWithLicenseTokensRequest = {
    nftContract: Address;
    licenseTokenIds: readonly bigint[];
    royaltyContext: Hex;
    metadata: {
        metadataURI: string;
        metadataHash: Hex;
        nftMetadataHash: Hex;
    };
    recipient: Address;
};
/**
 * SpgRegisterIpAndAttachPilTermsRequest
 *
 * @param nftContract address
 * @param tokenId uint256
 * @param metadata tuple
 * @param terms tuple
 * @param sigMetadata tuple
 * @param sigAttach tuple
 */
export type SpgRegisterIpAndAttachPilTermsRequest = {
    nftContract: Address;
    tokenId: bigint;
    metadata: {
        metadataURI: string;
        metadataHash: Hex;
        nftMetadataHash: Hex;
    };
    terms: {
        transferable: boolean;
        royaltyPolicy: Address;
        mintingFee: bigint;
        expiration: bigint;
        commercialUse: boolean;
        commercialAttribution: boolean;
        commercializerChecker: Address;
        commercializerCheckerData: Hex;
        commercialRevShare: number;
        commercialRevCelling: bigint;
        derivativesAllowed: boolean;
        derivativesAttribution: boolean;
        derivativesApproval: boolean;
        derivativesReciprocal: boolean;
        derivativeRevCelling: bigint;
        currency: Address;
        uri: string;
    };
    sigMetadata: {
        signer: Address;
        deadline: bigint;
        signature: Hex;
    };
    sigAttach: {
        signer: Address;
        deadline: bigint;
        signature: Hex;
    };
};
/**
 * SpgRegisterIpAndMakeDerivativeRequest
 *
 * @param nftContract address
 * @param tokenId uint256
 * @param derivData tuple
 * @param metadata tuple
 * @param sigMetadata tuple
 * @param sigRegister tuple
 */
export type SpgRegisterIpAndMakeDerivativeRequest = {
    nftContract: Address;
    tokenId: bigint;
    derivData: {
        parentIpIds: readonly Address[];
        licenseTemplate: Address;
        licenseTermsIds: readonly bigint[];
        royaltyContext: Hex;
    };
    metadata: {
        metadataURI: string;
        metadataHash: Hex;
        nftMetadataHash: Hex;
    };
    sigMetadata: {
        signer: Address;
        deadline: bigint;
        signature: Hex;
    };
    sigRegister: {
        signer: Address;
        deadline: bigint;
        signature: Hex;
    };
};
/**
 * SpgRegisterIpAndMakeDerivativeWithLicenseTokensRequest
 *
 * @param nftContract address
 * @param tokenId uint256
 * @param licenseTokenIds uint256[]
 * @param royaltyContext bytes
 * @param metadata tuple
 * @param sigMetadata tuple
 * @param sigRegister tuple
 */
export type SpgRegisterIpAndMakeDerivativeWithLicenseTokensRequest = {
    nftContract: Address;
    tokenId: bigint;
    licenseTokenIds: readonly bigint[];
    royaltyContext: Hex;
    metadata: {
        metadataURI: string;
        metadataHash: Hex;
        nftMetadataHash: Hex;
    };
    sigMetadata: {
        signer: Address;
        deadline: bigint;
        signature: Hex;
    };
    sigRegister: {
        signer: Address;
        deadline: bigint;
        signature: Hex;
    };
};
/**
 * SpgRegisterPilTermsAndAttachRequest
 *
 * @param ipId address
 * @param terms tuple
 */
export type SpgRegisterPilTermsAndAttachRequest = {
    ipId: Address;
    terms: {
        transferable: boolean;
        royaltyPolicy: Address;
        mintingFee: bigint;
        expiration: bigint;
        commercialUse: boolean;
        commercialAttribution: boolean;
        commercializerChecker: Address;
        commercializerCheckerData: Hex;
        commercialRevShare: number;
        commercialRevCelling: bigint;
        derivativesAllowed: boolean;
        derivativesAttribution: boolean;
        derivativesApproval: boolean;
        derivativesReciprocal: boolean;
        derivativeRevCelling: bigint;
        currency: Address;
        uri: string;
    };
};
/**
 * contract SPG event
 */
export declare class SpgEventClient {
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * event CollectionCreated for contract SPG
     */
    watchCollectionCreatedEvent(onLogs: (txHash: Hex, ev: Partial<SpgCollectionCreatedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event CollectionCreated for contract SPG
     */
    parseTxCollectionCreatedEvent(txReceipt: TransactionReceipt): Array<SpgCollectionCreatedEvent>;
}
/**
 * contract SPG write method
 */
export declare class SpgClient extends SpgEventClient {
    protected readonly wallet: SimpleWalletClient;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, address?: Address);
    /**
     * method createCollection for contract SPG
     *
     * @param request SpgCreateCollectionRequest
     * @return Promise<WriteContractReturnType>
     */
    createCollection(request: SpgCreateCollectionRequest): Promise<WriteContractReturnType>;
    /**
     * method mintAndRegisterIp for contract SPG
     *
     * @param request SpgMintAndRegisterIpRequest
     * @return Promise<WriteContractReturnType>
     */
    mintAndRegisterIp(request: SpgMintAndRegisterIpRequest): Promise<WriteContractReturnType>;
    /**
     * method mintAndRegisterIpAndAttachPILTerms for contract SPG
     *
     * @param request SpgMintAndRegisterIpAndAttachPilTermsRequest
     * @return Promise<WriteContractReturnType>
     */
    mintAndRegisterIpAndAttachPilTerms(request: SpgMintAndRegisterIpAndAttachPilTermsRequest): Promise<WriteContractReturnType>;
    /**
     * method mintAndRegisterIpAndMakeDerivative for contract SPG
     *
     * @param request SpgMintAndRegisterIpAndMakeDerivativeRequest
     * @return Promise<WriteContractReturnType>
     */
    mintAndRegisterIpAndMakeDerivative(request: SpgMintAndRegisterIpAndMakeDerivativeRequest): Promise<WriteContractReturnType>;
    /**
     * method mintAndRegisterIpAndMakeDerivativeWithLicenseTokens for contract SPG
     *
     * @param request SpgMintAndRegisterIpAndMakeDerivativeWithLicenseTokensRequest
     * @return Promise<WriteContractReturnType>
     */
    mintAndRegisterIpAndMakeDerivativeWithLicenseTokens(request: SpgMintAndRegisterIpAndMakeDerivativeWithLicenseTokensRequest): Promise<WriteContractReturnType>;
    /**
     * method registerIpAndAttachPILTerms for contract SPG
     *
     * @param request SpgRegisterIpAndAttachPilTermsRequest
     * @return Promise<WriteContractReturnType>
     */
    registerIpAndAttachPilTerms(request: SpgRegisterIpAndAttachPilTermsRequest): Promise<WriteContractReturnType>;
    /**
     * method registerIpAndMakeDerivative for contract SPG
     *
     * @param request SpgRegisterIpAndMakeDerivativeRequest
     * @return Promise<WriteContractReturnType>
     */
    registerIpAndMakeDerivative(request: SpgRegisterIpAndMakeDerivativeRequest): Promise<WriteContractReturnType>;
    /**
     * method registerIpAndMakeDerivativeWithLicenseTokens for contract SPG
     *
     * @param request SpgRegisterIpAndMakeDerivativeWithLicenseTokensRequest
     * @return Promise<WriteContractReturnType>
     */
    registerIpAndMakeDerivativeWithLicenseTokens(request: SpgRegisterIpAndMakeDerivativeWithLicenseTokensRequest): Promise<WriteContractReturnType>;
    /**
     * method registerPILTermsAndAttach for contract SPG
     *
     * @param request SpgRegisterPilTermsAndAttachRequest
     * @return Promise<WriteContractReturnType>
     */
    registerPilTermsAndAttach(request: SpgRegisterPilTermsAndAttachRequest): Promise<WriteContractReturnType>;
}
/**
 * SpgnftBeaconOwnershipTransferredEvent
 *
 * @param previousOwner address
 * @param newOwner address
 */
export type SpgnftBeaconOwnershipTransferredEvent = {
    previousOwner: Address;
    newOwner: Address;
};
/**
 * SpgnftBeaconUpgradedEvent
 *
 * @param implementation address
 */
export type SpgnftBeaconUpgradedEvent = {
    implementation: Address;
};
export type SpgnftBeaconImplementationResponse = Address;
export type SpgnftBeaconOwnerResponse = Address;
/**
 * SpgnftBeaconTransferOwnershipRequest
 *
 * @param newOwner address
 */
export type SpgnftBeaconTransferOwnershipRequest = {
    newOwner: Address;
};
/**
 * SpgnftBeaconUpgradeToRequest
 *
 * @param newImplementation address
 */
export type SpgnftBeaconUpgradeToRequest = {
    newImplementation: Address;
};
/**
 * contract SPGNFTBeacon event
 */
export declare class SpgnftBeaconEventClient {
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * event OwnershipTransferred for contract SPGNFTBeacon
     */
    watchOwnershipTransferredEvent(onLogs: (txHash: Hex, ev: Partial<SpgnftBeaconOwnershipTransferredEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event OwnershipTransferred for contract SPGNFTBeacon
     */
    parseTxOwnershipTransferredEvent(txReceipt: TransactionReceipt): Array<SpgnftBeaconOwnershipTransferredEvent>;
    /**
     * event Upgraded for contract SPGNFTBeacon
     */
    watchUpgradedEvent(onLogs: (txHash: Hex, ev: Partial<SpgnftBeaconUpgradedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event Upgraded for contract SPGNFTBeacon
     */
    parseTxUpgradedEvent(txReceipt: TransactionReceipt): Array<SpgnftBeaconUpgradedEvent>;
}
/**
 * contract SPGNFTBeacon readonly method
 */
export declare class SpgnftBeaconReadOnlyClient extends SpgnftBeaconEventClient {
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * method implementation for contract SPGNFTBeacon
     *
     * @param request SpgnftBeaconImplementationRequest
     * @return Promise<SpgnftBeaconImplementationResponse>
     */
    implementation(): Promise<SpgnftBeaconImplementationResponse>;
    /**
     * method owner for contract SPGNFTBeacon
     *
     * @param request SpgnftBeaconOwnerRequest
     * @return Promise<SpgnftBeaconOwnerResponse>
     */
    owner(): Promise<SpgnftBeaconOwnerResponse>;
}
/**
 * contract SPGNFTBeacon write method
 */
export declare class SpgnftBeaconClient extends SpgnftBeaconReadOnlyClient {
    protected readonly wallet: SimpleWalletClient;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, address?: Address);
    /**
     * method renounceOwnership for contract SPGNFTBeacon
     *
     * @param request SpgnftBeaconRenounceOwnershipRequest
     * @return Promise<WriteContractReturnType>
     */
    renounceOwnership(): Promise<WriteContractReturnType>;
    /**
     * method transferOwnership for contract SPGNFTBeacon
     *
     * @param request SpgnftBeaconTransferOwnershipRequest
     * @return Promise<WriteContractReturnType>
     */
    transferOwnership(request: SpgnftBeaconTransferOwnershipRequest): Promise<WriteContractReturnType>;
    /**
     * method upgradeTo for contract SPGNFTBeacon
     *
     * @param request SpgnftBeaconUpgradeToRequest
     * @return Promise<WriteContractReturnType>
     */
    upgradeTo(request: SpgnftBeaconUpgradeToRequest): Promise<WriteContractReturnType>;
}
/**
 * SpgnftImplApprovalEvent
 *
 * @param owner address
 * @param approved address
 * @param tokenId uint256
 */
export type SpgnftImplApprovalEvent = {
    owner: Address;
    approved: Address;
    tokenId: bigint;
};
/**
 * SpgnftImplApprovalForAllEvent
 *
 * @param owner address
 * @param operator address
 * @param approved bool
 */
export type SpgnftImplApprovalForAllEvent = {
    owner: Address;
    operator: Address;
    approved: boolean;
};
/**
 * SpgnftImplInitializedEvent
 *
 * @param version uint64
 */
export type SpgnftImplInitializedEvent = {
    version: bigint;
};
/**
 * SpgnftImplRoleAdminChangedEvent
 *
 * @param role bytes32
 * @param previousAdminRole bytes32
 * @param newAdminRole bytes32
 */
export type SpgnftImplRoleAdminChangedEvent = {
    role: Hex;
    previousAdminRole: Hex;
    newAdminRole: Hex;
};
/**
 * SpgnftImplRoleGrantedEvent
 *
 * @param role bytes32
 * @param account address
 * @param sender address
 */
export type SpgnftImplRoleGrantedEvent = {
    role: Hex;
    account: Address;
    sender: Address;
};
/**
 * SpgnftImplRoleRevokedEvent
 *
 * @param role bytes32
 * @param account address
 * @param sender address
 */
export type SpgnftImplRoleRevokedEvent = {
    role: Hex;
    account: Address;
    sender: Address;
};
/**
 * SpgnftImplTransferEvent
 *
 * @param from address
 * @param to address
 * @param tokenId uint256
 */
export type SpgnftImplTransferEvent = {
    from: Address;
    to: Address;
    tokenId: bigint;
};
export type SpgnftImplDefaultAdminRoleResponse = Hex;
export type SpgnftImplSpgAddressResponse = Address;
/**
 * SpgnftImplBalanceOfRequest
 *
 * @param owner address
 */
export type SpgnftImplBalanceOfRequest = {
    owner: Address;
};
export type SpgnftImplBalanceOfResponse = bigint;
/**
 * SpgnftImplGetApprovedRequest
 *
 * @param tokenId uint256
 */
export type SpgnftImplGetApprovedRequest = {
    tokenId: bigint;
};
export type SpgnftImplGetApprovedResponse = Address;
/**
 * SpgnftImplGetRoleAdminRequest
 *
 * @param role bytes32
 */
export type SpgnftImplGetRoleAdminRequest = {
    role: Hex;
};
export type SpgnftImplGetRoleAdminResponse = Hex;
/**
 * SpgnftImplHasRoleRequest
 *
 * @param role bytes32
 * @param account address
 */
export type SpgnftImplHasRoleRequest = {
    role: Hex;
    account: Address;
};
export type SpgnftImplHasRoleResponse = boolean;
/**
 * SpgnftImplIsApprovedForAllRequest
 *
 * @param owner address
 * @param operator address
 */
export type SpgnftImplIsApprovedForAllRequest = {
    owner: Address;
    operator: Address;
};
export type SpgnftImplIsApprovedForAllResponse = boolean;
export type SpgnftImplMintCostResponse = bigint;
export type SpgnftImplMintTokenResponse = Address;
export type SpgnftImplNameResponse = string;
/**
 * SpgnftImplOwnerOfRequest
 *
 * @param tokenId uint256
 */
export type SpgnftImplOwnerOfRequest = {
    tokenId: bigint;
};
export type SpgnftImplOwnerOfResponse = Address;
/**
 * SpgnftImplSupportsInterfaceRequest
 *
 * @param interfaceId bytes4
 */
export type SpgnftImplSupportsInterfaceRequest = {
    interfaceId: Hex;
};
export type SpgnftImplSupportsInterfaceResponse = boolean;
export type SpgnftImplSymbolResponse = string;
/**
 * SpgnftImplTokenUriRequest
 *
 * @param tokenId uint256
 */
export type SpgnftImplTokenUriRequest = {
    tokenId: bigint;
};
export type SpgnftImplTokenUriResponse = string;
export type SpgnftImplTotalSupplyResponse = bigint;
/**
 * SpgnftImplApproveRequest
 *
 * @param to address
 * @param tokenId uint256
 */
export type SpgnftImplApproveRequest = {
    to: Address;
    tokenId: bigint;
};
/**
 * SpgnftImplGrantRoleRequest
 *
 * @param role bytes32
 * @param account address
 */
export type SpgnftImplGrantRoleRequest = {
    role: Hex;
    account: Address;
};
/**
 * SpgnftImplInitializeRequest
 *
 * @param name string
 * @param symbol string
 * @param maxSupply uint32
 * @param mintCost uint256
 * @param mintToken address
 * @param owner address
 */
export type SpgnftImplInitializeRequest = {
    name: string;
    symbol: string;
    maxSupply: number;
    mintCost: bigint;
    mintToken: Address;
    owner: Address;
};
/**
 * SpgnftImplMintRequest
 *
 * @param to address
 */
export type SpgnftImplMintRequest = {
    to: Address;
};
/**
 * SpgnftImplMintBySpgRequest
 *
 * @param to address
 * @param payer address
 */
export type SpgnftImplMintBySpgRequest = {
    to: Address;
    payer: Address;
};
/**
 * SpgnftImplRenounceRoleRequest
 *
 * @param role bytes32
 * @param callerConfirmation address
 */
export type SpgnftImplRenounceRoleRequest = {
    role: Hex;
    callerConfirmation: Address;
};
/**
 * SpgnftImplRevokeRoleRequest
 *
 * @param role bytes32
 * @param account address
 */
export type SpgnftImplRevokeRoleRequest = {
    role: Hex;
    account: Address;
};
/**
 * SpgnftImplSafeTransferFromRequest
 *
 * @param from address
 * @param to address
 * @param tokenId uint256
 */
export type SpgnftImplSafeTransferFromRequest = {
    from: Address;
    to: Address;
    tokenId: bigint;
};
/**
 * SpgnftImplSafeTransferFrom2Request
 *
 * @param from address
 * @param to address
 * @param tokenId uint256
 * @param data bytes
 */
export type SpgnftImplSafeTransferFrom2Request = {
    from: Address;
    to: Address;
    tokenId: bigint;
    data: Hex;
};
/**
 * SpgnftImplSetApprovalForAllRequest
 *
 * @param operator address
 * @param approved bool
 */
export type SpgnftImplSetApprovalForAllRequest = {
    operator: Address;
    approved: boolean;
};
/**
 * SpgnftImplSetMintCostRequest
 *
 * @param cost uint256
 */
export type SpgnftImplSetMintCostRequest = {
    cost: bigint;
};
/**
 * SpgnftImplSetMintTokenRequest
 *
 * @param token address
 */
export type SpgnftImplSetMintTokenRequest = {
    token: Address;
};
/**
 * SpgnftImplTransferFromRequest
 *
 * @param from address
 * @param to address
 * @param tokenId uint256
 */
export type SpgnftImplTransferFromRequest = {
    from: Address;
    to: Address;
    tokenId: bigint;
};
/**
 * SpgnftImplWithdrawTokenRequest
 *
 * @param token address
 * @param recipient address
 */
export type SpgnftImplWithdrawTokenRequest = {
    token: Address;
    recipient: Address;
};
/**
 * contract SPGNFTImpl event
 */
export declare class SpgnftImplEventClient {
    protected readonly rpcClient: PublicClient;
    readonly address: Address;
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * event Approval for contract SPGNFTImpl
     */
    watchApprovalEvent(onLogs: (txHash: Hex, ev: Partial<SpgnftImplApprovalEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event Approval for contract SPGNFTImpl
     */
    parseTxApprovalEvent(txReceipt: TransactionReceipt): Array<SpgnftImplApprovalEvent>;
    /**
     * event ApprovalForAll for contract SPGNFTImpl
     */
    watchApprovalForAllEvent(onLogs: (txHash: Hex, ev: Partial<SpgnftImplApprovalForAllEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event ApprovalForAll for contract SPGNFTImpl
     */
    parseTxApprovalForAllEvent(txReceipt: TransactionReceipt): Array<SpgnftImplApprovalForAllEvent>;
    /**
     * event Initialized for contract SPGNFTImpl
     */
    watchInitializedEvent(onLogs: (txHash: Hex, ev: Partial<SpgnftImplInitializedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event Initialized for contract SPGNFTImpl
     */
    parseTxInitializedEvent(txReceipt: TransactionReceipt): Array<SpgnftImplInitializedEvent>;
    /**
     * event RoleAdminChanged for contract SPGNFTImpl
     */
    watchRoleAdminChangedEvent(onLogs: (txHash: Hex, ev: Partial<SpgnftImplRoleAdminChangedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event RoleAdminChanged for contract SPGNFTImpl
     */
    parseTxRoleAdminChangedEvent(txReceipt: TransactionReceipt): Array<SpgnftImplRoleAdminChangedEvent>;
    /**
     * event RoleGranted for contract SPGNFTImpl
     */
    watchRoleGrantedEvent(onLogs: (txHash: Hex, ev: Partial<SpgnftImplRoleGrantedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event RoleGranted for contract SPGNFTImpl
     */
    parseTxRoleGrantedEvent(txReceipt: TransactionReceipt): Array<SpgnftImplRoleGrantedEvent>;
    /**
     * event RoleRevoked for contract SPGNFTImpl
     */
    watchRoleRevokedEvent(onLogs: (txHash: Hex, ev: Partial<SpgnftImplRoleRevokedEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event RoleRevoked for contract SPGNFTImpl
     */
    parseTxRoleRevokedEvent(txReceipt: TransactionReceipt): Array<SpgnftImplRoleRevokedEvent>;
    /**
     * event Transfer for contract SPGNFTImpl
     */
    watchTransferEvent(onLogs: (txHash: Hex, ev: Partial<SpgnftImplTransferEvent>) => void): WatchContractEventReturnType;
    /**
     * parse tx receipt event Transfer for contract SPGNFTImpl
     */
    parseTxTransferEvent(txReceipt: TransactionReceipt): Array<SpgnftImplTransferEvent>;
}
/**
 * contract SPGNFTImpl readonly method
 */
export declare class SpgnftImplReadOnlyClient extends SpgnftImplEventClient {
    constructor(rpcClient: PublicClient, address?: Address);
    /**
     * method DEFAULT_ADMIN_ROLE for contract SPGNFTImpl
     *
     * @param request SpgnftImplDefaultAdminRoleRequest
     * @return Promise<SpgnftImplDefaultAdminRoleResponse>
     */
    defaultAdminRole(): Promise<SpgnftImplDefaultAdminRoleResponse>;
    /**
     * method SPG_ADDRESS for contract SPGNFTImpl
     *
     * @param request SpgnftImplSpgAddressRequest
     * @return Promise<SpgnftImplSpgAddressResponse>
     */
    spgAddress(): Promise<SpgnftImplSpgAddressResponse>;
    /**
     * method balanceOf for contract SPGNFTImpl
     *
     * @param request SpgnftImplBalanceOfRequest
     * @return Promise<SpgnftImplBalanceOfResponse>
     */
    balanceOf(request: SpgnftImplBalanceOfRequest): Promise<SpgnftImplBalanceOfResponse>;
    /**
     * method getApproved for contract SPGNFTImpl
     *
     * @param request SpgnftImplGetApprovedRequest
     * @return Promise<SpgnftImplGetApprovedResponse>
     */
    getApproved(request: SpgnftImplGetApprovedRequest): Promise<SpgnftImplGetApprovedResponse>;
    /**
     * method getRoleAdmin for contract SPGNFTImpl
     *
     * @param request SpgnftImplGetRoleAdminRequest
     * @return Promise<SpgnftImplGetRoleAdminResponse>
     */
    getRoleAdmin(request: SpgnftImplGetRoleAdminRequest): Promise<SpgnftImplGetRoleAdminResponse>;
    /**
     * method hasRole for contract SPGNFTImpl
     *
     * @param request SpgnftImplHasRoleRequest
     * @return Promise<SpgnftImplHasRoleResponse>
     */
    hasRole(request: SpgnftImplHasRoleRequest): Promise<SpgnftImplHasRoleResponse>;
    /**
     * method isApprovedForAll for contract SPGNFTImpl
     *
     * @param request SpgnftImplIsApprovedForAllRequest
     * @return Promise<SpgnftImplIsApprovedForAllResponse>
     */
    isApprovedForAll(request: SpgnftImplIsApprovedForAllRequest): Promise<SpgnftImplIsApprovedForAllResponse>;
    /**
     * method mintCost for contract SPGNFTImpl
     *
     * @param request SpgnftImplMintCostRequest
     * @return Promise<SpgnftImplMintCostResponse>
     */
    mintCost(): Promise<SpgnftImplMintCostResponse>;
    /**
     * method mintToken for contract SPGNFTImpl
     *
     * @param request SpgnftImplMintTokenRequest
     * @return Promise<SpgnftImplMintTokenResponse>
     */
    mintToken(): Promise<SpgnftImplMintTokenResponse>;
    /**
     * method name for contract SPGNFTImpl
     *
     * @param request SpgnftImplNameRequest
     * @return Promise<SpgnftImplNameResponse>
     */
    name(): Promise<SpgnftImplNameResponse>;
    /**
     * method ownerOf for contract SPGNFTImpl
     *
     * @param request SpgnftImplOwnerOfRequest
     * @return Promise<SpgnftImplOwnerOfResponse>
     */
    ownerOf(request: SpgnftImplOwnerOfRequest): Promise<SpgnftImplOwnerOfResponse>;
    /**
     * method supportsInterface for contract SPGNFTImpl
     *
     * @param request SpgnftImplSupportsInterfaceRequest
     * @return Promise<SpgnftImplSupportsInterfaceResponse>
     */
    supportsInterface(request: SpgnftImplSupportsInterfaceRequest): Promise<SpgnftImplSupportsInterfaceResponse>;
    /**
     * method symbol for contract SPGNFTImpl
     *
     * @param request SpgnftImplSymbolRequest
     * @return Promise<SpgnftImplSymbolResponse>
     */
    symbol(): Promise<SpgnftImplSymbolResponse>;
    /**
     * method tokenURI for contract SPGNFTImpl
     *
     * @param request SpgnftImplTokenUriRequest
     * @return Promise<SpgnftImplTokenUriResponse>
     */
    tokenUri(request: SpgnftImplTokenUriRequest): Promise<SpgnftImplTokenUriResponse>;
    /**
     * method totalSupply for contract SPGNFTImpl
     *
     * @param request SpgnftImplTotalSupplyRequest
     * @return Promise<SpgnftImplTotalSupplyResponse>
     */
    totalSupply(): Promise<SpgnftImplTotalSupplyResponse>;
}
/**
 * contract SPGNFTImpl write method
 */
export declare class SpgnftImplClient extends SpgnftImplReadOnlyClient {
    protected readonly wallet: SimpleWalletClient;
    constructor(rpcClient: PublicClient, wallet: SimpleWalletClient, address?: Address);
    /**
     * method approve for contract SPGNFTImpl
     *
     * @param request SpgnftImplApproveRequest
     * @return Promise<WriteContractReturnType>
     */
    approve(request: SpgnftImplApproveRequest): Promise<WriteContractReturnType>;
    /**
     * method grantRole for contract SPGNFTImpl
     *
     * @param request SpgnftImplGrantRoleRequest
     * @return Promise<WriteContractReturnType>
     */
    grantRole(request: SpgnftImplGrantRoleRequest): Promise<WriteContractReturnType>;
    /**
     * method initialize for contract SPGNFTImpl
     *
     * @param request SpgnftImplInitializeRequest
     * @return Promise<WriteContractReturnType>
     */
    initialize(request: SpgnftImplInitializeRequest): Promise<WriteContractReturnType>;
    /**
     * method mint for contract SPGNFTImpl
     *
     * @param request SpgnftImplMintRequest
     * @return Promise<WriteContractReturnType>
     */
    mint(request: SpgnftImplMintRequest): Promise<WriteContractReturnType>;
    /**
     * method mintBySPG for contract SPGNFTImpl
     *
     * @param request SpgnftImplMintBySpgRequest
     * @return Promise<WriteContractReturnType>
     */
    mintBySpg(request: SpgnftImplMintBySpgRequest): Promise<WriteContractReturnType>;
    /**
     * method renounceRole for contract SPGNFTImpl
     *
     * @param request SpgnftImplRenounceRoleRequest
     * @return Promise<WriteContractReturnType>
     */
    renounceRole(request: SpgnftImplRenounceRoleRequest): Promise<WriteContractReturnType>;
    /**
     * method revokeRole for contract SPGNFTImpl
     *
     * @param request SpgnftImplRevokeRoleRequest
     * @return Promise<WriteContractReturnType>
     */
    revokeRole(request: SpgnftImplRevokeRoleRequest): Promise<WriteContractReturnType>;
    /**
     * method safeTransferFrom for contract SPGNFTImpl
     *
     * @param request SpgnftImplSafeTransferFromRequest
     * @return Promise<WriteContractReturnType>
     */
    safeTransferFrom(request: SpgnftImplSafeTransferFromRequest): Promise<WriteContractReturnType>;
    /**
     * method safeTransferFrom for contract SPGNFTImpl
     *
     * @param request SpgnftImplSafeTransferFrom2Request
     * @return Promise<WriteContractReturnType>
     */
    safeTransferFrom2(request: SpgnftImplSafeTransferFrom2Request): Promise<WriteContractReturnType>;
    /**
     * method setApprovalForAll for contract SPGNFTImpl
     *
     * @param request SpgnftImplSetApprovalForAllRequest
     * @return Promise<WriteContractReturnType>
     */
    setApprovalForAll(request: SpgnftImplSetApprovalForAllRequest): Promise<WriteContractReturnType>;
    /**
     * method setMintCost for contract SPGNFTImpl
     *
     * @param request SpgnftImplSetMintCostRequest
     * @return Promise<WriteContractReturnType>
     */
    setMintCost(request: SpgnftImplSetMintCostRequest): Promise<WriteContractReturnType>;
    /**
     * method setMintToken for contract SPGNFTImpl
     *
     * @param request SpgnftImplSetMintTokenRequest
     * @return Promise<WriteContractReturnType>
     */
    setMintToken(request: SpgnftImplSetMintTokenRequest): Promise<WriteContractReturnType>;
    /**
     * method transferFrom for contract SPGNFTImpl
     *
     * @param request SpgnftImplTransferFromRequest
     * @return Promise<WriteContractReturnType>
     */
    transferFrom(request: SpgnftImplTransferFromRequest): Promise<WriteContractReturnType>;
    /**
     * method withdrawToken for contract SPGNFTImpl
     *
     * @param request SpgnftImplWithdrawTokenRequest
     * @return Promise<WriteContractReturnType>
     */
    withdrawToken(request: SpgnftImplWithdrawTokenRequest): Promise<WriteContractReturnType>;
}
//# sourceMappingURL=generated.d.ts.map