"use strict";var e=require("cross-fetch"),t=require("tty"),n=require("util"),o=require("os"),s=require("buffer"),i=require("eciesjs"),a=require("eventemitter2"),r=require("uuid"),c=require("socket.io-client");function l(e,t,n,o){return new(n||(n=Promise))((function(s,i){function a(e){try{c(o.next(e))}catch(e){i(e)}}function r(e){try{c(o.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,r)}c((o=o.apply(e,t||[])).next())}))}function d(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}"function"==typeof SuppressedError&&SuppressedError;var u,h,m,p,g,y={exports:{}},E={exports:{}};function v(){if(h)return u;h=1;var e=1e3,t=60*e,n=60*t,o=24*n,s=7*o,i=365.25*o;function a(e,t,n,o){var s=t>=1.5*n;return Math.round(e/n)+" "+o+(s?"s":"")}return u=function(r,c){c=c||{};var l=typeof r;if("string"===l&&r.length>0)return function(a){if((a=String(a)).length>100)return;var r=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(a);if(!r)return;var c=parseFloat(r[1]);switch((r[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return c*i;case"weeks":case"week":case"w":return c*s;case"days":case"day":case"d":return c*o;case"hours":case"hour":case"hrs":case"hr":case"h":return c*n;case"minutes":case"minute":case"mins":case"min":case"m":return c*t;case"seconds":case"second":case"secs":case"sec":case"s":return c*e;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return c;default:return}}(r);if("number"===l&&isFinite(r))return c.long?function(s){var i=Math.abs(s);if(i>=o)return a(s,i,o,"day");if(i>=n)return a(s,i,n,"hour");if(i>=t)return a(s,i,t,"minute");if(i>=e)return a(s,i,e,"second");return s+" ms"}(r):function(s){var i=Math.abs(s);if(i>=o)return Math.round(s/o)+"d";if(i>=n)return Math.round(s/n)+"h";if(i>=t)return Math.round(s/t)+"m";if(i>=e)return Math.round(s/e)+"s";return s+"ms"}(r);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(r))}}function C(){if(p)return m;return p=1,m=function(e){function t(e){let o,s,i,a=null;function r(...e){if(!r.enabled)return;const n=r,s=Number(new Date),i=s-(o||s);n.diff=i,n.prev=o,n.curr=s,o=s,e[0]=t.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let a=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((o,s)=>{if("%%"===o)return"%";a++;const i=t.formatters[s];if("function"==typeof i){const t=e[a];o=i.call(n,t),e.splice(a,1),a--}return o})),t.formatArgs.call(n,e);(n.log||t.log).apply(n,e)}return r.namespace=e,r.useColors=t.useColors(),r.color=t.selectColor(e),r.extend=n,r.destroy=t.destroy,Object.defineProperty(r,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==a?a:(s!==t.namespaces&&(s=t.namespaces,i=t.enabled(e)),i),set:e=>{a=e}}),"function"==typeof t.init&&t.init(r),r}function n(e,n){const o=t(this.namespace+(void 0===n?":":n)+e);return o.log=this.log,o}function o(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return t.debug=t,t.default=t,t.coerce=function(e){if(e instanceof Error)return e.stack||e.message;return e},t.disable=function(){const e=[...t.names.map(o),...t.skips.map(o).map((e=>"-"+e))].join(",");return t.enable(""),e},t.enable=function(e){let n;t.save(e),t.namespaces=e,t.names=[],t.skips=[];const o=("string"==typeof e?e:"").split(/[\s,]+/),s=o.length;for(n=0;n<s;n++)o[n]&&("-"===(e=o[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.slice(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){if("*"===e[e.length-1])return!0;let n,o;for(n=0,o=t.skips.length;n<o;n++)if(t.skips[n].test(e))return!1;for(n=0,o=t.names.length;n<o;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=v(),t.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach((n=>{t[n]=e[n]})),t.names=[],t.skips=[],t.formatters={},t.selectColor=function(e){let n=0;for(let t=0;t<e.length;t++)n=(n<<5)-n+e.charCodeAt(t),n|=0;return t.colors[Math.abs(n)%t.colors.length]},t.enable(t.load()),t},m}var S,x,f,k,T,K={exports:{}};function I(){return x?S:(x=1,S=(e,t=process.argv)=>{const n=e.startsWith("-")?"":1===e.length?"-":"--",o=t.indexOf(n+e),s=t.indexOf("--");return-1!==o&&(-1===s||o<s)})}"undefined"==typeof process||"renderer"===process.type||!0===process.browser||process.__nwjs?y.exports=(g||(g=1,function(e,t){t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;t.splice(1,0,n,"color: inherit");let o=0,s=0;t[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(o++,"%c"===e&&(s=o))})),t.splice(s,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e},t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},t.storage=function(){try{return localStorage}catch(e){}}(),t.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.log=console.debug||console.log||(()=>{}),e.exports=C()(t);const{formatters:n}=e.exports;n.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}}(E,E.exports)),E.exports):y.exports=(T||(T=1,function(e,s){const i=t,a=n;s.init=function(e){e.inspectOpts={};const t=Object.keys(s.inspectOpts);for(let n=0;n<t.length;n++)e.inspectOpts[t[n]]=s.inspectOpts[t[n]]},s.log=function(...e){return process.stderr.write(a.format(...e)+"\n")},s.formatArgs=function(t){const{namespace:n,useColors:o}=this;if(o){const o=this.color,s="[3"+(o<8?o:"8;5;"+o),i=`  ${s};1m${n} [0m`;t[0]=i+t[0].split("\n").join("\n"+i),t.push(s+"m+"+e.exports.humanize(this.diff)+"[0m")}else t[0]=(s.inspectOpts.hideDate?"":(new Date).toISOString()+" ")+n+" "+t[0]},s.save=function(e){e?process.env.DEBUG=e:delete process.env.DEBUG},s.load=function(){return process.env.DEBUG},s.useColors=function(){return"colors"in s.inspectOpts?Boolean(s.inspectOpts.colors):i.isatty(process.stderr.fd)},s.destroy=a.deprecate((()=>{}),"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."),s.colors=[6,2,3,4,5,1];try{const e=function(){if(k)return f;k=1;const e=o,n=t,s=I(),{env:i}=process;let a;function r(e){return 0!==e&&{level:e,hasBasic:!0,has256:e>=2,has16m:e>=3}}function c(t,n){if(0===a)return 0;if(s("color=16m")||s("color=full")||s("color=truecolor"))return 3;if(s("color=256"))return 2;if(t&&!n&&void 0===a)return 0;const o=a||0;if("dumb"===i.TERM)return o;if("win32"===process.platform){const t=e.release().split(".");return Number(t[0])>=10&&Number(t[2])>=10586?Number(t[2])>=14931?3:2:1}if("CI"in i)return["TRAVIS","CIRCLECI","APPVEYOR","GITLAB_CI","GITHUB_ACTIONS","BUILDKITE"].some((e=>e in i))||"codeship"===i.CI_NAME?1:o;if("TEAMCITY_VERSION"in i)return/^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(i.TEAMCITY_VERSION)?1:0;if("truecolor"===i.COLORTERM)return 3;if("TERM_PROGRAM"in i){const e=parseInt((i.TERM_PROGRAM_VERSION||"").split(".")[0],10);switch(i.TERM_PROGRAM){case"iTerm.app":return e>=3?3:2;case"Apple_Terminal":return 2}}return/-256(color)?$/i.test(i.TERM)?2:/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(i.TERM)||"COLORTERM"in i?1:o}return s("no-color")||s("no-colors")||s("color=false")||s("color=never")?a=0:(s("color")||s("colors")||s("color=true")||s("color=always"))&&(a=1),"FORCE_COLOR"in i&&(a="true"===i.FORCE_COLOR?1:"false"===i.FORCE_COLOR?0:0===i.FORCE_COLOR.length?1:Math.min(parseInt(i.FORCE_COLOR,10),3)),f={supportsColor:function(e){return r(c(e,e&&e.isTTY))},stdout:r(c(!0,n.isatty(1))),stderr:r(c(!0,n.isatty(2)))}}();e&&(e.stderr||e).level>=2&&(s.colors=[20,21,26,27,32,33,38,39,40,41,42,43,44,45,56,57,62,63,68,69,74,75,76,77,78,79,80,81,92,93,98,99,112,113,128,129,134,135,148,149,160,161,162,163,164,165,166,167,168,169,170,171,172,173,178,179,184,185,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,215,220,221])}catch(e){}s.inspectOpts=Object.keys(process.env).filter((e=>/^debug_/i.test(e))).reduce(((e,t)=>{const n=t.substring(6).toLowerCase().replace(/_([a-z])/g,((e,t)=>t.toUpperCase()));let o=process.env[t];return o=!!/^(yes|on|true|enabled)$/i.test(o)||!/^(no|off|false|disabled)$/i.test(o)&&("null"===o?null:Number(o)),e[n]=o,e}),{}),e.exports=C()(s);const{formatters:r}=e.exports;r.o=function(e){return this.inspectOpts.colors=this.useColors,a.inspect(e,this.inspectOpts).split("\n").map((e=>e.trim())).join(" ")},r.O=function(e){return this.inspectOpts.colors=this.useColors,a.inspect(e,this.inspectOpts)}}(K,K.exports)),K.exports);var _=d(y.exports);const O=_("KeyExchange:Layer"),N=_("SocketService:Layer"),A=_("Ecies:Layer"),R=_("RemoteCommunication:Layer");O.color="##95c44e",N.color="#f638d7",A.color="#465b9c",R.color="#47a2be";const b={KeyExchange:O,SocketService:N,Ecies:A,RemoteCommunication:R};let w,M=[],$=[];function P(t){return l(this,void 0,void 0,(function*(){if(!w||!t)return;!function(){const e=$;$=M,M=e}();const n=w.endsWith("/")?`${w}debug`:`${w}/debug`,o=Object.assign({},t);if(delete o.params,t.params)for(const[e,n]of Object.entries(t.params))o[e]=n;const s=JSON.stringify(o);b.RemoteCommunication(`[sendBufferedEvents] Sending ${M.length} analytics events to ${n}`);try{const t=yield e(n,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:s}),o=yield t.text();b.RemoteCommunication(`[sendBufferedEvents] Response: ${o}`),M.length=0}catch(e){console.warn("Error sending analytics",e)}}))}const D=(e,t)=>l(void 0,void 0,void 0,(function*(){var n;w=t,n=e,$.push(n),P(e).catch((()=>{}))}));class L{constructor(e){this.enabled=!0,(null==e?void 0:e.debug)&&_.enable("Ecies:Layer"),(null==e?void 0:e.privateKey)?this.ecies=i.PrivateKey.fromHex(e.privateKey):this.ecies=new i.PrivateKey,b.Ecies("[ECIES constructor()] initialized secret: ",this.ecies.toHex()),b.Ecies("[ECIES constructor()] initialized public: ",this.ecies.publicKey.toHex()),b.Ecies("[ECIES constructor()] init with",this)}generateECIES(){this.ecies=new i.PrivateKey}getPublicKey(){return this.ecies.publicKey.toHex()}encrypt(e,t){let n=e;if(this.enabled)try{b.Ecies("[ECIES: encrypt()] using otherPublicKey",t);const o=s.Buffer.from(e),a=i.encrypt(t,o);n=s.Buffer.from(a).toString("base64")}catch(n){throw b.Ecies("[ECIES: encrypt()] error encrypt:",n),b.Ecies("[ECIES: encrypt()] private: ",this.ecies.toHex()),b.Ecies("[ECIES: encrypt()] data: ",e),b.Ecies("[ECIES: encrypt()] otherkey: ",t),n}return n}decrypt(e){let t=e;if(this.enabled)try{b.Ecies("[ECIES: decrypt()] using privateKey",this.ecies.toHex());const n=s.Buffer.from(e.toString(),"base64");t=i.decrypt(this.ecies.toHex(),n).toString()}catch(t){throw b.Ecies("[ECIES: decrypt()] error decrypt",t),b.Ecies("[ECIES: decrypt()] private: ",this.ecies.toHex()),b.Ecies("[ECIES: decrypt()] encryptedData: ",e),t}return t}getKeyInfo(){return{private:this.ecies.toHex(),public:this.ecies.publicKey.toHex()}}toString(){b.Ecies("[ECIES: toString()]",this.getKeyInfo())}}var H={name:"@metamask/sdk-communication-layer",version:"0.20.2",description:"",homepage:"https://github.com/MetaMask/metamask-sdk#readme",bugs:{url:"https://github.com/MetaMask/metamask-sdk/issues"},repository:{type:"git",url:"https://github.com/MetaMask/metamask-sdk.git",directory:"packages/sdk-communication-layer"},main:"dist/node/cjs/metamask-sdk-communication-layer.js",unpkg:"dist/browser/umd/metamask-sdk-communication-layer.js",module:"dist/node/es/metamask-sdk-communication-layer.js",browser:"dist/browser/es/metamask-sdk-communication-layer.js","react-native":"dist/react-native/es/metamask-sdk-communication-layer.js",types:"dist/browser/es/src/index.d.ts",files:["/dist"],scripts:{build:"rimraf dist && rollup -c --bundleConfigAsCjs","build:tsc":"tsc","build:dev":"rimraf dist && NODE_ENV=dev rollup -c --bundleConfigAsCjs","build:post-tsc":"echo 'N/A'","build:pre-tsc":"echo 'N/A'",size:"size-limit",clean:"rimraf ./dist",lint:"yarn lint:eslint && yarn lint:misc --check","lint:changelog":"../../scripts/validate-changelog.sh @metamask/sdk-communication-layer","lint:eslint":"eslint . --cache --ext js,ts","lint:fix":"yarn lint:eslint --fix && yarn lint:misc --write","lint:misc":"prettier '**/*.json' '**/*.md' '!CHANGELOG.md' --ignore-path ../../.gitignore","prepare-manifest:preview":"../../scripts/prepare-preview-manifest.sh","publish:preview":"yarn npm publish --tag preview",prepack:"../../scripts/prepack.sh",reset:"yarn clean && rimraf ./node_modules/",test:"jest","test:coverage":"jest --coverage","test:ci":"jest --coverage --passWithNoTests --setupFilesAfterEnv ./jest-preload.js","test:dev":"jest",watch:"rollup -c --bundleConfigAsCjs -w"},dependencies:{bufferutil:"^4.0.8","date-fns":"^2.29.3",debug:"^4.3.4","utf-8-validate":"^6.0.3",uuid:"^8.3.2"},devDependencies:{"@jest/globals":"^29.3.1","@lavamoat/allow-scripts":"^2.3.1","@metamask/auto-changelog":"3.1.0","@metamask/eslint-config":"^6.0.0","@metamask/eslint-config-nodejs":"^6.0.0","@metamask/eslint-config-typescript":"^6.0.0","@rollup/plugin-commonjs":"^25.0.0","@rollup/plugin-json":"^6.0.0","@rollup/plugin-node-resolve":"^15.0.2","@rollup/plugin-terser":"^0.4.1","@size-limit/preset-big-lib":"^11.0.2","@types/jest":"^29.2.4","@types/node":"^20.1.3","@types/uuid":"^9.0.0","@typescript-eslint/eslint-plugin":"^4.26.0","@typescript-eslint/parser":"^4.26.0","cross-fetch":"^3.1.5",eciesjs:"^0.3.16",eslint:"^7.30.0","eslint-config-prettier":"^8.3.0","eslint-plugin-import":"^2.23.4","eslint-plugin-jest":"^24.4.0","eslint-plugin-jsdoc":"^36.1.0","eslint-plugin-node":"^11.1.0","eslint-plugin-prettier":"^3.4.0",eventemitter2:"^6.4.7",jest:"^29.3.1",prettier:"^2.3.0",rimraf:"^3.0.2",rollup:"^3.21.7","rollup-plugin-jscc":"^2.0.0","rollup-plugin-natives":"^0.7.5","rollup-plugin-node-builtins":"^2.1.2","rollup-plugin-node-globals":"^1.4.0","rollup-plugin-peer-deps-external":"^2.2.4","rollup-plugin-sizes":"^1.0.6","rollup-plugin-typescript2":"^0.31.2","rollup-plugin-visualizer":"^5.9.2","size-limit":"^11.0.2","socket.io-client":"^4.5.1","stream-browserify":"^3.0.0","ts-jest":"^29.0.3","ts-node":"^10.9.1",typescript:"^4.3.2"},peerDependencies:{"cross-fetch":"^3.1.5",eciesjs:"^0.3.16",eventemitter2:"^6.4.7","readable-stream":"^3.6.2","socket.io-client":"^4.5.1"},publishConfig:{access:"public",registry:"https://registry.npmjs.org/"},lavamoat:{allowScripts:{"@lavamoat/preinstall-always-fail":!1,canvas:!0,"eciesjs>secp256k1":!1,"socket.io-client>engine.io-client>ws>bufferutil":!1,"socket.io-client>engine.io-client>ws>utf-8-validate":!1,bufferutil:!1,"utf-8-validate":!1}}};const F="https://metamask-sdk.api.cx.metamask.io/",U=["websocket"],Y=6048e5,j={METAMASK_GETPROVIDERSTATE:"metamask_getProviderState",ETH_REQUESTACCOUNTS:"eth_requestAccounts"};function G(e){const{context:t}=e;b.RemoteCommunication(`[RemoteCommunication: clean()] context=${t}`),e.channelConfig=void 0,e.ready=!1,e.originatorConnectStarted=!1}var V,z,W,B,q;exports.ConnectionStatus=void 0,(V=exports.ConnectionStatus||(exports.ConnectionStatus={})).DISCONNECTED="disconnected",V.WAITING="waiting",V.TIMEOUT="timeout",V.LINKED="linked",V.PAUSED="paused",V.TERMINATED="terminated",exports.EventType=void 0,(z=exports.EventType||(exports.EventType={})).KEY_INFO="key_info",z.SERVICE_STATUS="service_status",z.PROVIDER_UPDATE="provider_update",z.RPC_UPDATE="rpc_update",z.KEYS_EXCHANGED="keys_exchanged",z.JOIN_CHANNEL="join_channel",z.CHANNEL_CREATED="channel_created",z.CLIENTS_CONNECTED="clients_connected",z.CLIENTS_DISCONNECTED="clients_disconnected",z.CLIENTS_WAITING="clients_waiting",z.CLIENTS_READY="clients_ready",z.CHANNEL_PERSISTENCE="channel_persistence",z.MESSAGE_ACK="ack",z.SOCKET_DISCONNECTED="socket_disconnected",z.SOCKET_RECONNECT="socket_reconnect",z.OTP="otp",z.SDK_RPC_CALL="sdk_rpc_call",z.AUTHORIZED="authorized",z.CONNECTION_STATUS="connection_status",z.MESSAGE="message",z.TERMINATE="terminate",function(e){e.KEY_EXCHANGE="key_exchange"}(W||(W={})),exports.KeyExchangeMessageType=void 0,(B=exports.KeyExchangeMessageType||(exports.KeyExchangeMessageType={})).KEY_HANDSHAKE_START="key_handshake_start",B.KEY_HANDSHAKE_CHECK="key_handshake_check",B.KEY_HANDSHAKE_SYN="key_handshake_SYN",B.KEY_HANDSHAKE_SYNACK="key_handshake_SYNACK",B.KEY_HANDSHAKE_ACK="key_handshake_ACK",B.KEY_HANDSHAKE_NONE="none";class J extends a.EventEmitter2{constructor({communicationLayer:e,otherPublicKey:t,context:n,ecies:o,logging:s}){super(),this.keysExchanged=!1,this.step=exports.KeyExchangeMessageType.KEY_HANDSHAKE_NONE,this.debug=!1,this.context=n,this.communicationLayer=e,(null==o?void 0:o.privateKey)&&t&&(b.KeyExchange(`[KeyExchange: constructor()] otherPubKey=${t} set keysExchanged to true!`,o),this.keysExchanged=!0),this.myECIES=new L(Object.assign(Object.assign({},o),{debug:null==s?void 0:s.eciesLayer})),this.myPublicKey=this.myECIES.getPublicKey(),this.debug=!0===(null==s?void 0:s.keyExchangeLayer),t&&this.setOtherPublicKey(t),this.communicationLayer.on(W.KEY_EXCHANGE,this.onKeyExchangeMessage.bind(this))}onKeyExchangeMessage(e){const{relayPersistence:t}=this.communicationLayer.remote.state;if(b.KeyExchange(`[KeyExchange: onKeyExchangeMessage()] context=${this.context} keysExchanged=${this.keysExchanged} relayPersistence=${t}`,e),t)return void b.KeyExchange("[KeyExchange: onKeyExchangeMessage()] Ignoring key exchange message because relay persistence is activated");const{message:n}=e;this.keysExchanged&&b.KeyExchange(`[KeyExchange: onKeyExchangeMessage()] context=${this.context} received handshake while already exchanged. step=${this.step} otherPubKey=${this.otherPublicKey}`),this.emit(exports.EventType.KEY_INFO,n.type),n.type===exports.KeyExchangeMessageType.KEY_HANDSHAKE_SYN?(this.checkStep([exports.KeyExchangeMessageType.KEY_HANDSHAKE_NONE,exports.KeyExchangeMessageType.KEY_HANDSHAKE_ACK]),b.KeyExchange("[KeyExchange: onKeyExchangeMessage()] KEY_HANDSHAKE_SYN",n),n.pubkey&&this.setOtherPublicKey(n.pubkey),this.communicationLayer.sendMessage({type:exports.KeyExchangeMessageType.KEY_HANDSHAKE_SYNACK,pubkey:this.myPublicKey}),this.setStep(exports.KeyExchangeMessageType.KEY_HANDSHAKE_ACK)):n.type===exports.KeyExchangeMessageType.KEY_HANDSHAKE_SYNACK?(this.checkStep([exports.KeyExchangeMessageType.KEY_HANDSHAKE_SYNACK,exports.KeyExchangeMessageType.KEY_HANDSHAKE_ACK,exports.KeyExchangeMessageType.KEY_HANDSHAKE_NONE]),b.KeyExchange("[KeyExchange: onKeyExchangeMessage()] KEY_HANDSHAKE_SYNACK"),n.pubkey&&this.setOtherPublicKey(n.pubkey),this.communicationLayer.sendMessage({type:exports.KeyExchangeMessageType.KEY_HANDSHAKE_ACK}),this.keysExchanged=!0,this.setStep(exports.KeyExchangeMessageType.KEY_HANDSHAKE_ACK),this.emit(exports.EventType.KEYS_EXCHANGED)):n.type===exports.KeyExchangeMessageType.KEY_HANDSHAKE_ACK&&(b.KeyExchange("[KeyExchange: onKeyExchangeMessage()] KEY_HANDSHAKE_ACK set keysExchanged to true!"),this.checkStep([exports.KeyExchangeMessageType.KEY_HANDSHAKE_ACK,exports.KeyExchangeMessageType.KEY_HANDSHAKE_NONE]),this.keysExchanged=!0,this.setStep(exports.KeyExchangeMessageType.KEY_HANDSHAKE_ACK),this.emit(exports.EventType.KEYS_EXCHANGED))}resetKeys(e){this.clean(),this.myECIES=new L(e)}clean(){b.KeyExchange(`[KeyExchange: clean()] context=${this.context} reset handshake state`),this.setStep(exports.KeyExchangeMessageType.KEY_HANDSHAKE_NONE),this.emit(exports.EventType.KEY_INFO,this.step),this.keysExchanged=!1}start({isOriginator:e,force:t}){const{relayPersistence:n,protocolVersion:o}=this.communicationLayer.remote.state,s=o>=2;if(n)return b.KeyExchange("[KeyExchange: start()] Ignoring key exchange message because relay persistence is activated"),void console.log(`[KeyExchange: start()] relayPersistence=${n}`);b.KeyExchange(`[KeyExchange: start()] context=${this.context} protocolVersion=${o} isOriginator=${e} step=${this.step} force=${t} relayPersistence=${n} keysExchanged=${this.keysExchanged}`),e?!(this.keysExchanged||this.step!==exports.KeyExchangeMessageType.KEY_HANDSHAKE_NONE&&this.step!==exports.KeyExchangeMessageType.KEY_HANDSHAKE_SYNACK)||t?(b.KeyExchange(`[KeyExchange: start()] context=${this.context} -- start key exchange (force=${t}) -- step=${this.step}`,this.step),this.clean(),this.setStep(exports.KeyExchangeMessageType.KEY_HANDSHAKE_SYNACK),this.communicationLayer.sendMessage({type:exports.KeyExchangeMessageType.KEY_HANDSHAKE_SYN,pubkey:this.myPublicKey,v:2})):b.KeyExchange(`[KeyExchange: start()] context=${this.context} -- key exchange already ${this.keysExchanged?"done":"in progress"} -- aborted.`,this.step):this.keysExchanged&&!0!==t?b.KeyExchange("[KeyExchange: start()] don't send KEY_HANDSHAKE_START -- exchange already done."):s?this.communicationLayer.sendMessage({type:exports.KeyExchangeMessageType.KEY_HANDSHAKE_SYNACK,pubkey:this.myPublicKey,v:2}):(this.communicationLayer.sendMessage({type:exports.KeyExchangeMessageType.KEY_HANDSHAKE_START}),this.clean())}setStep(e){this.step=e,this.emit(exports.EventType.KEY_INFO,e)}checkStep(e){e.length>0&&-1===e.indexOf(this.step.toString())&&console.warn(`[KeyExchange: checkStep()]  Wrong Step "${this.step}" not within ${e}`)}setRelayPersistence({localKey:e,otherKey:t}){this.otherPublicKey=t,this.myECIES=new L({privateKey:e,debug:this.debug}),this.keysExchanged=!0}setKeysExchanged(e){this.keysExchanged=e}areKeysExchanged(){return this.keysExchanged}getMyPublicKey(){return this.myPublicKey}getOtherPublicKey(){return this.otherPublicKey}setOtherPublicKey(e){b.KeyExchange("[KeyExchange: setOtherPubKey()]",e),this.otherPublicKey=e}encryptMessage(e){if(!this.otherPublicKey)throw new Error("encryptMessage: Keys not exchanged - missing otherPubKey");return this.myECIES.encrypt(e,this.otherPublicKey)}decryptMessage(e){if(!this.otherPublicKey)throw new Error("decryptMessage: Keys not exchanged - missing otherPubKey");return this.myECIES.decrypt(e)}getKeyInfo(){return{ecies:Object.assign(Object.assign({},this.myECIES.getKeyInfo()),{otherPubKey:this.otherPublicKey}),step:this.step,keysExchanged:this.areKeysExchanged()}}toString(){const e={keyInfo:this.getKeyInfo(),keysExchanged:this.keysExchanged,step:this.step};return JSON.stringify(e)}}exports.MessageType=void 0,(q=exports.MessageType||(exports.MessageType={})).TERMINATE="terminate",q.ANSWER="answer",q.OFFER="offer",q.CANDIDATE="candidate",q.JSONRPC="jsonrpc",q.WALLET_INFO="wallet_info",q.ORIGINATOR_INFO="originator_info",q.PAUSE="pause",q.OTP="otp",q.AUTHORIZED="authorized",q.PING="ping",q.READY="ready";const Z=e=>new Promise((t=>{setTimeout(t,e)})),X=(e,t,n=200)=>l(void 0,void 0,void 0,(function*(){let o;const s=Date.now();let i=!1;for(;!i;){if(i=Date.now()-s>3e5,o=t[e],void 0!==o.elapsedTime)return o;yield Z(n)}throw new Error(`RPC ${e} timed out`)})),Q=({rpcId:e,instance:t})=>l(void 0,void 0,void 0,(function*(){for(;t.state.lastRpcId===e||void 0===t.state.lastRpcId;)yield Z(200);return t.state.lastRpcId})),ee=e=>l(void 0,void 0,void 0,(function*(){var t,n,o,s,i;return e.remote.state.terminated?(b.SocketService(`[SocketService: reconnectSocket()] instance.remote.state.terminated=${e.remote.state.terminated} socket already terminated`,e),!1):(b.SocketService(`[SocketService: reconnectSocket()] instance.state.socket?.connected=${null===(t=e.state.socket)||void 0===t?void 0:t.connected} trying to reconnect after socketio disconnection`,e),yield Z(200),(null===(n=e.state.socket)||void 0===n?void 0:n.connected)||(e.state.resumed=!0,null===(o=e.state.socket)||void 0===o||o.connect(),e.emit(exports.EventType.SOCKET_RECONNECT),null===(s=e.state.socket)||void 0===s||s.emit(exports.EventType.JOIN_CHANNEL,{channelId:e.state.channelId,context:`${e.state.context}connect_again`,clientType:e.state.isOriginator?"dapp":"wallet"})),yield Z(100),null===(i=e.state.socket)||void 0===i?void 0:i.connected)}));function te(e){return t=>{b.SocketService(`[SocketService: handleDisconnect()] on 'disconnect' manualDisconnect=${e.state.manualDisconnect}`,t),e.state.manualDisconnect||(e.emit(exports.EventType.SOCKET_DISCONNECTED),function(e){"undefined"!=typeof window&&"undefined"!=typeof document&&(b.SocketService(`[SocketService: checkFocusAndReconnect()] hasFocus=${document.hasFocus()}`,e),document.hasFocus()?ee(e).then((t=>{b.SocketService(`SocketService::checkFocus reconnectSocket success=${t}`,e)})).catch((e=>{console.error("SocketService::checkFocus Error reconnecting socket",e)})):window.addEventListener("focus",(()=>{ee(e).catch((e=>{console.error("SocketService::checkFocus Error reconnecting socket",e)}))}),{once:!0}))}(e))}}var ne;exports.TrackingEvents=void 0,(ne=exports.TrackingEvents||(exports.TrackingEvents={})).REQUEST="sdk_connect_request_started",ne.REQUEST_MOBILE="sdk_connect_request_started_mobile",ne.RECONNECT="sdk_reconnect_request_started",ne.CONNECTED="sdk_connection_established",ne.CONNECTED_MOBILE="sdk_connection_established_mobile",ne.AUTHORIZED="sdk_connection_authorized",ne.REJECTED="sdk_connection_rejected",ne.TERMINATED="sdk_connection_terminated",ne.DISCONNECTED="sdk_disconnected",ne.SDK_USE_EXTENSION="sdk_use_extension",ne.SDK_RPC_REQUEST="sdk_rpc_request",ne.SDK_RPC_REQUEST_RECEIVED="sdk_rpc_request_received",ne.SDK_RPC_REQUEST_DONE="sdk_rpc_request_done",ne.SDK_EXTENSION_UTILIZED="sdk_extension_utilized",ne.SDK_USE_INAPP_BROWSER="sdk_use_inapp_browser";const oe="SDK_CONNECTION_ISSUE";var se;!function(e){e.RPC_CHECK="rpcCheck",e.SKIPPED_RPC="skippedRpc"}(se||(se={}));const ie=["eth_sendTransaction","eth_signTypedData","eth_signTransaction","personal_sign","wallet_requestPermissions","wallet_switchEthereumChain","eth_signTypedData_v3","eth_signTypedData_v4","metamask_connectSign","metamask_connectWith","metamask_batch"].map((e=>e.toLowerCase()));function ae(e,t){var n,o,s,i;if(!e.state.channelId)throw new Error("Create a channel first");b.SocketService(`[SocketService: handleSendMessage()] context=${e.state.context} areKeysExchanged=${null===(n=e.state.keyExchange)||void 0===n?void 0:n.areKeysExchanged()}`,t);(null===(o=null==t?void 0:t.type)||void 0===o?void 0:o.startsWith("key_handshake"))?function(e,t){var n;b.SocketService(`[SocketService: handleKeyHandshake()] context=${e.state.context}`,t),null===(n=e.state.socket)||void 0===n||n.emit(exports.EventType.MESSAGE,{id:e.state.channelId,context:e.state.context,clientType:e.state.isOriginator?"dapp":"wallet",message:t})}(e,t):(!function(e,t){var n;if(!(null===(n=e.state.keyExchange)||void 0===n?void 0:n.areKeysExchanged())&&!e.remote.state.relayPersistence)throw b.SocketService(`[SocketService: validateKeyExchange()] context=${e.state.context} ERROR keys not exchanged`,t),console.error("[SocketService: validateKeyExchange()] ERROR keys not exchanged",t),new Error("Keys not exchanged BBB")}(e,t),function(e,t){var n;const o=null!==(n=null==t?void 0:t.method)&&void 0!==n?n:"",s=null==t?void 0:t.id;e.state.isOriginator&&s&&(e.state.rpcMethodTracker[s]={id:s,timestamp:Date.now(),method:o},e.emit(exports.EventType.RPC_UPDATE,e.state.rpcMethodTracker[s]))}(e,t),function(e,t){var n,o;const s=null===(n=e.state.keyExchange)||void 0===n?void 0:n.encryptMessage(JSON.stringify(t)),i={id:e.state.channelId,context:e.state.context,clientType:e.state.isOriginator?"dapp":"wallet",message:s,plaintext:e.state.hasPlaintext?JSON.stringify(t):void 0};b.SocketService(`[SocketService: encryptAndSendMessage()] context=${e.state.context}`,i),t.type===exports.MessageType.TERMINATE&&(e.state.manualDisconnect=!0),null===(o=e.state.socket)||void 0===o||o.emit(exports.EventType.MESSAGE,i)}(e,t),e.remote.state.analytics&&e.remote.state.isOriginator&&t.method&&ie.includes(t.method.toLowerCase())&&D({id:null!==(s=e.remote.state.channelId)&&void 0!==s?s:"",event:exports.TrackingEvents.SDK_RPC_REQUEST,sdkVersion:e.remote.state.sdkVersion,commLayerVersion:H.version,walletVersion:null===(i=e.remote.state.walletInfo)||void 0===i?void 0:i.version,params:{method:t.method,from:"mobile"}},e.remote.state.communicationServerUrl).catch((e=>{console.error("Cannot send analytics",e)})),function(e,t){var n;return l(this,void 0,void 0,(function*(){const o=null==t?void 0:t.id,s=null!==(n=null==t?void 0:t.method)&&void 0!==n?n:"";if(e.state.isOriginator&&o)try{const n=X(o,e.state.rpcMethodTracker,200).then((e=>({type:se.RPC_CHECK,result:e}))),i=(()=>l(this,void 0,void 0,(function*(){const t=yield Q({instance:e,rpcId:o}),n=yield X(t,e.state.rpcMethodTracker,200);return{type:se.SKIPPED_RPC,result:n}})))(),a=yield Promise.race([n,i]);if(a.type===se.RPC_CHECK){const e=a.result;b.SocketService(`[SocketService:handleRpcReplies()] id=${t.id} ${s} ( ${e.elapsedTime} ms)`,e.result)}else{if(a.type!==se.SKIPPED_RPC)throw new Error(`Error handling RPC replies for ${o}`);{const{result:t}=a;console.warn(`[SocketService handleRpcReplies()] RPC METHOD HAS BEEN SKIPPED rpcid=${o} method=${s}`,t);const n=Object.assign(Object.assign({},e.state.rpcMethodTracker[o]),{error:new Error(oe)});e.emit(exports.EventType.RPC_UPDATE,n);const i={data:Object.assign(Object.assign({},n),{jsonrpc:"2.0"}),name:"metamask-provider"};e.emit(exports.EventType.MESSAGE,{message:i})}}}catch(e){throw console.warn(`[SocketService handleRpcReplies()] Error rpcId=${t.id} ${s}`,e),e}}))}(e,t).catch((e=>{console.warn("Error handleRpcReplies",e)})))}const re=[{event:"clients_connected",handler:function(e,t){return n=>l(this,void 0,void 0,(function*(){var n,o,s,i,a,r,c,l,d,u,h;const m=null!==(o=null===(n=e.remote.state.channelConfig)||void 0===n?void 0:n.relayPersistence)&&void 0!==o&&o;if(b.SocketService(`[SocketService: handleClientsConnected()] context=${e.state.context} on 'clients_connected-${t}' relayPersistence=${m} resumed=${e.state.resumed}  clientsPaused=${e.state.clientsPaused} keysExchanged=${null===(s=e.state.keyExchange)||void 0===s?void 0:s.areKeysExchanged()} isOriginator=${e.state.isOriginator}`),e.emit(exports.EventType.CLIENTS_CONNECTED,{isOriginator:e.state.isOriginator,keysExchanged:null===(i=e.state.keyExchange)||void 0===i?void 0:i.areKeysExchanged(),context:e.state.context}),e.state.resumed)e.state.isOriginator||(b.SocketService(`[SocketService: handleClientsConnected()] context=${e.state.context} 'clients_connected' / keysExchanged=${null===(a=e.state.keyExchange)||void 0===a?void 0:a.areKeysExchanged()} -- backward compatibility`),null===(r=e.state.keyExchange)||void 0===r||r.start({isOriginator:null!==(c=e.state.isOriginator)&&void 0!==c&&c})),e.state.resumed=!1;else if(e.state.clientsPaused)b.SocketService("[SocketService: handleClientsConnected()] 'clients_connected' skip sending originatorInfo on pause");else if(!e.state.isOriginator){const t=!m;console.log(`[SocketService: handleClientsConnected()] context=${e.state.context} on 'clients_connected' / keysExchanged=${null===(l=e.state.keyExchange)||void 0===l?void 0:l.areKeysExchanged()} -- force=${t} -- backward compatibility`),b.SocketService(`[SocketService: handleClientsConnected()] context=${e.state.context} on 'clients_connected' / keysExchanged=${null===(d=e.state.keyExchange)||void 0===d?void 0:d.areKeysExchanged()} -- force=${t} -- backward compatibility`),null===(u=e.state.keyExchange)||void 0===u||u.start({isOriginator:null!==(h=e.state.isOriginator)&&void 0!==h&&h,force:t})}e.state.clientsConnected=!0,e.state.clientsPaused=!1}))}},{event:"channel_created",handler:function(e,t){return n=>{b.SocketService(`[SocketService: handleChannelCreated()] context=${e.state.context} on 'channel_created-${t}'`,n),e.emit(exports.EventType.CHANNEL_CREATED,n)}}},{event:"clients_disconnected",handler:function(e,t){return()=>{var n;e.state.clientsConnected=!1,b.SocketService(`[SocketService: handlesClientsDisconnected()] context=${e.state.context} on 'clients_disconnected-${t}'`),e.remote.state.relayPersistence?b.SocketService(`[SocketService: handlesClientsDisconnected()] context=${e.state.context} on 'clients_disconnected-${t}' - relayPersistence enabled, skipping key exchange cleanup.`):(e.state.isOriginator&&!e.state.clientsPaused&&(null===(n=e.state.keyExchange)||void 0===n||n.clean()),e.emit(exports.EventType.CLIENTS_DISCONNECTED,t))}}},{event:"config",handler:function(e,t){return n=>l(this,void 0,void 0,(function*(){var o,s;b.SocketService(`[SocketService: handleChannelConfig()] update relayPersistence on 'config-${t}'`,n),e.remote.state.relayPersistence=!0,e.remote.emit(exports.EventType.CHANNEL_PERSISTENCE),null===(o=e.state.keyExchange)||void 0===o||o.setKeysExchanged(!0),e.state.isOriginator&&e.remote.state.channelConfig&&!e.remote.state.channelConfig.relayPersistence&&(e.remote.state.channelConfig.relayPersistence=!0,null===(s=e.remote.state.storageManager)||void 0===s||s.persistChannelConfig(e.remote.state.channelConfig))}))}},{event:"message",handler:function(e,t){return n=>{var o,s,i,a,r,c,l,d,u,h,m,p,g,y,E,v,C,S;const{id:x,ackId:f,message:k,error:T}=n,K=null!==(o=e.remote.state.relayPersistence)&&void 0!==o&&o;if(b.SocketService(`[SocketService handleMessage()]  relayPersistence=${K}  context=${e.state.context} on 'message' ${t} keysExchanged=${null===(s=e.state.keyExchange)||void 0===s?void 0:s.areKeysExchanged()}`,n),T)throw b.SocketService(`\n      [SocketService handleMessage()] context=${e.state.context}::on 'message' error=${T}`),new Error(T);try{!function(e,t){if(t!==e.channelId)throw e.debug&&console.error(`Wrong id ${t} - should be ${e.channelId}`),new Error("Wrong id")}(e.state,x)}catch(e){return void console.error("ignore message --- wrong id ",k)}const I="string"==typeof k;if(!I&&(null==k?void 0:k.type)===exports.KeyExchangeMessageType.KEY_HANDSHAKE_START)return K?void console.warn("[SocketService handleMessage()] Ignoring key exchange message because relay persistence is activated",k):(b.SocketService(`[SocketService handleMessage()] context=${e.state.context}::on 'message' received HANDSHAKE_START isOriginator=${e.state.isOriginator}`,k),void(null===(i=e.state.keyExchange)||void 0===i||i.start({isOriginator:null!==(a=e.state.isOriginator)&&void 0!==a&&a,force:!0})));if(!I&&(null===(r=null==k?void 0:k.type)||void 0===r?void 0:r.startsWith("key_handshake")))return K?void console.warn("[SocketService handleMessage()] Ignoring key exchange message because relay persistence is activated",k):(b.SocketService(`[SocketService handleMessage()] context=${e.state.context}::on 'message' emit KEY_EXCHANGE`,k),void e.emit(W.KEY_EXCHANGE,{message:k,context:e.state.context}));if(I&&!(null===(c=e.state.keyExchange)||void 0===c?void 0:c.areKeysExchanged())){let t=!1;try{b.SocketService(`[SocketService handleMessage()] context=${e.state.context}::on 'message' trying to decrypt message`),null===(l=e.state.keyExchange)||void 0===l||l.decryptMessage(k),t=!0}catch(t){b.SocketService(`[SocketService handleMessage()] context=${e.state.context}::on 'message' error`,t)}if(!t)return e.state.isOriginator?null===(u=e.state.keyExchange)||void 0===u||u.start({isOriginator:null!==(h=e.state.isOriginator)&&void 0!==h&&h}):e.sendMessage({type:exports.KeyExchangeMessageType.KEY_HANDSHAKE_START}),void b.SocketService(`Message ignored because invalid key exchange status. step=${null===(m=e.state.keyExchange)||void 0===m?void 0:m.getKeyInfo().step}`,null===(p=e.state.keyExchange)||void 0===p?void 0:p.getKeyInfo(),k);b.SocketService("Invalid key exchange status detected --- updating it."),null===(d=e.state.keyExchange)||void 0===d||d.setKeysExchanged(!0)}else if(!I&&(null==k?void 0:k.type))return console.warn("[SocketService handleMessage() ::on 'message' received non encrypted unkwown message"),void e.emit(exports.EventType.MESSAGE,k);if(!I)return console.warn("[SocketService handleMessage() ::on 'message' received unkwown message",k),void e.emit(exports.EventType.MESSAGE,k);const _=null===(g=e.state.keyExchange)||void 0===g?void 0:g.decryptMessage(k),O=JSON.parse(null!=_?_:"{}");if(f&&(null==f?void 0:f.length)>0&&(b.SocketService(`[SocketService handleMessage()] context=${e.state.context}::on 'message' ackid=${f} channelId=${x}`),null===(y=e.state.socket)||void 0===y||y.emit(exports.EventType.MESSAGE_ACK,{ackId:f,channelId:x,clientType:e.state.isOriginator?"dapp":"wallet"})),(null==O?void 0:O.type)===exports.MessageType.PAUSE?e.state.clientsPaused=!0:e.state.clientsPaused=!1,e.state.isOriginator&&O.data){const t=O.data,n=e.state.rpcMethodTracker[t.id];if(n){const o=Date.now()-n.timestamp;b.SocketService(`[SocketService handleMessage()] context=${e.state.context}::on 'message' received answer for id=${t.id} method=${n.method} responseTime=${o}`,O),e.remote.state.analytics&&ie.includes(n.method.toLowerCase())&&D({id:null!==(E=e.remote.state.channelId)&&void 0!==E?E:"",event:exports.TrackingEvents.SDK_RPC_REQUEST_DONE,sdkVersion:e.remote.state.sdkVersion,commLayerVersion:H.version,walletVersion:null===(v=e.remote.state.walletInfo)||void 0===v?void 0:v.version,params:{method:n.method,from:"mobile"}},e.remote.state.communicationServerUrl).catch((e=>{console.error("Cannot send analytics",e)}));const s=Object.assign(Object.assign({},n),{result:t.result,error:t.error?{code:null===(C=t.error)||void 0===C?void 0:C.code,message:null===(S=t.error)||void 0===S?void 0:S.message}:void 0,elapsedTime:o});e.state.rpcMethodTracker[t.id]=s,e.emit(exports.EventType.RPC_UPDATE,s)}}e.emit(exports.EventType.MESSAGE,{message:O})}}},{event:"clients_waiting_to_join",handler:function(e,t){return n=>{b.SocketService(`[SocketService: handleClientsWaitingToJoin()] context=${e.state.context} on 'clients_waiting_to_join-${t}'`,n),e.emit(exports.EventType.CLIENTS_WAITING,n)}}}],ce=[{event:exports.EventType.KEY_INFO,handler:function(e){return t=>{b.SocketService("[SocketService: handleKeyInfo()] on 'KEY_INFO'",t),e.emit(exports.EventType.KEY_INFO,t)}}},{event:exports.EventType.KEYS_EXCHANGED,handler:function(e){return()=>{var t,n,o;b.SocketService(`[SocketService: handleKeysExchanged()] on 'keys_exchanged' keyschanged=${null===(t=e.state.keyExchange)||void 0===t?void 0:t.areKeysExchanged()}`);const{channelConfig:s}=e.remote.state;if(s){const t=e.getKeyExchange().getKeyInfo().ecies;s.localKey=t.private,s.otherKey=t.otherPubKey,e.remote.state.channelConfig=s,null===(n=e.remote.state.storageManager)||void 0===n||n.persistChannelConfig(s).catch((e=>{console.error("Error persisting channel config",e)}))}e.emit(exports.EventType.KEYS_EXCHANGED,{keysExchanged:null===(o=e.state.keyExchange)||void 0===o?void 0:o.areKeysExchanged(),isOriginator:e.state.isOriginator});const i={keyInfo:e.getKeyInfo()};e.emit(exports.EventType.SERVICE_STATUS,i)}}}];function le(e,t){b.SocketService(`[SocketService: setupChannelListener()] context=${e.state.context} setting socket listeners for channel ${t}...`);const{socket:n}=e.state,{keyExchange:o}=e.state;e.state.setupChannelListeners&&console.warn(`[SocketService: setupChannelListener()] context=${e.state.context} socket listeners already set up for channel ${t}`),n&&e.state.isOriginator&&(e.state.debug&&(null==n||n.io.on("error",(t=>{b.SocketService(`[SocketService: setupChannelListener()] context=${e.state.context} socket event=error`,t)})),null==n||n.io.on("reconnect",(t=>{b.SocketService(`[SocketService: setupChannelListener()] context=${e.state.context} socket event=reconnect`,t)})),null==n||n.io.on("reconnect_error",(t=>{b.SocketService(`[SocketService: setupChannelListener()] context=${e.state.context} socket event=reconnect_error`,t)})),null==n||n.io.on("reconnect_failed",(()=>{b.SocketService(`[SocketService: setupChannelListener()] context=${e.state.context} socket event=reconnect_failed`)})),null==n||n.io.on("ping",(()=>{b.SocketService(`[SocketService: setupChannelListener()] context=${e.state.context} socket`)}))),null==n||n.on("disconnect",(t=>(b.SocketService(`[SocketService: setupChannelListener()] on 'disconnect' -- MetaMaskSDK socket disconnected '${t}' begin recovery...`),te(e)(t))))),re.forEach((({event:o,handler:s})=>{const i=`${o}-${t}`;null==n||n.on(i,s(e,t))})),ce.forEach((({event:t,handler:n})=>{null==o||o.on(t,n(e))})),e.state.setupChannelListeners=!0}class de extends a.EventEmitter2{constructor({otherPublicKey:e,reconnect:t,communicationLayerPreference:n,transports:o,communicationServerUrl:s,context:i,ecies:a,remote:r,logging:l}){super(),this.state={clientsConnected:!1,clientsPaused:!1,manualDisconnect:!1,lastRpcId:void 0,rpcMethodTracker:{},hasPlaintext:!1,communicationServerUrl:""},this.state.resumed=t,this.state.context=i,this.state.isOriginator=r.state.isOriginator,this.state.communicationLayerPreference=n,this.state.debug=!0===(null==l?void 0:l.serviceLayer),this.remote=r,!0===(null==l?void 0:l.serviceLayer)&&_.enable("SocketService:Layer"),this.state.communicationServerUrl=s,this.state.hasPlaintext=this.state.communicationServerUrl!==F&&!0===(null==l?void 0:l.plaintext);const d={autoConnect:!1,transports:U,withCredentials:!0};o&&(d.transports=o),b.SocketService(`[SocketService: constructor()] Socket IO url: ${this.state.communicationServerUrl}`),this.state.socket=c.io(s,d);const u={communicationLayer:this,otherPublicKey:e,sendPublicKey:!1,context:this.state.context,ecies:a,logging:l};this.state.keyExchange=new J(u)}resetKeys(){return e=this,b.SocketService("[SocketService: resetKeys()] Resetting keys."),void(null===(t=e.state.keyExchange)||void 0===t||t.resetKeys());var e,t}createChannel(){return function(e){var t,n,o,s;if(b.SocketService(`[SocketService: createChannel()] context=${e.state.context}`),null===(t=e.state.socket)||void 0===t?void 0:t.connected)throw console.error("[SocketService: createChannel()] socket already connected"),new Error("socket already connected");console.log("create channel",e.state.socket),null===(n=e.state.socket)||void 0===n||n.connect(),e.state.manualDisconnect=!1,e.state.isOriginator=!0;const i=r.v4();return e.state.channelId=i,le(e,i),null===(o=e.state.socket)||void 0===o||o.emit(exports.EventType.JOIN_CHANNEL,{channelId:i,context:`${e.state.context}createChannel`,clientType:"dapp"}),{channelId:i,pubKey:(null===(s=e.state.keyExchange)||void 0===s?void 0:s.getMyPublicKey())||""}}(this)}connectToChannel({channelId:e,withKeyExchange:t=!1}){return function({options:e,instance:t}){var n,o,s,i,a,r,c,l;const{channelId:d,withKeyExchange:u}=e,h=null!==(n=t.state.isOriginator)&&void 0!==n&&n;if(b.SocketService(`[SocketService: connectToChannel()] context=${t.state.context} channelId=${d} isOriginator=${h}`,null===(o=t.state.keyExchange)||void 0===o?void 0:o.toString()),null===(s=t.state.socket)||void 0===s?void 0:s.connected)throw console.error("[SocketService: connectToChannel()] socket already connected"),new Error("socket already connected");const{channelConfig:m}=t.remote.state;h&&(null==m?void 0:m.relayPersistence)&&(m.localKey&&(null===(i=null==m?void 0:m.localKey)||void 0===i?void 0:i.length)>0&&m.otherKey&&(null===(a=null==m?void 0:m.otherKey)||void 0===a?void 0:a.length)>0?null===(r=t.state.keyExchange)||void 0===r||r.setRelayPersistence({localKey:m.localKey,otherKey:m.otherKey}):console.warn("Missing keys in relay persistence",m)),t.state.manualDisconnect=!1,null===(c=t.state.socket)||void 0===c||c.connect(),t.state.withKeyExchange=u,t.state.isOriginator=h,t.state.channelId=d,le(t,d),null===(l=t.state.socket)||void 0===l||l.emit(exports.EventType.JOIN_CHANNEL,{channelId:d,context:`${t.state.context}_connectToChannel`,clientType:h?"dapp":"wallet"},((e,n)=>{"error_terminated"===e?t.emit(exports.EventType.TERMINATE):"object"==typeof n&&n.persistence&&t.emit(exports.EventType.CHANNEL_PERSISTENCE)}))}({options:{channelId:e,withKeyExchange:t},instance:this})}getKeyInfo(){return this.state.keyExchange.getKeyInfo()}keyCheck(){var e,t;null===(t=(e=this).state.socket)||void 0===t||t.emit(exports.EventType.MESSAGE,{id:e.state.channelId,context:e.state.context,message:{type:exports.KeyExchangeMessageType.KEY_HANDSHAKE_CHECK,pubkey:e.getKeyInfo().ecies.otherPubKey}})}getKeyExchange(){return this.state.keyExchange}sendMessage(e){return ae(this,e)}ping(){return e=this,b.SocketService(`[SocketService: ping()] context=${e.state.context} originator=${e.state.isOriginator} keysExchanged=${null===(t=e.state.keyExchange)||void 0===t?void 0:t.areKeysExchanged()}`),e.state.isOriginator&&((null===(n=e.state.keyExchange)||void 0===n?void 0:n.areKeysExchanged())?(console.warn(`[SocketService:ping()] context=${e.state.context} sending READY message`),e.sendMessage({type:exports.MessageType.READY})):(console.warn(`[SocketService: ping()] context=${e.state.context} starting key exchange`),null===(o=e.state.keyExchange)||void 0===o||o.start({isOriginator:null!==(s=e.state.isOriginator)&&void 0!==s&&s}))),void(null===(i=e.state.socket)||void 0===i||i.emit(exports.EventType.MESSAGE,{id:e.state.channelId,context:e.state.context,clientType:e.remote.state.isOriginator?"dapp":"wallet",message:{type:exports.MessageType.PING}}));var e,t,n,o,s,i}pause(){return e=this,b.SocketService(`[SocketService: pause()] context=${e.state.context}`),e.state.manualDisconnect=!0,(null===(t=e.state.keyExchange)||void 0===t?void 0:t.areKeysExchanged())&&e.sendMessage({type:exports.MessageType.PAUSE}),void(null===(n=e.state.socket)||void 0===n||n.disconnect());var e,t,n}isConnected(){var e;return null===(e=this.state.socket)||void 0===e?void 0:e.connected}resume(){return e=this,b.SocketService(`[SocketService: resume()] context=${e.state.context} connected=${null===(t=e.state.socket)||void 0===t?void 0:t.connected} manualDisconnect=${e.state.manualDisconnect} resumed=${e.state.resumed} keysExchanged=${null===(n=e.state.keyExchange)||void 0===n?void 0:n.areKeysExchanged()}`),(null===(o=e.state.socket)||void 0===o?void 0:o.connected)?b.SocketService("[SocketService: resume()] already connected."):(null===(s=e.state.socket)||void 0===s||s.connect(),b.SocketService(`[SocketService: resume()] after connecting socket --\x3e connected=${null===(i=e.state.socket)||void 0===i?void 0:i.connected}`),null===(a=e.state.socket)||void 0===a||a.emit(exports.EventType.JOIN_CHANNEL,{channelId:e.state.channelId,context:`${e.state.context}_resume`,clientType:e.remote.state.isOriginator?"dapp":"wallet"})),(null===(r=e.state.keyExchange)||void 0===r?void 0:r.areKeysExchanged())?e.state.isOriginator||e.sendMessage({type:exports.MessageType.READY}):e.state.isOriginator||null===(c=e.state.keyExchange)||void 0===c||c.start({isOriginator:null!==(l=e.state.isOriginator)&&void 0!==l&&l}),e.state.manualDisconnect=!1,void(e.state.resumed=!0);var e,t,n,o,s,i,a,r,c,l}getRPCMethodTracker(){return this.state.rpcMethodTracker}disconnect(e){return function(e,t){var n,o;b.SocketService(`[SocketService: disconnect()] context=${e.state.context}`,t),(null==t?void 0:t.terminate)&&(e.state.channelId=t.channelId,null===(n=e.state.keyExchange)||void 0===n||n.clean(),e.state.rpcMethodTracker={}),e.state.manualDisconnect=!0,null===(o=e.state.socket)||void 0===o||o.disconnect()}(this,e)}}var ue,he;function me(e){return()=>l(this,void 0,void 0,(function*(){var t,n,o;const{state:s}=e;if(s.authorized)return;yield(()=>l(this,void 0,void 0,(function*(){for(;!s.walletInfo;)yield Z(500)})))();const i="7.3".localeCompare((null===(t=s.walletInfo)||void 0===t?void 0:t.version)||"");if(b.RemoteCommunication(`[RemoteCommunication: handleAuthorizedEvent()] HACK 'authorized' version=${null===(n=s.walletInfo)||void 0===n?void 0:n.version} compareValue=${i}`),1!==i)return;const a=s.platformType===exports.PlatformType.MobileWeb||s.platformType===exports.PlatformType.ReactNative||s.platformType===exports.PlatformType.MetaMaskMobileWebview;b.RemoteCommunication(`[RemoteCommunication: handleAuthorizedEvent()] HACK 'authorized' platform=${s.platformType} secure=${a} channel=${s.channelId} walletVersion=${null===(o=s.walletInfo)||void 0===o?void 0:o.version}`),a&&(s.authorized=!0,e.emit(exports.EventType.AUTHORIZED))}))}function pe(e){return t=>{const{state:n}=e;b.RemoteCommunication(`[RemoteCommunication: handleChannelCreatedEvent()] context=${n.context} on 'channel_created' channelId=${t}`),e.emit(exports.EventType.CHANNEL_CREATED,t)}}function ge(e,t){return()=>{var n,o,s,i;const{state:a}=e;if(b.RemoteCommunication(`[RemoteCommunication: handleClientsConnectedEvent()] on 'clients_connected' channel=${a.channelId} keysExchanged=${null===(o=null===(n=a.communicationLayer)||void 0===n?void 0:n.getKeyInfo())||void 0===o?void 0:o.keysExchanged}`),a.analytics){const e=a.isOriginator?exports.TrackingEvents.REQUEST:exports.TrackingEvents.REQUEST_MOBILE;D(Object.assign(Object.assign({id:null!==(s=a.channelId)&&void 0!==s?s:"",event:a.reconnection?exports.TrackingEvents.RECONNECT:e},a.originatorInfo),{commLayer:t,sdkVersion:a.sdkVersion,walletVersion:null===(i=a.walletInfo)||void 0===i?void 0:i.version,commLayerVersion:H.version}),a.communicationServerUrl).catch((e=>{console.error("Cannot send analytics",e)}))}a.clientsConnected=!0,a.originatorInfoSent=!1,e.emit(exports.EventType.CLIENTS_CONNECTED)}}function ye(e,t){return n=>{var o;const{state:s}=e;b.RemoteCommunication(`[RemoteCommunication: handleClientsDisconnectedEvent()] context=${s.context} on 'clients_disconnected' channelId=${n}`),s.relayPersistence||(s.clientsConnected=!1,s.ready=!1,s.authorized=!1),e.emit(exports.EventType.CLIENTS_DISCONNECTED,s.channelId),e.setConnectionStatus(exports.ConnectionStatus.DISCONNECTED),s.analytics&&s.channelId&&D({id:s.channelId,event:exports.TrackingEvents.DISCONNECTED,sdkVersion:s.sdkVersion,commLayer:t,commLayerVersion:H.version,walletVersion:null===(o=s.walletInfo)||void 0===o?void 0:o.version},s.communicationServerUrl).catch((e=>{console.error("Cannot send analytics",e)}))}}function Ee(e){return t=>{var n;const{state:o}=e;if(b.RemoteCommunication(`[RemoteCommunication: handleClientsWaitingEvent()] context=${o.context} on 'clients_waiting' numberUsers=${t} ready=${o.ready} autoStarted=${o.originatorConnectStarted}`),e.setConnectionStatus(exports.ConnectionStatus.WAITING),e.emit(exports.EventType.CLIENTS_WAITING,t),o.originatorConnectStarted){b.RemoteCommunication(`[RemoteCommunication: handleClientsWaitingEvent()] on 'clients_waiting' watch autoStarted=${o.originatorConnectStarted} timeout`,o.autoConnectOptions);const t=(null===(n=o.autoConnectOptions)||void 0===n?void 0:n.timeout)||3e3,s=setTimeout((()=>{b.RemoteCommunication(`[RemoteCommunication: handleClientsWaitingEvent()] setTimeout(${t}) terminate channelConfig`,o.autoConnectOptions),o.originatorConnectStarted=!1,o.ready||e.setConnectionStatus(exports.ConnectionStatus.TIMEOUT),clearTimeout(s)}),t)}}}function ve(e,t){return n=>{var o,s,i,a,r,c,l,d;const{state:u}=e;if(b.RemoteCommunication(`[RemoteCommunication: handleKeysExchangedEvent()] context=${u.context} on commLayer.'keys_exchanged' channel=${u.channelId}`,n),null===(s=null===(o=u.communicationLayer)||void 0===o?void 0:o.getKeyInfo())||void 0===s?void 0:s.keysExchanged){const t=Object.assign(Object.assign({},u.channelConfig),{channelId:null!==(i=u.channelId)&&void 0!==i?i:"",validUntil:(null===(a=u.channelConfig)||void 0===a?void 0:a.validUntil)||Y,localKey:u.communicationLayer.getKeyInfo().ecies.private,otherKey:u.communicationLayer.getKeyInfo().ecies.otherPubKey});null===(r=u.storageManager)||void 0===r||r.persistChannelConfig(t).catch((e=>{console.error("Error persisting channel config",e)})),e.setConnectionStatus(exports.ConnectionStatus.LINKED)}!function(e,t){var n,o,s,i,a,r,c,l;const{state:d}=e;b.RemoteCommunication(`[RemoteCommunication: setLastActiveDate()] channel=${d.channelId}`,t);const u=Object.assign(Object.assign({},d.channelConfig),{channelId:null!==(n=d.channelId)&&void 0!==n?n:"",validUntil:null!==(s=null===(o=d.channelConfig)||void 0===o?void 0:o.validUntil)&&void 0!==s?s:0,relayPersistence:d.relayPersistence,localKey:null===(a=null===(i=d.communicationLayer)||void 0===i?void 0:i.state.keyExchange)||void 0===a?void 0:a.getKeyInfo().ecies.private,otherKey:null===(c=null===(r=d.communicationLayer)||void 0===r?void 0:r.state.keyExchange)||void 0===c?void 0:c.getKeyInfo().ecies.otherPubKey,lastActive:t.getTime()});null===(l=d.storageManager)||void 0===l||l.persistChannelConfig(u)}(e,new Date),u.analytics&&u.channelId&&D({id:u.channelId,event:n.isOriginator?exports.TrackingEvents.CONNECTED:exports.TrackingEvents.CONNECTED_MOBILE,sdkVersion:u.sdkVersion,commLayer:t,commLayerVersion:H.version,walletVersion:null===(c=u.walletInfo)||void 0===c?void 0:c.version},u.communicationServerUrl).catch((e=>{console.error("Cannot send analytics",e)})),u.isOriginator=n.isOriginator,n.isOriginator||(null===(l=u.communicationLayer)||void 0===l||l.sendMessage({type:exports.MessageType.READY}),u.ready=!0,u.paused=!1),n.isOriginator&&!u.originatorInfoSent&&(null===(d=u.communicationLayer)||void 0===d||d.sendMessage({type:exports.MessageType.ORIGINATOR_INFO,originatorInfo:u.originatorInfo,originator:u.originatorInfo}),u.originatorInfoSent=!0)}}function Ce(e,t){const{state:n}=t;if(b.RemoteCommunication(`[RemoteCommunication: onCommunicationLayerMessage()] context=${n.context} on 'message' typeof=${typeof e}`,e),t.state.ready=!0,n.isOriginator||e.type!==exports.MessageType.ORIGINATOR_INFO)if(n.isOriginator&&e.type===exports.MessageType.WALLET_INFO)!function(e,t){const{state:n}=e;n.walletInfo=t.walletInfo,n.paused=!1}(t,e);else{if(e.type===exports.MessageType.TERMINATE)!function(e){const{state:t}=e;t.isOriginator&&(Ke({options:{terminate:!0,sendMessage:!1},instance:e}),console.debug(),e.emit(exports.EventType.TERMINATE))}(t);else if(e.type===exports.MessageType.PAUSE)!function(e){const{state:t}=e;t.paused=!0,e.setConnectionStatus(exports.ConnectionStatus.PAUSED)}(t);else if(e.type===exports.MessageType.READY&&n.isOriginator)!function(e){const{state:t}=e;e.setConnectionStatus(exports.ConnectionStatus.LINKED);const n=t.paused;t.paused=!1,e.emit(exports.EventType.CLIENTS_READY,{isOriginator:t.isOriginator,walletInfo:t.walletInfo}),n&&(t.authorized=!0,e.emit(exports.EventType.AUTHORIZED))}(t);else{if(e.type===exports.MessageType.OTP&&n.isOriginator)return void function(e,t){var n;const{state:o}=e;e.emit(exports.EventType.OTP,t.otpAnswer),1==="6.6".localeCompare((null===(n=o.walletInfo)||void 0===n?void 0:n.version)||"")&&(console.warn("RemoteCommunication::on 'otp' -- backward compatibility <6.6 -- triger eth_requestAccounts"),e.emit(exports.EventType.SDK_RPC_CALL,{method:j.ETH_REQUESTACCOUNTS,params:[]}))}(t,e);e.type===exports.MessageType.AUTHORIZED&&n.isOriginator&&function(e){const{state:t}=e;t.authorized=!0,e.emit(exports.EventType.AUTHORIZED)}(t)}t.emit(exports.EventType.MESSAGE,e)}else!function(e,t){var n;const{state:o}=e;null===(n=o.communicationLayer)||void 0===n||n.sendMessage({type:exports.MessageType.WALLET_INFO,walletInfo:o.walletInfo}),o.originatorInfo=t.originatorInfo||t.originator,e.emit(exports.EventType.CLIENTS_READY,{isOriginator:o.isOriginator,originatorInfo:o.originatorInfo}),o.paused=!1}(t,e)}function Se(e,t){var n,o;return l(this,void 0,void 0,(function*(){const{state:s}=e;b.RemoteCommunication(`[RemoteCommunication: sendMessage()] context=${s.context} paused=${s.paused} ready=${s.ready} relayPersistence=${s.relayPersistence} authorized=${s.authorized} socket=${null===(n=s.communicationLayer)||void 0===n?void 0:n.isConnected()} clientsConnected=${s.clientsConnected} status=${s._connectionStatus}`,t),s.relayPersistence||s.ready&&(null===(o=s.communicationLayer)||void 0===o?void 0:o.isConnected())&&s.clientsConnected||(b.RemoteCommunication(`[RemoteCommunication: sendMessage()] context=${s.context}  SKIP message waiting for MM mobile readiness.`),yield new Promise((t=>{e.once(exports.EventType.CLIENTS_READY,t)})),b.RemoteCommunication(`[RemoteCommunication: sendMessage()] context=${s.context}  AFTER SKIP / READY -- sending pending message`));try{yield function(e,t){return l(this,void 0,void 0,(function*(){return new Promise((n=>{var o,s,i,a;const{state:r}=e;if(b.RemoteCommunication(`[RemoteCommunication: handleAuthorization()] context=${r.context} ready=${r.ready} authorized=${r.authorized} method=${t.method}`),1==="7.3".localeCompare((null===(o=r.walletInfo)||void 0===o?void 0:o.version)||""))return b.RemoteCommunication(`[RemoteCommunication: handleAuthorization()] compatibility hack wallet version > ${null===(s=r.walletInfo)||void 0===s?void 0:s.version}`),null===(i=r.communicationLayer)||void 0===i||i.sendMessage(t),void n();!r.isOriginator||r.authorized||r.relayPersistence?(null===(a=r.communicationLayer)||void 0===a||a.sendMessage(t),n()):e.once(exports.EventType.AUTHORIZED,(()=>{var e;b.RemoteCommunication(`[RemoteCommunication: handleAuthorization()] context=${r.context}  AFTER SKIP / AUTHORIZED -- sending pending message`),null===(e=r.communicationLayer)||void 0===e||e.sendMessage(t),n()}))}))}))}(e,t)}catch(e){throw console.error(`[RemoteCommunication: sendMessage()] context=${s.context}  ERROR`,e),e}}))}function xe(e){return t=>{let n=t;t.message&&(n=n.message),Ce(n,e)}}function fe(e){return()=>{const{state:t}=e;b.RemoteCommunication("[RemoteCommunication: handleSocketReconnectEvent()] on 'socket_reconnect' -- reset key exchange status / set ready to false"),t.ready=!1,t.authorized=!1,G(t),e.emitServiceStatusEvent({context:"socket_reconnect"})}}function ke(e){return()=>{const{state:t}=e;b.RemoteCommunication("[RemoteCommunication: handleSocketDisconnectedEvent()] on 'socket_Disconnected' set ready to false"),t.ready=!1}}function Te(e){return()=>l(this,void 0,void 0,(function*(){var t,n,o,s,i,a,r;const{state:c}=e;b.RemoteCommunication(`[RemoteCommunication: handleFullPersistenceEvent()] context=${c.context}`),e.state.ready=!0,e.state.clientsConnected=!0,e.state.authorized=!0,e.state.relayPersistence=!0,null===(t=e.state.communicationLayer)||void 0===t||t.getKeyExchange().setKeysExchanged(!0),e.emit(exports.EventType.KEYS_EXCHANGED,{keysExchanged:!0,isOriginator:!0}),e.emit(exports.EventType.AUTHORIZED),e.emit(exports.EventType.CLIENTS_READY),e.emit(exports.EventType.CHANNEL_PERSISTENCE);try{c.channelConfig=Object.assign(Object.assign({},c.channelConfig),{localKey:null===(n=c.communicationLayer)||void 0===n?void 0:n.getKeyExchange().getKeyInfo().ecies.private,otherKey:null===(o=c.communicationLayer)||void 0===o?void 0:o.getKeyExchange().getOtherPublicKey(),channelId:null!==(s=c.channelId)&&void 0!==s?s:"",validUntil:null!==(a=null===(i=c.channelConfig)||void 0===i?void 0:i.validUntil)&&void 0!==a?a:Y,relayPersistence:!0}),yield null===(r=c.storageManager)||void 0===r?void 0:r.persistChannelConfig(c.channelConfig)}catch(e){console.error("Error persisting channel config",e)}}))}function Ke({options:e,instance:t}){var n,o,s,i,a,c;const{state:l}=t;b.RemoteCommunication(`[RemoteCommunication: disconnect()] channel=${l.channelId}`,e),l.ready=!1,l.paused=!1,(null==e?void 0:e.terminate)?(null===(n=l.storageManager)||void 0===n||n.terminate(null!==(o=l.channelId)&&void 0!==o?o:""),t.state.terminated=!0,e.sendMessage&&(null===(s=l.communicationLayer)||void 0===s?void 0:s.getKeyInfo().keysExchanged)&&(null===(i=l.communicationLayer)||void 0===i||i.sendMessage({type:exports.MessageType.TERMINATE})),l.relayPersistence=!1,l.channelId=r.v4(),e.channelId=l.channelId,l.channelConfig=void 0,l.originatorConnectStarted=!1,null===(a=l.communicationLayer)||void 0===a||a.disconnect(e),t.setConnectionStatus(exports.ConnectionStatus.TERMINATED)):(null===(c=l.communicationLayer)||void 0===c||c.disconnect(e),t.setConnectionStatus(exports.ConnectionStatus.DISCONNECTED))}exports.CommunicationLayerPreference=void 0,(exports.CommunicationLayerPreference||(exports.CommunicationLayerPreference={})).SOCKET="socket",exports.PlatformType=void 0,(ue=exports.PlatformType||(exports.PlatformType={})).NonBrowser="nodejs",ue.MetaMaskMobileWebview="in-app-browser",ue.DesktopWeb="web-desktop",ue.MobileWeb="web-mobile",ue.ReactNative="react-native";class Ie extends a.EventEmitter2{constructor({platformType:e,communicationLayerPreference:t,otherPublicKey:n,reconnect:o,walletInfo:s,dappMetadata:i,protocolVersion:a,transports:r,context:c,relayPersistence:l,ecies:d,analytics:u=!1,storage:h,sdkVersion:m,communicationServerUrl:p=F,logging:g,autoConnect:y={timeout:3e3}}){super(),this.state={ready:!1,authorized:!1,isOriginator:!1,terminated:!1,protocolVersion:1,paused:!1,platformType:"metamask-mobile",analytics:!1,reconnection:!1,originatorInfoSent:!1,communicationServerUrl:F,context:"",persist:!1,clientsConnected:!1,sessionDuration:Y,originatorConnectStarted:!1,debug:!1,_connectionStatus:exports.ConnectionStatus.DISCONNECTED},this.state.otherPublicKey=n,this.state.dappMetadata=i,this.state.walletInfo=s,this.state.transports=r,this.state.platformType=e,this.state.analytics=u,this.state.protocolVersion=null!=a?a:1,this.state.isOriginator=!n,this.state.relayPersistence=l,this.state.communicationServerUrl=p,this.state.context=c,this.state.terminated=!1,this.state.sdkVersion=m,this.setMaxListeners(50),this.setConnectionStatus(exports.ConnectionStatus.DISCONNECTED),(null==h?void 0:h.duration)&&(this.state.sessionDuration=Y),this.state.storageOptions=h,this.state.autoConnectOptions=y,this.state.debug=!0===(null==g?void 0:g.remoteLayer),!0===(null==g?void 0:g.remoteLayer)&&_.enable("RemoteCommunication:Layer"),!0===(null==g?void 0:g.serviceLayer)&&_.enable("SocketService:Layer"),!0===(null==g?void 0:g.eciesLayer)&&_.enable("ECIES:Layer"),!0===(null==g?void 0:g.keyExchangeLayer)&&_.enable("KeyExchange:Layer"),this.state.logging=g,(null==h?void 0:h.storageManager)&&(this.state.storageManager=h.storageManager),b.RemoteCommunication(`[RemoteCommunication: constructor()] protocolVersion=${a} relayPersistence=${l} isOriginator=${this.state.isOriginator} communicationLayerPreference=${t} otherPublicKey=${n} reconnect=${o}`),this.initCommunicationLayer({communicationLayerPreference:t,otherPublicKey:n,reconnect:o,ecies:d,communicationServerUrl:p}),this.emitServiceStatusEvent({context:"constructor"})}initCommunicationLayer({communicationLayerPreference:e,otherPublicKey:t,reconnect:n,ecies:o,communicationServerUrl:s=F}){return function({communicationLayerPreference:e,otherPublicKey:t,reconnect:n,ecies:o,communicationServerUrl:s=F,instance:i}){var a,r,c,l,d,u,h,m,p;const{state:g}=i;if(b.RemoteCommunication("[initCommunicationLayer()] ",JSON.stringify(g,null,2)),e!==exports.CommunicationLayerPreference.SOCKET)throw new Error("Invalid communication protocol");g.communicationLayer=new de({communicationLayerPreference:e,otherPublicKey:t,reconnect:n,transports:g.transports,communicationServerUrl:s,context:g.context,ecies:o,logging:g.logging,remote:i});let y="undefined"!=typeof document&&document.URL||"",E="undefined"!=typeof document&&document.title||"";(null===(a=g.dappMetadata)||void 0===a?void 0:a.url)&&(y=g.dappMetadata.url),(null===(r=g.dappMetadata)||void 0===r?void 0:r.name)&&(E=g.dappMetadata.name);const v="undefined"!=typeof window&&void 0!==window.location?window.location.hostname:null!==(u=null!==(l=null===(c=g.dappMetadata)||void 0===c?void 0:c.name)&&void 0!==l?l:null===(d=g.dappMetadata)||void 0===d?void 0:d.url)&&void 0!==u?u:"unkown",C={url:y,title:E,source:null===(h=g.dappMetadata)||void 0===h?void 0:h.source,dappId:v,icon:(null===(m=g.dappMetadata)||void 0===m?void 0:m.iconUrl)||(null===(p=g.dappMetadata)||void 0===p?void 0:p.base64Icon),platform:g.platformType,apiVersion:H.version};g.originatorInfo=C;const S={[exports.EventType.AUTHORIZED]:me(i),[exports.EventType.MESSAGE]:xe(i),[exports.EventType.CHANNEL_PERSISTENCE]:Te(i),[exports.EventType.CLIENTS_CONNECTED]:ge(i,e),[exports.EventType.KEYS_EXCHANGED]:ve(i,e),[exports.EventType.SOCKET_DISCONNECTED]:ke(i),[exports.EventType.SOCKET_RECONNECT]:fe(i),[exports.EventType.CLIENTS_DISCONNECTED]:ye(i,e),[exports.EventType.KEY_INFO]:()=>{},[exports.EventType.CHANNEL_CREATED]:pe(i),[exports.EventType.CLIENTS_WAITING]:Ee(i),[exports.EventType.RPC_UPDATE]:e=>{i.emit(exports.EventType.RPC_UPDATE,e)}};for(const[e,t]of Object.entries(S))try{g.communicationLayer.on(e,t)}catch(t){console.error(`Error registering handler for ${e}:`,t)}}({communicationLayerPreference:e,otherPublicKey:t,reconnect:n,ecies:o,communicationServerUrl:s,instance:this})}originatorSessionConnect(){return l(this,void 0,void 0,(function*(){return yield function(e){var t;return l(this,void 0,void 0,(function*(){const{state:n}=e;if(!n.storageManager)return void b.RemoteCommunication("[RemoteCommunication: originatorSessionConnect()] no storage manager defined - skip");const o=yield n.storageManager.getPersistedChannelConfig();if(b.RemoteCommunication(`[RemoteCommunication: originatorSessionConnect()] autoStarted=${n.originatorConnectStarted} channelConfig`,o),null===(t=n.communicationLayer)||void 0===t?void 0:t.isConnected())return b.RemoteCommunication("[RemoteCommunication: originatorSessionConnect()] socket already connected - skip"),o;if(o){if(o.validUntil>Date.now())return n.channelConfig=o,n.originatorConnectStarted=!0,n.channelId=null==o?void 0:o.channelId,n.reconnection=!0,o;b.RemoteCommunication("[RemoteCommunication: autoConnect()] Session has expired")}n.originatorConnectStarted=!1}))}(this)}))}generateChannelIdConnect(){return l(this,void 0,void 0,(function*(){return function(e){var t,n,o,s;if(!e.communicationLayer)throw new Error("communication layer not initialized");if(e.ready)throw new Error("Channel already connected");if(e.channelId&&(null===(t=e.communicationLayer)||void 0===t?void 0:t.isConnected()))return console.warn("Channel already exists -- interrupt generateChannelId",e.channelConfig),e.channelConfig=Object.assign(Object.assign({},e.channelConfig),{channelId:e.channelId,validUntil:Date.now()+e.sessionDuration}),null===(n=e.storageManager)||void 0===n||n.persistChannelConfig(e.channelConfig),{channelId:e.channelId,pubKey:null===(s=null===(o=e.communicationLayer)||void 0===o?void 0:o.getKeyInfo())||void 0===s?void 0:s.ecies.public};b.RemoteCommunication("[RemoteCommunication: generateChannelId()]");const i=e.communicationLayer.createChannel();b.RemoteCommunication("[RemoteCommunication: generateChannelId()] channel created",i);const a=Object.assign(Object.assign({},e.channelConfig),{channelId:i.channelId,validUntil:Date.now()+e.sessionDuration});return e.channelId=i.channelId,e.channelConfig=a,{channelId:e.channelId,pubKey:i.pubKey}}(this.state)}))}clean(){return G(this.state)}connectToChannel({channelId:e,withKeyExchange:t}){return function({channelId:e,withKeyExchange:t,state:n}){var o,s,i;if(!r.validate(e))throw b.RemoteCommunication(`[RemoteCommunication: connectToChannel()] context=${n.context} invalid channel channelId=${e}`),new Error(`Invalid channel ${e}`);if(b.RemoteCommunication(`[RemoteCommunication: connectToChannel()] context=${n.context} channelId=${e} withKeyExchange=${t}`),null===(o=n.communicationLayer)||void 0===o?void 0:o.isConnected())return void b.RemoteCommunication(`[RemoteCommunication: connectToChannel()] context=${n.context} already connected - interrupt connection.`);n.channelId=e,null===(s=n.communicationLayer)||void 0===s||s.connectToChannel({channelId:e,withKeyExchange:t});const a=Object.assign(Object.assign({},n.channelConfig),{channelId:e,validUntil:Date.now()+n.sessionDuration});n.channelConfig=a,null===(i=n.storageManager)||void 0===i||i.persistChannelConfig(a)}({channelId:e,withKeyExchange:t,state:this.state})}sendMessage(e){return Se(this,e)}testStorage(){return l(this,void 0,void 0,(function*(){return function(e){var t;return l(this,void 0,void 0,(function*(){const n=yield null===(t=e.storageManager)||void 0===t?void 0:t.getPersistedChannelConfig();b.RemoteCommunication("[RemoteCommunication: testStorage()] res",n)}))}(this.state)}))}getChannelConfig(){return this.state.channelConfig}isReady(){return this.state.ready}isConnected(){var e;return null===(e=this.state.communicationLayer)||void 0===e?void 0:e.isConnected()}isAuthorized(){return this.state.authorized}isPaused(){return this.state.paused}getCommunicationLayer(){return this.state.communicationLayer}ping(){var e;b.RemoteCommunication(`[RemoteCommunication: ping()] channel=${this.state.channelId}`),null===(e=this.state.communicationLayer)||void 0===e||e.ping()}testLogger(){b.RemoteCommunication(`testLogger() channel=${this.state.channelId}`),b.SocketService(`testLogger() channel=${this.state.channelId}`),b.Ecies(`testLogger() channel=${this.state.channelId}`),b.KeyExchange(`testLogger() channel=${this.state.channelId}`)}keyCheck(){var e;b.RemoteCommunication(`[RemoteCommunication: keyCheck()] channel=${this.state.channelId}`),null===(e=this.state.communicationLayer)||void 0===e||e.keyCheck()}setConnectionStatus(e){this.state._connectionStatus!==e&&(this.state._connectionStatus=e,this.emit(exports.EventType.CONNECTION_STATUS,e),this.emitServiceStatusEvent({context:"setConnectionStatus"}))}emitServiceStatusEvent(e={}){this.emit(exports.EventType.SERVICE_STATUS,this.getServiceStatus())}getConnectionStatus(){return this.state._connectionStatus}getServiceStatus(){return{originatorInfo:this.state.originatorInfo,keyInfo:this.getKeyInfo(),connectionStatus:this.state._connectionStatus,channelConfig:this.state.channelConfig,channelId:this.state.channelId}}getKeyInfo(){var e;return null===(e=this.state.communicationLayer)||void 0===e?void 0:e.getKeyInfo()}resetKeys(){var e;null===(e=this.state.communicationLayer)||void 0===e||e.resetKeys()}setOtherPublicKey(e){var t;const n=null===(t=this.state.communicationLayer)||void 0===t?void 0:t.getKeyExchange();if(!n)throw new Error("KeyExchange is not initialized.");n.getOtherPublicKey()!==e&&n.setOtherPublicKey(e)}pause(){var e;b.RemoteCommunication(`[RemoteCommunication: pause()] channel=${this.state.channelId}`),null===(e=this.state.communicationLayer)||void 0===e||e.pause(),this.setConnectionStatus(exports.ConnectionStatus.PAUSED)}getVersion(){return H.version}hasRelayPersistence(){var e;return null!==(e=this.state.relayPersistence)&&void 0!==e&&e}resume(){return function(e){var t;const{state:n}=e;b.RemoteCommunication(`[RemoteCommunication: resume()] channel=${n.channelId}`),null===(t=n.communicationLayer)||void 0===t||t.resume(),e.setConnectionStatus(exports.ConnectionStatus.LINKED)}(this)}getChannelId(){return this.state.channelId}getRPCMethodTracker(){var e;return null===(e=this.state.communicationLayer)||void 0===e?void 0:e.getRPCMethodTracker()}disconnect(e){return Ke({options:e,instance:this})}}exports.AutoConnectType=void 0,(he=exports.AutoConnectType||(exports.AutoConnectType={})).RENEW="renew",he.LINK="link",exports.DEFAULT_SERVER_URL=F,exports.ECIES=L,exports.RemoteCommunication=Ie,exports.SendAnalytics=D,exports.SocketService=de;
//# sourceMappingURL=metamask-sdk-communication-layer.js.map
